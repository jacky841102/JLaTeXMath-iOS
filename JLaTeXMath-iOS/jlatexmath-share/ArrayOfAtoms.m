//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/ArrayOfAtoms.java
//


#include "ArrayOfAtoms.h"
#include "Atom.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "TeXConstants.h"
#include "TeXFormula.h"
#include "VRowAtom.h"
#include "java/util/LinkedList.h"

@implementation OrgScilabForgeJlatexmathArrayOfAtoms

- (instancetype)init {
  OrgScilabForgeJlatexmathArrayOfAtoms_init(self);
  return self;
}

- (void)addCol {
  [((JavaUtilLinkedList *) nil_chk([((JavaUtilLinkedList *) nil_chk(array_)) getWithInt:row_])) addWithId:root_];
  root_ = nil;
}

- (void)addColWithInt:(jint)n {
  [((JavaUtilLinkedList *) nil_chk([((JavaUtilLinkedList *) nil_chk(array_)) getWithInt:row_])) addWithId:root_];
  for (jint i = 1; i < n - 1; i++) {
    [((JavaUtilLinkedList *) nil_chk([array_ getWithInt:row_])) addWithId:nil];
  }
  root_ = nil;
}

- (void)addRow {
  [self addCol];
  [((JavaUtilLinkedList *) nil_chk(array_)) addWithId:new_JavaUtilLinkedList_init()];
  row_++;
}

- (jint)getRows {
  return row_;
}

- (jint)getCols {
  return col_;
}

- (OrgScilabForgeJlatexmathVRowAtom *)getAsVRow {
  OrgScilabForgeJlatexmathVRowAtom *vr = new_OrgScilabForgeJlatexmathVRowAtom_init();
  [vr setAddInterlineWithBoolean:YES];
  for (JavaUtilLinkedList * __strong r in nil_chk(array_)) {
    for (OrgScilabForgeJlatexmathAtom * __strong a in nil_chk(r)) {
      [vr appendWithOrgScilabForgeJlatexmathAtom:a];
    }
  }
  return vr;
}

- (void)checkDimensions {
  if ([((JavaUtilLinkedList *) nil_chk([((JavaUtilLinkedList *) nil_chk(array_)) getLast])) size] != 0) [self addRow];
  else if (root_ != nil) [self addRow];
  row_ = [array_ size] - 1;
  col_ = [((JavaUtilLinkedList *) nil_chk([array_ getWithInt:0])) size];
  for (jint i = 1; i < row_; i++) {
    if ([((JavaUtilLinkedList *) nil_chk([array_ getWithInt:i])) size] > col_) {
      col_ = [((JavaUtilLinkedList *) nil_chk([array_ getWithInt:i])) size];
    }
  }
  for (jint i = 0; i < row_; i++) {
    jint j = [((JavaUtilLinkedList *) nil_chk([array_ getWithInt:i])) size];
    if (j != col_ && [((JavaUtilLinkedList *) nil_chk([array_ getWithInt:i])) getWithInt:0] != nil && ((OrgScilabForgeJlatexmathAtom *) nil_chk([((JavaUtilLinkedList *) nil_chk([array_ getWithInt:i])) getWithInt:0]))->type_ != OrgScilabForgeJlatexmathTeXConstants_TYPE_INTERTEXT) {
      JavaUtilLinkedList *r = [array_ getWithInt:i];
      for (; j < col_; j++) {
        [((JavaUtilLinkedList *) nil_chk(r)) addWithId:nil];
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ArrayOfAtoms", NULL, 0x1, NULL, NULL },
    { "addCol", NULL, "V", 0x1, NULL, NULL },
    { "addColWithInt:", "addCol", "V", 0x1, NULL, NULL },
    { "addRow", NULL, "V", 0x1, NULL, NULL },
    { "getRows", NULL, "I", 0x1, NULL, NULL },
    { "getCols", NULL, "I", 0x1, NULL, NULL },
    { "getAsVRow", NULL, "Lorg.scilab.forge.jlatexmath.VRowAtom;", 0x1, NULL, NULL },
    { "checkDimensions", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "array_", NULL, 0x1, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Ljava/util/LinkedList<Lorg/scilab/forge/jlatexmath/Atom;>;>;",  },
    { "col_", NULL, 0x1, "I", NULL, NULL,  },
    { "row_", NULL, 0x1, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathArrayOfAtoms = { 2, "ArrayOfAtoms", "org.scilab.forge.jlatexmath", NULL, 0x1, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathArrayOfAtoms;
}

@end

void OrgScilabForgeJlatexmathArrayOfAtoms_init(OrgScilabForgeJlatexmathArrayOfAtoms *self) {
  (void) OrgScilabForgeJlatexmathTeXFormula_init(self);
  self->array_ = new_JavaUtilLinkedList_init();
  [self->array_ addWithId:new_JavaUtilLinkedList_init()];
  self->row_ = 0;
}

OrgScilabForgeJlatexmathArrayOfAtoms *new_OrgScilabForgeJlatexmathArrayOfAtoms_init() {
  OrgScilabForgeJlatexmathArrayOfAtoms *self = [OrgScilabForgeJlatexmathArrayOfAtoms alloc];
  OrgScilabForgeJlatexmathArrayOfAtoms_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathArrayOfAtoms)
