//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/DefaultTeXFontParser.java
//


#include "Attr.h"
#include "CharFont.h"
#include "DefaultTeXFont.h"
#include "DefaultTeXFontParser.h"
#include "Element.h"
#include "Font.h"
#include "FontAdapter.h"
#include "FontAlreadyLoadedException.h"
#include "FontInfo.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NamedNodeMap.h"
#include "Node.h"
#include "NodeList.h"
#include "ParserAdapter.h"
#include "Resource.h"
#include "ResourceParseException.h"
#include "SymbolAtom.h"
#include "TeXFormula.h"
#include "XMLResourceParseException.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface OrgScilabForgeJlatexmathDefaultTeXFontParser () {
 @public
  id<JavaUtilMap> parsedTextStyles_;
  id<OrgScilabForgeJlatexmathPlatformParserElement> root_;
  id base_;
  OrgScilabForgeJlatexmathPlatformResource *resource_;
  OrgScilabForgeJlatexmathPlatformParserAdapter *parserAdapter_;
}

+ (void)setCharChildParsers;

+ (void)processCharElementWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)charElement
                                       withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info;

- (id<JavaUtilMap>)parseStyleMappings;

+ (void)setRangeTypeMappings;

+ (NSString *)getAttrValueAndCheckIfNotNullWithNSString:(NSString *)attrName
      withOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)element;

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, parsedTextStyles_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, root_, id<OrgScilabForgeJlatexmathPlatformParserElement>)
J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, base_, id)
J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, resource_, OrgScilabForgeJlatexmathPlatformResource *)
J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, parserAdapter_, OrgScilabForgeJlatexmathPlatformParserAdapter *)

static jboolean OrgScilabForgeJlatexmathDefaultTeXFontParser_registerFontExceptionDisplayed_ = NO;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, registerFontExceptionDisplayed_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, registerFontExceptionDisplayed_, jboolean)

static jboolean OrgScilabForgeJlatexmathDefaultTeXFontParser_shouldRegisterFonts_ = YES;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, shouldRegisterFonts_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, shouldRegisterFonts_, jboolean)

static id<JavaUtilMap> OrgScilabForgeJlatexmathDefaultTeXFontParser_rangeTypeMappings_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, rangeTypeMappings_, id<JavaUtilMap>)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, rangeTypeMappings_, id<JavaUtilMap>)

static id<JavaUtilMap> OrgScilabForgeJlatexmathDefaultTeXFontParser_charChildParsers_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, charChildParsers_, id<JavaUtilMap>)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFontParser, charChildParsers_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgScilabForgeJlatexmathDefaultTeXFontParser_setCharChildParsers();

__attribute__((unused)) static void OrgScilabForgeJlatexmathDefaultTeXFontParser_processCharElementWithOrgScilabForgeJlatexmathPlatformParserElement_withOrgScilabForgeJlatexmathFontInfo_(id<OrgScilabForgeJlatexmathPlatformParserElement> charElement, OrgScilabForgeJlatexmathFontInfo *info);

__attribute__((unused)) static id<JavaUtilMap> OrgScilabForgeJlatexmathDefaultTeXFontParser_parseStyleMappings(OrgScilabForgeJlatexmathDefaultTeXFontParser *self);

__attribute__((unused)) static void OrgScilabForgeJlatexmathDefaultTeXFontParser_setRangeTypeMappings();

__attribute__((unused)) static NSString *OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(NSString *attrName, id<OrgScilabForgeJlatexmathPlatformParserElement> element);

@protocol OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser < NSObject, JavaObject >

- (void)parseWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)el
                                                      withChar:(jchar)ch
                          withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info;

@end

@interface OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser : NSObject
@end

J2OBJC_EMPTY_STATIC_INIT(OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser)

J2OBJC_TYPE_LITERAL_HEADER(OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser)

@interface OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser : NSObject < OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser >

- (instancetype)init;

- (void)parseWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)el
                                                      withChar:(jchar)ch
                          withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser)

__attribute__((unused)) static void OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser_init(OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser *self);

__attribute__((unused)) static OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser)

@interface OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser : NSObject < OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser >

- (instancetype)init;

- (void)parseWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)el
                                                      withChar:(jchar)ch
                          withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser)

__attribute__((unused)) static void OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser_init(OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser *self);

__attribute__((unused)) static OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser)

@interface OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser : NSObject < OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser >

- (instancetype)init;

- (void)parseWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)el
                                                      withChar:(jchar)ch
                          withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser)

__attribute__((unused)) static void OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser_init(OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser *self);

__attribute__((unused)) static OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser)

@interface OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser : NSObject < OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser >

- (instancetype)init;

- (void)parseWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)el
                                                      withChar:(jchar)ch
                          withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser)

__attribute__((unused)) static void OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser_init(OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser *self);

__attribute__((unused)) static OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser)

J2OBJC_INITIALIZED_DEFN(OrgScilabForgeJlatexmathDefaultTeXFontParser)

NSString *OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_ = @"DefaultTeXFont.xml";
NSString *OrgScilabForgeJlatexmathDefaultTeXFontParser_STYLE_MAPPING_EL_ = @"TextStyleMapping";
NSString *OrgScilabForgeJlatexmathDefaultTeXFontParser_SYMBOL_MAPPING_EL_ = @"SymbolMapping";
NSString *OrgScilabForgeJlatexmathDefaultTeXFontParser_GEN_SET_EL_ = @"GeneralSettings";
NSString *OrgScilabForgeJlatexmathDefaultTeXFontParser_MUFONTID_ATTR_ = @"mufontid";
NSString *OrgScilabForgeJlatexmathDefaultTeXFontParser_SPACEFONTID_ATTR_ = @"spacefontid";
JavaUtilArrayList *OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_;

@implementation OrgScilabForgeJlatexmathDefaultTeXFontParser

- (instancetype)init {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_init(self);
  return self;
}

- (instancetype)initWithId:(id)file
              withNSString:(NSString *)name {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initWithId_withNSString_(self, file, name);
  return self;
}

- (instancetype)initWithId:(id)base
                    withId:(id)file
              withNSString:(NSString *)name {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initWithId_withId_withNSString_(self, base, file, name);
  return self;
}

+ (void)setCharChildParsers {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_setCharChildParsers();
}

- (IOSObjectArray *)parseFontDescriptionsWithOrgScilabForgeJlatexmathFontInfoArray:(IOSObjectArray *)fi
                                                                            withId:(id)file
                                                                      withNSString:(NSString *)name {
  if (file == nil) {
    return fi;
  }
  JavaUtilArrayList *res = new_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(fi));
  id<OrgScilabForgeJlatexmathPlatformParserElement> font;
  @try {
    font = [((OrgScilabForgeJlatexmathPlatformParserAdapter *) nil_chk(parserAdapter_)) createParserAndParseFileWithId:file];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_(JreStrcat("$$C$", @"Cannot find the file ", name, '!', [((JavaLangException *) nil_chk(e)) description]));
  }
  NSString *fontName = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"name", font);
  NSString *fontId = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"id", font);
  if ([((JavaUtilArrayList *) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_)) indexOfWithId:fontId] < 0) [OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ addWithId:fontId];
  else @throw new_OrgScilabForgeJlatexmathExceptionFontAlreadyLoadedException_initWithNSString_(JreStrcat("$$$", @"Font ", fontId, @" is already loaded !"));
  jfloat space = OrgScilabForgeJlatexmathDefaultTeXFontParser_getFloatAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"space", font);
  jfloat xHeight = OrgScilabForgeJlatexmathDefaultTeXFontParser_getFloatAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"xHeight", font);
  jfloat quad = OrgScilabForgeJlatexmathDefaultTeXFontParser_getFloatAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"quad", font);
  jint skewChar = OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalIntWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withInt_(@"skewChar", font, -1);
  jint unicode = OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalIntWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withInt_(@"unicode", font, 0);
  NSString *bold = nil;
  @try {
    bold = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"boldVersion", font);
  }
  @catch (OrgScilabForgeJlatexmathExceptionResourceParseException *e) {
  }
  NSString *roman = nil;
  @try {
    roman = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"romanVersion", font);
  }
  @catch (OrgScilabForgeJlatexmathExceptionResourceParseException *e) {
  }
  NSString *ss = nil;
  @try {
    ss = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"ssVersion", font);
  }
  @catch (OrgScilabForgeJlatexmathExceptionResourceParseException *e) {
  }
  NSString *tt = nil;
  @try {
    tt = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"ttVersion", font);
  }
  @catch (OrgScilabForgeJlatexmathExceptionResourceParseException *e) {
  }
  NSString *it = nil;
  @try {
    it = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"itVersion", font);
  }
  @catch (OrgScilabForgeJlatexmathExceptionResourceParseException *e) {
  }
  NSString *path = JreStrcat("$$", [name substring:0 endIndex:[((NSString *) nil_chk(name)) lastIndexOfString:@"/"] + 1], fontName);
  OrgScilabForgeJlatexmathFontInfo *info = new_OrgScilabForgeJlatexmathFontInfo_initWithInt_withId_withNSString_withNSString_withInt_withFloat_withFloat_withFloat_withNSString_withNSString_withNSString_withNSString_withNSString_([OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ indexOfWithId:fontId], base_, path, fontName, unicode, xHeight, space, quad, bold, roman, ss, tt, it);
  if (skewChar != -1) [info setSkewCharWithChar:(jchar) skewChar];
  id<OrgScilabForgeJlatexmathPlatformParserNodeList> listF = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(font)) getElementsByTagNameWithNSString:@"Char"];
  for (jint j = 0; j < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(listF)) getLength]; j++) OrgScilabForgeJlatexmathDefaultTeXFontParser_processCharElementWithOrgScilabForgeJlatexmathPlatformParserElement_withOrgScilabForgeJlatexmathFontInfo_([((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([listF itemWithInt:j])) castToElement], info);
  [res addWithId:info];
  for (jint i = 0; i < [res size]; i++) {
    OrgScilabForgeJlatexmathFontInfo *fin = [res getWithInt:i];
    [fin setBoldIdWithInt:[OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ indexOfWithId:((OrgScilabForgeJlatexmathFontInfo *) nil_chk(fin))->boldVersion_]];
    [fin setRomanIdWithInt:[OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ indexOfWithId:fin->romanVersion_]];
    [fin setSsIdWithInt:[OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ indexOfWithId:fin->ssVersion_]];
    [fin setTtIdWithInt:[OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ indexOfWithId:fin->ttVersion_]];
    [fin setItIdWithInt:[OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ indexOfWithId:fin->itVersion_]];
  }
  parsedTextStyles_ = OrgScilabForgeJlatexmathDefaultTeXFontParser_parseStyleMappings(self);
  return [res toArrayWithNSObjectArray:fi];
}

- (IOSObjectArray *)parseFontDescriptionsWithOrgScilabForgeJlatexmathFontInfoArray:(IOSObjectArray *)fi {
  id<OrgScilabForgeJlatexmathPlatformParserElement> fontDescriptions = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(root_)) getElementsByTagNameWithNSString:@"FontDescriptions"])) itemWithInt:0])) castToElement];
  if (![((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(fontDescriptions)) isNull]) {
    id<OrgScilabForgeJlatexmathPlatformParserNodeList> list = [fontDescriptions getElementsByTagNameWithNSString:@"Metrics"];
    for (jint i = 0; i < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(list)) getLength]; i++) {
      NSString *include = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"include", [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([list itemWithInt:i])) castToElement]);
      if (base_ == nil) {
        fi = [self parseFontDescriptionsWithOrgScilabForgeJlatexmathFontInfoArray:fi withId:[((OrgScilabForgeJlatexmathPlatformResource *) nil_chk(resource_)) loadResourceWithId:OrgScilabForgeJlatexmathDefaultTeXFontParser_class_() withNSString:include] withNSString:include];
      }
      else {
        fi = [self parseFontDescriptionsWithOrgScilabForgeJlatexmathFontInfoArray:fi withId:[((OrgScilabForgeJlatexmathPlatformResource *) nil_chk(resource_)) loadResourceWithId:base_ withNSString:include] withNSString:include];
      }
    }
  }
  return fi;
}

- (void)parseExtraPath {
  id<OrgScilabForgeJlatexmathPlatformParserElement> syms = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(root_)) getElementsByTagNameWithNSString:@"TeXSymbols"])) itemWithInt:0])) castToElement];
  if (![((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(syms)) isNull]) {
    NSString *include = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"include", syms);
    OrgScilabForgeJlatexmathSymbolAtom_addSymbolAtomWithId_withNSString_([((OrgScilabForgeJlatexmathPlatformResource *) nil_chk(resource_)) loadResourceWithId:base_ withNSString:include], include);
  }
  id<OrgScilabForgeJlatexmathPlatformParserElement> settings = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk([root_ getElementsByTagNameWithNSString:@"FormulaSettings"])) itemWithInt:0])) castToElement];
  if (![((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(settings)) isNull]) {
    NSString *include = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"include", settings);
    OrgScilabForgeJlatexmathTeXFormula_addSymbolMappingsWithId_withNSString_([((OrgScilabForgeJlatexmathPlatformResource *) nil_chk(resource_)) loadResourceWithId:base_ withNSString:include], include);
  }
}

+ (void)processCharElementWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)charElement
                                       withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_processCharElementWithOrgScilabForgeJlatexmathPlatformParserElement_withOrgScilabForgeJlatexmathFontInfo_(charElement, info);
}

+ (void)registerFontsWithBoolean:(jboolean)b {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_registerFontsWithBoolean_(b);
}

+ (id<OrgScilabForgeJlatexmathPlatformFontFont>)createFontWithNSString:(NSString *)name {
  return OrgScilabForgeJlatexmathDefaultTeXFontParser_createFontWithNSString_(name);
}

+ (id<OrgScilabForgeJlatexmathPlatformFontFont>)createFontWithId:(id)base
                                                    withNSString:(NSString *)name {
  return OrgScilabForgeJlatexmathDefaultTeXFontParser_createFontWithId_withNSString_(base, name);
}

- (id<JavaUtilMap>)parseSymbolMappings {
  id<JavaUtilMap> res = new_JavaUtilHashMap_init();
  id<OrgScilabForgeJlatexmathPlatformParserElement> symbolMappings = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(root_)) getElementsByTagNameWithNSString:@"SymbolMappings"])) itemWithInt:0])) castToElement];
  if ([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(symbolMappings)) isNull]) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, @"SymbolMappings");
  else {
    id<OrgScilabForgeJlatexmathPlatformParserNodeList> list = [symbolMappings getElementsByTagNameWithNSString:@"Mapping"];
    for (jint i = 0; i < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(list)) getLength]; i++) {
      NSString *include = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"include", [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([list itemWithInt:i])) castToElement]);
      id<OrgScilabForgeJlatexmathPlatformParserElement> map;
      @try {
        if (base_ == nil) {
          map = [((OrgScilabForgeJlatexmathPlatformParserAdapter *) nil_chk(parserAdapter_)) createParserAndParseFileWithId:[((OrgScilabForgeJlatexmathPlatformResource *) nil_chk(resource_)) loadResourceWithId:OrgScilabForgeJlatexmathDefaultTeXFontParser_class_() withNSString:include]];
        }
        else {
          map = [((OrgScilabForgeJlatexmathPlatformParserAdapter *) nil_chk(parserAdapter_)) createParserAndParseFileWithId:[((OrgScilabForgeJlatexmathPlatformResource *) nil_chk(resource_)) loadResourceWithId:base_ withNSString:include]];
        }
      }
      @catch (JavaLangException *e) {
        @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_(JreStrcat("$$C", @"Cannot find the file ", include, '!'));
      }
      id<OrgScilabForgeJlatexmathPlatformParserNodeList> listM = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(map)) getElementsByTagNameWithNSString:OrgScilabForgeJlatexmathDefaultTeXFontParser_SYMBOL_MAPPING_EL_];
      for (jint j = 0; j < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(listM)) getLength]; j++) {
        id<OrgScilabForgeJlatexmathPlatformParserElement> mapping = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([listM itemWithInt:j])) castToElement];
        NSString *symbolName = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"name", mapping);
        jint ch = OrgScilabForgeJlatexmathDefaultTeXFontParser_getIntAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"ch", mapping);
        NSString *fontId = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"fontId", mapping);
        NSString *boldFontId = nil;
        @try {
          boldFontId = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"boldId", mapping);
        }
        @catch (OrgScilabForgeJlatexmathExceptionResourceParseException *e) {
        }
        if (boldFontId == nil) {
          (void) [res putWithId:symbolName withId:new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_((jchar) ch, [((JavaUtilArrayList *) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_)) indexOfWithId:fontId])];
        }
        else {
          (void) [res putWithId:symbolName withId:new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_withInt_((jchar) ch, [((JavaUtilArrayList *) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_)) indexOfWithId:fontId], [OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ indexOfWithId:boldFontId])];
        }
      }
    }
    return res;
  }
}

- (IOSObjectArray *)parseDefaultTextStyleMappings {
  IOSObjectArray *res = [IOSObjectArray newArrayWithLength:4 type:NSString_class_()];
  id<OrgScilabForgeJlatexmathPlatformParserElement> defaultTextStyleMappings = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(root_)) getElementsByTagNameWithNSString:@"DefaultTextStyleMapping"])) itemWithInt:0])) castToElement];
  if ([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(defaultTextStyleMappings)) isNull]) return res;
  else {
    id<OrgScilabForgeJlatexmathPlatformParserNodeList> list = [defaultTextStyleMappings getElementsByTagNameWithNSString:@"MapStyle"];
    for (jint i = 0; i < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(list)) getLength]; i++) {
      id<OrgScilabForgeJlatexmathPlatformParserElement> mapping = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([list itemWithInt:i])) castToElement];
      NSString *code = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"code", mapping);
      id codeMapping = [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_rangeTypeMappings_)) getWithId:code];
      if (codeMapping == nil) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, @"MapStyle", @"code", JreStrcat("$$$", @"contains an unknown \"range name\" '", code, @"'!"));
      NSString *textStyleName = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"textStyle", mapping);
      id styleMapping = [((id<JavaUtilMap>) nil_chk(parsedTextStyles_)) getWithId:textStyleName];
      if (styleMapping == nil) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, @"MapStyle", @"textStyle", JreStrcat("$$$", @"contains an unknown text style '", textStyleName, @"'!"));
      IOSObjectArray *charFonts = [parsedTextStyles_ getWithId:textStyleName];
      jint index = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(codeMapping, [JavaLangInteger class])))) intValue];
      if (IOSObjectArray_Get(nil_chk(charFonts), index) == nil) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_(JreStrcat("$$$$$$", OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, @": the default text style mapping '", textStyleName, @"' for the range '", code, @"' contains no mapping for that range!"));
      else (void) IOSObjectArray_Set(res, index, textStyleName);
    }
  }
  return res;
}

- (id<JavaUtilMap>)parseParameters {
  id<JavaUtilMap> res = new_JavaUtilHashMap_init();
  id<OrgScilabForgeJlatexmathPlatformParserElement> parameters = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(root_)) getElementsByTagNameWithNSString:@"Parameters"])) itemWithInt:0])) castToElement];
  if ([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(parameters)) isNull]) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, @"Parameters");
  else {
    id<OrgScilabForgeJlatexmathPlatformParserNamedNodeMap> list = [parameters getAttributes];
    for (jint i = 0; i < [((id<OrgScilabForgeJlatexmathPlatformParserNamedNodeMap>) nil_chk(list)) getLength]; i++) {
      NSString *name = [((id<OrgScilabForgeJlatexmathPlatformParserAttr>) nil_chk(([((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([list itemWithInt:i])) castToAttr]))) getName];
      (void) [res putWithId:name withId:new_JavaLangFloat_initWithFloat_(OrgScilabForgeJlatexmathDefaultTeXFontParser_getFloatAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(name, parameters))];
    }
    return res;
  }
}

- (id<JavaUtilMap>)parseGeneralSettings {
  id<JavaUtilMap> res = new_JavaUtilHashMap_init();
  id<OrgScilabForgeJlatexmathPlatformParserElement> generalSettings = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(root_)) getElementsByTagNameWithNSString:@"GeneralSettings"])) itemWithInt:0])) castToElement];
  if ([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(generalSettings)) isNull]) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, @"GeneralSettings");
  else {
    (void) [res putWithId:OrgScilabForgeJlatexmathDefaultTeXFontParser_MUFONTID_ATTR_ withId:JavaLangInteger_valueOfWithInt_([((JavaUtilArrayList *) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_)) indexOfWithId:OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(OrgScilabForgeJlatexmathDefaultTeXFontParser_MUFONTID_ATTR_, generalSettings)])];
    (void) [res putWithId:OrgScilabForgeJlatexmathDefaultTeXFontParser_SPACEFONTID_ATTR_ withId:JavaLangInteger_valueOfWithInt_([OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ indexOfWithId:OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(OrgScilabForgeJlatexmathDefaultTeXFontParser_SPACEFONTID_ATTR_, generalSettings)])];
    (void) [res putWithId:@"scriptfactor" withId:JavaLangFloat_valueOfWithFloat_(OrgScilabForgeJlatexmathDefaultTeXFontParser_getFloatAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"scriptfactor", generalSettings))];
    (void) [res putWithId:@"scriptscriptfactor" withId:JavaLangFloat_valueOfWithFloat_(OrgScilabForgeJlatexmathDefaultTeXFontParser_getFloatAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"scriptscriptfactor", generalSettings))];
  }
  return res;
}

- (id<JavaUtilMap>)parseTextStyleMappings {
  return parsedTextStyles_;
}

- (id<JavaUtilMap>)parseStyleMappings {
  return OrgScilabForgeJlatexmathDefaultTeXFontParser_parseStyleMappings(self);
}

+ (void)setRangeTypeMappings {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_setRangeTypeMappings();
}

+ (NSString *)getAttrValueAndCheckIfNotNullWithNSString:(NSString *)attrName
      withOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)element {
  return OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(attrName, element);
}

+ (jfloat)getFloatAndCheckWithNSString:(NSString *)attrName
withOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)element {
  return OrgScilabForgeJlatexmathDefaultTeXFontParser_getFloatAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(attrName, element);
}

+ (jint)getIntAndCheckWithNSString:(NSString *)attrName
withOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)element {
  return OrgScilabForgeJlatexmathDefaultTeXFontParser_getIntAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(attrName, element);
}

+ (jint)getOptionalIntWithNSString:(NSString *)attrName
withOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)element
                           withInt:(jint)defaultValue {
  return OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalIntWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withInt_(attrName, element, defaultValue);
}

+ (jfloat)getOptionalFloatWithNSString:(NSString *)attrName
withOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)element
                             withFloat:(jfloat)defaultValue {
  return OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalFloatWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withFloat_(attrName, element, defaultValue);
}

+ (void)initialize {
  if (self == [OrgScilabForgeJlatexmathDefaultTeXFontParser class]) {
    OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ = new_JavaUtilArrayList_init();
    OrgScilabForgeJlatexmathDefaultTeXFontParser_rangeTypeMappings_ = new_JavaUtilHashMap_init();
    OrgScilabForgeJlatexmathDefaultTeXFontParser_charChildParsers_ = new_JavaUtilHashMap_init();
    {
      OrgScilabForgeJlatexmathDefaultTeXFontParser_setRangeTypeMappings();
      OrgScilabForgeJlatexmathDefaultTeXFontParser_setCharChildParsers();
    }
    J2OBJC_SET_INITIALIZED(OrgScilabForgeJlatexmathDefaultTeXFontParser)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DefaultTeXFontParser", NULL, 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "initWithId:withNSString:", "DefaultTeXFontParser", NULL, 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "initWithId:withId:withNSString:", "DefaultTeXFontParser", NULL, 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "setCharChildParsers", NULL, "V", 0xa, NULL, NULL },
    { "parseFontDescriptionsWithOrgScilabForgeJlatexmathFontInfoArray:withId:withNSString:", "parseFontDescriptions", "[Lorg.scilab.forge.jlatexmath.FontInfo;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "parseFontDescriptionsWithOrgScilabForgeJlatexmathFontInfoArray:", "parseFontDescriptions", "[Lorg.scilab.forge.jlatexmath.FontInfo;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "parseExtraPath", NULL, "V", 0x4, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "processCharElementWithOrgScilabForgeJlatexmathPlatformParserElement:withOrgScilabForgeJlatexmathFontInfo:", "processCharElement", "V", 0xa, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "registerFontsWithBoolean:", "registerFonts", "V", 0x9, NULL, NULL },
    { "createFontWithNSString:", "createFont", "Lorg.scilab.forge.jlatexmath.platform.font.Font;", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "createFontWithId:withNSString:", "createFont", "Lorg.scilab.forge.jlatexmath.platform.font.Font;", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "parseSymbolMappings", NULL, "Ljava.util.Map;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "parseDefaultTextStyleMappings", NULL, "[Ljava.lang.String;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "parseParameters", NULL, "Ljava.util.Map;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "parseGeneralSettings", NULL, "Ljava.util.Map;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "parseTextStyleMappings", NULL, "Ljava.util.Map;", 0x1, NULL, NULL },
    { "parseStyleMappings", NULL, "Ljava.util.Map;", 0x2, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "setRangeTypeMappings", NULL, "V", 0xa, NULL, NULL },
    { "getAttrValueAndCheckIfNotNullWithNSString:withOrgScilabForgeJlatexmathPlatformParserElement:", "getAttrValueAndCheckIfNotNull", "Ljava.lang.String;", 0xa, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "getFloatAndCheckWithNSString:withOrgScilabForgeJlatexmathPlatformParserElement:", "getFloatAndCheck", "F", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "getIntAndCheckWithNSString:withOrgScilabForgeJlatexmathPlatformParserElement:", "getIntAndCheck", "I", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "getOptionalIntWithNSString:withOrgScilabForgeJlatexmathPlatformParserElement:withInt:", "getOptionalInt", "I", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "getOptionalFloatWithNSString:withOrgScilabForgeJlatexmathPlatformParserElement:withFloat:", "getOptionalFloat", "F", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "registerFontExceptionDisplayed_", NULL, 0xa, "Z", &OrgScilabForgeJlatexmathDefaultTeXFontParser_registerFontExceptionDisplayed_, NULL,  },
    { "shouldRegisterFonts_", NULL, 0xa, "Z", &OrgScilabForgeJlatexmathDefaultTeXFontParser_shouldRegisterFonts_, NULL,  },
    { "RESOURCE_NAME_", NULL, 0x19, "Ljava.lang.String;", &OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, NULL,  },
    { "STYLE_MAPPING_EL_", NULL, 0x19, "Ljava.lang.String;", &OrgScilabForgeJlatexmathDefaultTeXFontParser_STYLE_MAPPING_EL_, NULL,  },
    { "SYMBOL_MAPPING_EL_", NULL, 0x19, "Ljava.lang.String;", &OrgScilabForgeJlatexmathDefaultTeXFontParser_SYMBOL_MAPPING_EL_, NULL,  },
    { "GEN_SET_EL_", NULL, 0x19, "Ljava.lang.String;", &OrgScilabForgeJlatexmathDefaultTeXFontParser_GEN_SET_EL_, NULL,  },
    { "MUFONTID_ATTR_", NULL, 0x19, "Ljava.lang.String;", &OrgScilabForgeJlatexmathDefaultTeXFontParser_MUFONTID_ATTR_, NULL,  },
    { "SPACEFONTID_ATTR_", NULL, 0x19, "Ljava.lang.String;", &OrgScilabForgeJlatexmathDefaultTeXFontParser_SPACEFONTID_ATTR_, NULL,  },
    { "Font_ID_", NULL, 0xc, "Ljava.util.ArrayList;", &OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_, "Ljava/util/ArrayList<Ljava/lang/String;>;",  },
    { "rangeTypeMappings_", NULL, 0xa, "Ljava.util.Map;", &OrgScilabForgeJlatexmathDefaultTeXFontParser_rangeTypeMappings_, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;",  },
    { "charChildParsers_", NULL, 0xa, "Ljava.util.Map;", &OrgScilabForgeJlatexmathDefaultTeXFontParser_charChildParsers_, "Ljava/util/Map<Ljava/lang/String;Lorg/scilab/forge/jlatexmath/DefaultTeXFontParser$CharChildParser;>;",  },
    { "parsedTextStyles_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;L[Lorg/scilab/forge/jlatexmath/CharFont;;>;",  },
    { "root_", NULL, 0x2, "Lorg.scilab.forge.jlatexmath.platform.parser.Element;", NULL, NULL,  },
    { "base_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL,  },
    { "resource_", NULL, 0x12, "Lorg.scilab.forge.jlatexmath.platform.Resource;", NULL, NULL,  },
    { "parserAdapter_", NULL, 0x12, "Lorg.scilab.forge.jlatexmath.platform.ParserAdapter;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.scilab.forge.jlatexmath.DefaultTeXFontParser$CharChildParser;", "Lorg.scilab.forge.jlatexmath.DefaultTeXFontParser$ExtensionParser;", "Lorg.scilab.forge.jlatexmath.DefaultTeXFontParser$KernParser;", "Lorg.scilab.forge.jlatexmath.DefaultTeXFontParser$LigParser;", "Lorg.scilab.forge.jlatexmath.DefaultTeXFontParser$NextLargerParser;"};
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathDefaultTeXFontParser = { 2, "DefaultTeXFontParser", "org.scilab.forge.jlatexmath", NULL, 0x1, 23, methods, 16, fields, 0, NULL, 5, inner_classes, NULL, NULL };
  return &_OrgScilabForgeJlatexmathDefaultTeXFontParser;
}

@end

void OrgScilabForgeJlatexmathDefaultTeXFontParser_init(OrgScilabForgeJlatexmathDefaultTeXFontParser *self) {
  (void) NSObject_init(self);
  self->base_ = nil;
  self->resource_ = new_OrgScilabForgeJlatexmathPlatformResource_init();
  self->parserAdapter_ = new_OrgScilabForgeJlatexmathPlatformParserAdapter_init();
  id file = [self->resource_ loadResourceWithId:OrgScilabForgeJlatexmathDefaultTeXFontParser_class_() withNSString:OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_];
  @try {
    self->root_ = [self->parserAdapter_ createParserAndParseFileWithId:file withBoolean:YES withBoolean:YES];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withJavaLangThrowable_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, e);
  }
}

OrgScilabForgeJlatexmathDefaultTeXFontParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_init() {
  OrgScilabForgeJlatexmathDefaultTeXFontParser *self = [OrgScilabForgeJlatexmathDefaultTeXFontParser alloc];
  OrgScilabForgeJlatexmathDefaultTeXFontParser_init(self);
  return self;
}

void OrgScilabForgeJlatexmathDefaultTeXFontParser_initWithId_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser *self, id file, NSString *name) {
  (void) NSObject_init(self);
  self->base_ = nil;
  self->resource_ = new_OrgScilabForgeJlatexmathPlatformResource_init();
  self->parserAdapter_ = new_OrgScilabForgeJlatexmathPlatformParserAdapter_init();
  @try {
    self->root_ = [self->parserAdapter_ createParserAndParseFileWithId:file withBoolean:YES withBoolean:YES];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withJavaLangThrowable_(name, e);
  }
}

OrgScilabForgeJlatexmathDefaultTeXFontParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_initWithId_withNSString_(id file, NSString *name) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser *self = [OrgScilabForgeJlatexmathDefaultTeXFontParser alloc];
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initWithId_withNSString_(self, file, name);
  return self;
}

void OrgScilabForgeJlatexmathDefaultTeXFontParser_initWithId_withId_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser *self, id base, id file, NSString *name) {
  (void) NSObject_init(self);
  self->base_ = nil;
  self->base_ = base;
  self->resource_ = new_OrgScilabForgeJlatexmathPlatformResource_init();
  self->parserAdapter_ = new_OrgScilabForgeJlatexmathPlatformParserAdapter_init();
  @try {
    self->root_ = [self->parserAdapter_ createParserAndParseFileWithId:file withBoolean:YES withBoolean:YES];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withJavaLangThrowable_(name, e);
  }
}

OrgScilabForgeJlatexmathDefaultTeXFontParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_initWithId_withId_withNSString_(id base, id file, NSString *name) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser *self = [OrgScilabForgeJlatexmathDefaultTeXFontParser alloc];
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initWithId_withId_withNSString_(self, base, file, name);
  return self;
}

void OrgScilabForgeJlatexmathDefaultTeXFontParser_setCharChildParsers() {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  (void) [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_charChildParsers_)) putWithId:@"Kern" withId:new_OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser_init()];
  (void) [OrgScilabForgeJlatexmathDefaultTeXFontParser_charChildParsers_ putWithId:@"Lig" withId:new_OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser_init()];
  (void) [OrgScilabForgeJlatexmathDefaultTeXFontParser_charChildParsers_ putWithId:@"NextLarger" withId:new_OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser_init()];
  (void) [OrgScilabForgeJlatexmathDefaultTeXFontParser_charChildParsers_ putWithId:@"Extension" withId:new_OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser_init()];
}

void OrgScilabForgeJlatexmathDefaultTeXFontParser_processCharElementWithOrgScilabForgeJlatexmathPlatformParserElement_withOrgScilabForgeJlatexmathFontInfo_(id<OrgScilabForgeJlatexmathPlatformParserElement> charElement, OrgScilabForgeJlatexmathFontInfo *info) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  jchar ch = (jchar) OrgScilabForgeJlatexmathDefaultTeXFontParser_getIntAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"code", charElement);
  IOSFloatArray *metrics = [IOSFloatArray newArrayWithLength:4];
  *IOSFloatArray_GetRef(metrics, OrgScilabForgeJlatexmathDefaultTeXFont_WIDTH) = OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalFloatWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withFloat_(@"width", charElement, 0);
  *IOSFloatArray_GetRef(metrics, OrgScilabForgeJlatexmathDefaultTeXFont_HEIGHT) = OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalFloatWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withFloat_(@"height", charElement, 0);
  *IOSFloatArray_GetRef(metrics, OrgScilabForgeJlatexmathDefaultTeXFont_DEPTH) = OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalFloatWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withFloat_(@"depth", charElement, 0);
  *IOSFloatArray_GetRef(metrics, OrgScilabForgeJlatexmathDefaultTeXFont_IT) = OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalFloatWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withFloat_(@"italic", charElement, 0);
  [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) setMetricsWithChar:ch withFloatArray:metrics];
  id<OrgScilabForgeJlatexmathPlatformParserNodeList> list = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(charElement)) getChildNodes];
  for (jint i = 0; i < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(list)) getLength]; i++) {
    id<OrgScilabForgeJlatexmathPlatformParserNode> node = [list itemWithInt:i];
    if ([((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk(node)) getNodeType] != OrgScilabForgeJlatexmathPlatformParserNode_TEXT_NODE) {
      id<OrgScilabForgeJlatexmathPlatformParserElement> el = [node castToElement];
      id parser = [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_charChildParsers_)) getWithId:[((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(el)) getTagName]];
      if (parser == nil) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_(JreStrcat("$$$$", OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, @": a <Char>-element has an unknown child element '", [el getTagName], @"'!"));
      else [((id<OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser>) check_protocol_cast(parser, @protocol(OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser))) parseWithOrgScilabForgeJlatexmathPlatformParserElement:el withChar:ch withOrgScilabForgeJlatexmathFontInfo:info];
    }
  }
}

void OrgScilabForgeJlatexmathDefaultTeXFontParser_registerFontsWithBoolean_(jboolean b) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  OrgScilabForgeJlatexmathDefaultTeXFontParser_shouldRegisterFonts_ = b;
}

id<OrgScilabForgeJlatexmathPlatformFontFont> OrgScilabForgeJlatexmathDefaultTeXFontParser_createFontWithNSString_(NSString *name) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  return OrgScilabForgeJlatexmathDefaultTeXFontParser_createFontWithId_withNSString_(nil, name);
}

id<OrgScilabForgeJlatexmathPlatformFontFont> OrgScilabForgeJlatexmathDefaultTeXFontParser_createFontWithId_withNSString_(id base, NSString *name) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  OrgScilabForgeJlatexmathPlatformFontAdapter *fontAdapter = new_OrgScilabForgeJlatexmathPlatformFontAdapter_init();
  return [fontAdapter loadFontWithId:base withNSString:name];
}

id<JavaUtilMap> OrgScilabForgeJlatexmathDefaultTeXFontParser_parseStyleMappings(OrgScilabForgeJlatexmathDefaultTeXFontParser *self) {
  id<JavaUtilMap> res = new_JavaUtilHashMap_init();
  id<OrgScilabForgeJlatexmathPlatformParserElement> textStyleMappings = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(self->root_)) getElementsByTagNameWithNSString:@"TextStyleMappings"])) itemWithInt:0])) castToElement];
  if ([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(textStyleMappings)) isNull]) return res;
  else {
    id<OrgScilabForgeJlatexmathPlatformParserNodeList> list = [textStyleMappings getElementsByTagNameWithNSString:OrgScilabForgeJlatexmathDefaultTeXFontParser_STYLE_MAPPING_EL_];
    for (jint i = 0; i < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(list)) getLength]; i++) {
      id<OrgScilabForgeJlatexmathPlatformParserElement> mapping = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([list itemWithInt:i])) castToElement];
      NSString *textStyleName = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"name", mapping);
      NSString *boldFontId = nil;
      @try {
        boldFontId = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"bold", mapping);
      }
      @catch (OrgScilabForgeJlatexmathExceptionResourceParseException *e) {
      }
      id<OrgScilabForgeJlatexmathPlatformParserNodeList> mapRangeList = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(mapping)) getElementsByTagNameWithNSString:@"MapRange"];
      IOSObjectArray *charFonts = [IOSObjectArray newArrayWithLength:4 type:OrgScilabForgeJlatexmathCharFont_class_()];
      for (jint j = 0; j < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(mapRangeList)) getLength]; j++) {
        id<OrgScilabForgeJlatexmathPlatformParserElement> mapRange = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([mapRangeList itemWithInt:j])) castToElement];
        NSString *fontId = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"fontId", mapRange);
        jint ch = OrgScilabForgeJlatexmathDefaultTeXFontParser_getIntAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"start", mapRange);
        NSString *code = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"code", mapRange);
        id codeMapping = [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_rangeTypeMappings_)) getWithId:code];
        if (codeMapping == nil) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, @"MapRange", @"code", JreStrcat("$$$", @"contains an unknown \"range name\" '", code, @"'!"));
        else if (boldFontId == nil) (void) IOSObjectArray_Set(charFonts, [((JavaLangInteger *) check_class_cast(codeMapping, [JavaLangInteger class])) intValue], new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_((jchar) ch, [((JavaUtilArrayList *) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_)) indexOfWithId:fontId]));
        else (void) IOSObjectArray_Set(charFonts, [((JavaLangInteger *) check_class_cast(codeMapping, [JavaLangInteger class])) intValue], new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_withInt_((jchar) ch, [((JavaUtilArrayList *) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_)) indexOfWithId:fontId], [OrgScilabForgeJlatexmathDefaultTeXFontParser_Font_ID_ indexOfWithId:boldFontId]));
      }
      (void) [res putWithId:textStyleName withId:charFonts];
    }
  }
  return res;
}

void OrgScilabForgeJlatexmathDefaultTeXFontParser_setRangeTypeMappings() {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  (void) [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_rangeTypeMappings_)) putWithId:@"numbers" withId:JavaLangInteger_valueOfWithInt_(OrgScilabForgeJlatexmathDefaultTeXFont_NUMBERS)];
  (void) [OrgScilabForgeJlatexmathDefaultTeXFontParser_rangeTypeMappings_ putWithId:@"capitals" withId:JavaLangInteger_valueOfWithInt_(OrgScilabForgeJlatexmathDefaultTeXFont_CAPITALS)];
  (void) [OrgScilabForgeJlatexmathDefaultTeXFontParser_rangeTypeMappings_ putWithId:@"small" withId:JavaLangInteger_valueOfWithInt_(OrgScilabForgeJlatexmathDefaultTeXFont_SMALL)];
  (void) [OrgScilabForgeJlatexmathDefaultTeXFontParser_rangeTypeMappings_ putWithId:@"unicode" withId:JavaLangInteger_valueOfWithInt_(OrgScilabForgeJlatexmathDefaultTeXFont_UNICODE)];
}

NSString *OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(NSString *attrName, id<OrgScilabForgeJlatexmathPlatformParserElement> element) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  NSString *attrValue = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(element)) getAttributeWithNSString:attrName];
  if ([((NSString *) nil_chk(attrValue)) isEqual:@""]) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, [element getTagName], attrName, nil);
  return attrValue;
}

jfloat OrgScilabForgeJlatexmathDefaultTeXFontParser_getFloatAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(NSString *attrName, id<OrgScilabForgeJlatexmathPlatformParserElement> element) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  NSString *attrValue = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(attrName, element);
  jfloat res = 0;
  @try {
    res = (jfloat) JavaLangDouble_parseDoubleWithNSString_(attrValue);
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(element)) getTagName], attrName, @"has an invalid real value!");
  }
  return res;
}

jint OrgScilabForgeJlatexmathDefaultTeXFontParser_getIntAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(NSString *attrName, id<OrgScilabForgeJlatexmathPlatformParserElement> element) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  NSString *attrValue = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(attrName, element);
  jint res = 0;
  @try {
    res = JavaLangInteger_parseIntWithNSString_(attrValue);
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(element)) getTagName], attrName, @"has an invalid integer value!");
  }
  return res;
}

jint OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalIntWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withInt_(NSString *attrName, id<OrgScilabForgeJlatexmathPlatformParserElement> element, jint defaultValue) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  NSString *attrValue = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(element)) getAttributeWithNSString:attrName];
  if ([((NSString *) nil_chk(attrValue)) isEqual:@""]) return defaultValue;
  else {
    jint res = 0;
    @try {
      res = JavaLangInteger_parseIntWithNSString_(attrValue);
    }
    @catch (JavaLangNumberFormatException *e) {
      @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, [element getTagName], attrName, @"has an invalid integer value!");
    }
    return res;
  }
}

jfloat OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalFloatWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withFloat_(NSString *attrName, id<OrgScilabForgeJlatexmathPlatformParserElement> element, jfloat defaultValue) {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_initialize();
  NSString *attrValue = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(element)) getAttributeWithNSString:attrName];
  if ([((NSString *) nil_chk(attrValue)) isEqual:@""]) return defaultValue;
  else {
    jfloat res = 0;
    @try {
      res = (jfloat) JavaLangDouble_parseDoubleWithNSString_(attrValue);
    }
    @catch (JavaLangNumberFormatException *e) {
      @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_RESOURCE_NAME_, [element getTagName], attrName, @"has an invalid float value!");
    }
    return res;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathDefaultTeXFontParser)

@implementation OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "parseWithOrgScilabForgeJlatexmathPlatformParserElement:withChar:withOrgScilabForgeJlatexmathFontInfo:", "parse", "V", 0x401, "Lorg.scilab.forge.jlatexmath.exception.XMLResourceParseException;", NULL },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser = { 2, "CharChildParser", "org.scilab.forge.jlatexmath", "DefaultTeXFontParser", 0x60a, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathDefaultTeXFontParser_CharChildParser)

@implementation OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser

- (instancetype)init {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser_init(self);
  return self;
}

- (void)parseWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)el
                                                      withChar:(jchar)ch
                          withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info {
  IOSIntArray *extensionChars = [IOSIntArray newArrayWithLength:4];
  *IOSIntArray_GetRef(extensionChars, OrgScilabForgeJlatexmathDefaultTeXFont_REP) = OrgScilabForgeJlatexmathDefaultTeXFontParser_getIntAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"rep", el);
  *IOSIntArray_GetRef(extensionChars, OrgScilabForgeJlatexmathDefaultTeXFont_TOP) = OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalIntWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withInt_(@"top", el, OrgScilabForgeJlatexmathDefaultTeXFont_NONE);
  *IOSIntArray_GetRef(extensionChars, OrgScilabForgeJlatexmathDefaultTeXFont_MID) = OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalIntWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withInt_(@"mid", el, OrgScilabForgeJlatexmathDefaultTeXFont_NONE);
  *IOSIntArray_GetRef(extensionChars, OrgScilabForgeJlatexmathDefaultTeXFont_BOT) = OrgScilabForgeJlatexmathDefaultTeXFontParser_getOptionalIntWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withInt_(@"bot", el, OrgScilabForgeJlatexmathDefaultTeXFont_NONE);
  [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) setExtensionWithChar:ch withIntArray:extensionChars];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ExtensionParser", NULL, 0x0, NULL, NULL },
    { "parseWithOrgScilabForgeJlatexmathPlatformParserElement:withChar:withOrgScilabForgeJlatexmathFontInfo:", "parse", "V", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser = { 2, "ExtensionParser", "org.scilab.forge.jlatexmath", "DefaultTeXFontParser", 0xa, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser;
}

@end

void OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser_init(OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser *self) {
  (void) NSObject_init(self);
}

OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser_init() {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser *self = [OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser alloc];
  OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathDefaultTeXFontParser_ExtensionParser)

@implementation OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser

- (instancetype)init {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser_init(self);
  return self;
}

- (void)parseWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)el
                                                      withChar:(jchar)ch
                          withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info {
  jint code = OrgScilabForgeJlatexmathDefaultTeXFontParser_getIntAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"code", el);
  jfloat kernAmount = OrgScilabForgeJlatexmathDefaultTeXFontParser_getFloatAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"val", el);
  [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) addKernWithChar:ch withChar:(jchar) code withFloat:kernAmount];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "KernParser", NULL, 0x0, NULL, NULL },
    { "parseWithOrgScilabForgeJlatexmathPlatformParserElement:withChar:withOrgScilabForgeJlatexmathFontInfo:", "parse", "V", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser = { 2, "KernParser", "org.scilab.forge.jlatexmath", "DefaultTeXFontParser", 0xa, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser;
}

@end

void OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser_init(OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser *self) {
  (void) NSObject_init(self);
}

OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser_init() {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser *self = [OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser alloc];
  OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathDefaultTeXFontParser_KernParser)

@implementation OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser

- (instancetype)init {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser_init(self);
  return self;
}

- (void)parseWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)el
                                                      withChar:(jchar)ch
                          withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info {
  jint code = OrgScilabForgeJlatexmathDefaultTeXFontParser_getIntAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"code", el);
  jint ligCode = OrgScilabForgeJlatexmathDefaultTeXFontParser_getIntAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"ligCode", el);
  [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) addLigatureWithChar:ch withChar:(jchar) code withChar:(jchar) ligCode];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "LigParser", NULL, 0x0, NULL, NULL },
    { "parseWithOrgScilabForgeJlatexmathPlatformParserElement:withChar:withOrgScilabForgeJlatexmathFontInfo:", "parse", "V", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser = { 2, "LigParser", "org.scilab.forge.jlatexmath", "DefaultTeXFontParser", 0xa, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser;
}

@end

void OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser_init(OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser *self) {
  (void) NSObject_init(self);
}

OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser_init() {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser *self = [OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser alloc];
  OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathDefaultTeXFontParser_LigParser)

@implementation OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser

- (instancetype)init {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser_init(self);
  return self;
}

- (void)parseWithOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)el
                                                      withChar:(jchar)ch
                          withOrgScilabForgeJlatexmathFontInfo:(OrgScilabForgeJlatexmathFontInfo *)info {
  NSString *fontId = OrgScilabForgeJlatexmathDefaultTeXFontParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"fontId", el);
  jint code = OrgScilabForgeJlatexmathDefaultTeXFontParser_getIntAndCheckWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"code", el);
  [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) setNextLargerWithChar:ch withChar:(jchar) code withInt:[((JavaUtilArrayList *) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFontParser_get_Font_ID_())) indexOfWithId:fontId]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "NextLargerParser", NULL, 0x0, NULL, NULL },
    { "parseWithOrgScilabForgeJlatexmathPlatformParserElement:withChar:withOrgScilabForgeJlatexmathFontInfo:", "parse", "V", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser = { 2, "NextLargerParser", "org.scilab.forge.jlatexmath", "DefaultTeXFontParser", 0xa, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser;
}

@end

void OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser_init(OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser *self) {
  (void) NSObject_init(self);
}

OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser *new_OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser_init() {
  OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser *self = [OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser alloc];
  OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathDefaultTeXFontParser_NextLargerParser)
