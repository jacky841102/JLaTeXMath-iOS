//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/TeXFormulaSettingsParser.java
//


#include "Element.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Node.h"
#include "NodeList.h"
#include "ParserAdapter.h"
#include "Resource.h"
#include "ResourceParseException.h"
#include "TeXFormulaSettingsParser.h"
#include "XMLResourceParseException.h"
#include "java/lang/Exception.h"

@interface OrgScilabForgeJlatexmathTeXFormulaSettingsParser () {
 @public
  id<OrgScilabForgeJlatexmathPlatformParserElement> root_;
}

+ (void)addToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList:(id<OrgScilabForgeJlatexmathPlatformParserNodeList>)mapList
                                                 withNSStringArray:(IOSObjectArray *)tableMath
                                                 withNSStringArray:(IOSObjectArray *)tableText;

+ (void)addFormulaToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList:(id<OrgScilabForgeJlatexmathPlatformParserNodeList>)mapList
                                                        withNSStringArray:(IOSObjectArray *)tableMath
                                                        withNSStringArray:(IOSObjectArray *)tableText;

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathTeXFormulaSettingsParser, root_, id<OrgScilabForgeJlatexmathPlatformParserElement>)

__attribute__((unused)) static void OrgScilabForgeJlatexmathTeXFormulaSettingsParser_addToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList_withNSStringArray_withNSStringArray_(id<OrgScilabForgeJlatexmathPlatformParserNodeList> mapList, IOSObjectArray *tableMath, IOSObjectArray *tableText);

__attribute__((unused)) static void OrgScilabForgeJlatexmathTeXFormulaSettingsParser_addFormulaToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList_withNSStringArray_withNSStringArray_(id<OrgScilabForgeJlatexmathPlatformParserNodeList> mapList, IOSObjectArray *tableMath, IOSObjectArray *tableText);

NSString *OrgScilabForgeJlatexmathTeXFormulaSettingsParser_RESOURCE_NAME_ = @"TeXFormulaSettings.xml";
NSString *OrgScilabForgeJlatexmathTeXFormulaSettingsParser_CHARTODEL_MAPPING_EL_ = @"Map";

@implementation OrgScilabForgeJlatexmathTeXFormulaSettingsParser

- (instancetype)init {
  OrgScilabForgeJlatexmathTeXFormulaSettingsParser_init(self);
  return self;
}

- (instancetype)initWithId:(id)file
              withNSString:(NSString *)name {
  OrgScilabForgeJlatexmathTeXFormulaSettingsParser_initWithId_withNSString_(self, file, name);
  return self;
}

- (void)parseSymbolToFormulaMappingsWithNSStringArray:(IOSObjectArray *)mappings
                                    withNSStringArray:(IOSObjectArray *)textMappings {
  id<OrgScilabForgeJlatexmathPlatformParserElement> charToSymbol = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(root_)) getElementsByTagNameWithNSString:@"CharacterToFormulaMappings"])) itemWithInt:0])) castToElement];
  if (![((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(charToSymbol)) isNull]) OrgScilabForgeJlatexmathTeXFormulaSettingsParser_addFormulaToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList_withNSStringArray_withNSStringArray_([charToSymbol getElementsByTagNameWithNSString:@"Map"], mappings, textMappings);
}

- (void)parseSymbolMappingsWithNSStringArray:(IOSObjectArray *)mappings
                           withNSStringArray:(IOSObjectArray *)textMappings {
  id<OrgScilabForgeJlatexmathPlatformParserElement> charToSymbol = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk([((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(root_)) getElementsByTagNameWithNSString:@"CharacterToSymbolMappings"])) itemWithInt:0])) castToElement];
  if (![((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(charToSymbol)) isNull]) OrgScilabForgeJlatexmathTeXFormulaSettingsParser_addToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList_withNSStringArray_withNSStringArray_([charToSymbol getElementsByTagNameWithNSString:@"Map"], mappings, textMappings);
}

+ (void)addToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList:(id<OrgScilabForgeJlatexmathPlatformParserNodeList>)mapList
                                                 withNSStringArray:(IOSObjectArray *)tableMath
                                                 withNSStringArray:(IOSObjectArray *)tableText {
  OrgScilabForgeJlatexmathTeXFormulaSettingsParser_addToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList_withNSStringArray_withNSStringArray_(mapList, tableMath, tableText);
}

+ (void)addFormulaToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList:(id<OrgScilabForgeJlatexmathPlatformParserNodeList>)mapList
                                                        withNSStringArray:(IOSObjectArray *)tableMath
                                                        withNSStringArray:(IOSObjectArray *)tableText {
  OrgScilabForgeJlatexmathTeXFormulaSettingsParser_addFormulaToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList_withNSStringArray_withNSStringArray_(mapList, tableMath, tableText);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TeXFormulaSettingsParser", NULL, 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "initWithId:withNSString:", "TeXFormulaSettingsParser", NULL, 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "parseSymbolToFormulaMappingsWithNSStringArray:withNSStringArray:", "parseSymbolToFormulaMappings", "V", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "parseSymbolMappingsWithNSStringArray:withNSStringArray:", "parseSymbolMappings", "V", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "addToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList:withNSStringArray:withNSStringArray:", "addToMap", "V", 0xa, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "addFormulaToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList:withNSStringArray:withNSStringArray:", "addFormulaToMap", "V", 0xa, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "RESOURCE_NAME_", NULL, 0x19, "Ljava.lang.String;", &OrgScilabForgeJlatexmathTeXFormulaSettingsParser_RESOURCE_NAME_, NULL,  },
    { "CHARTODEL_MAPPING_EL_", NULL, 0x19, "Ljava.lang.String;", &OrgScilabForgeJlatexmathTeXFormulaSettingsParser_CHARTODEL_MAPPING_EL_, NULL,  },
    { "root_", NULL, 0x2, "Lorg.scilab.forge.jlatexmath.platform.parser.Element;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathTeXFormulaSettingsParser = { 2, "TeXFormulaSettingsParser", "org.scilab.forge.jlatexmath", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathTeXFormulaSettingsParser;
}

@end

void OrgScilabForgeJlatexmathTeXFormulaSettingsParser_init(OrgScilabForgeJlatexmathTeXFormulaSettingsParser *self) {
  (void) OrgScilabForgeJlatexmathTeXFormulaSettingsParser_initWithId_withNSString_(self, [new_OrgScilabForgeJlatexmathPlatformResource_init() loadResourceWithId:OrgScilabForgeJlatexmathTeXFormulaSettingsParser_class_() withNSString:OrgScilabForgeJlatexmathTeXFormulaSettingsParser_RESOURCE_NAME_], OrgScilabForgeJlatexmathTeXFormulaSettingsParser_RESOURCE_NAME_);
}

OrgScilabForgeJlatexmathTeXFormulaSettingsParser *new_OrgScilabForgeJlatexmathTeXFormulaSettingsParser_init() {
  OrgScilabForgeJlatexmathTeXFormulaSettingsParser *self = [OrgScilabForgeJlatexmathTeXFormulaSettingsParser alloc];
  OrgScilabForgeJlatexmathTeXFormulaSettingsParser_init(self);
  return self;
}

void OrgScilabForgeJlatexmathTeXFormulaSettingsParser_initWithId_withNSString_(OrgScilabForgeJlatexmathTeXFormulaSettingsParser *self, id file, NSString *name) {
  (void) NSObject_init(self);
  @try {
    self->root_ = [new_OrgScilabForgeJlatexmathPlatformParserAdapter_init() createParserAndParseFileWithId:file withBoolean:YES withBoolean:YES];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withJavaLangThrowable_(name, e);
  }
}

OrgScilabForgeJlatexmathTeXFormulaSettingsParser *new_OrgScilabForgeJlatexmathTeXFormulaSettingsParser_initWithId_withNSString_(id file, NSString *name) {
  OrgScilabForgeJlatexmathTeXFormulaSettingsParser *self = [OrgScilabForgeJlatexmathTeXFormulaSettingsParser alloc];
  OrgScilabForgeJlatexmathTeXFormulaSettingsParser_initWithId_withNSString_(self, file, name);
  return self;
}

void OrgScilabForgeJlatexmathTeXFormulaSettingsParser_addToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList_withNSStringArray_withNSStringArray_(id<OrgScilabForgeJlatexmathPlatformParserNodeList> mapList, IOSObjectArray *tableMath, IOSObjectArray *tableText) {
  OrgScilabForgeJlatexmathTeXFormulaSettingsParser_initialize();
  for (jint i = 0; i < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(mapList)) getLength]; i++) {
    id<OrgScilabForgeJlatexmathPlatformParserElement> map = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([mapList itemWithInt:i])) castToElement];
    NSString *ch = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(map)) getAttributeWithNSString:@"char"];
    NSString *symbol = [map getAttributeWithNSString:@"symbol"];
    NSString *text = [map getAttributeWithNSString:@"text"];
    if ([((NSString *) nil_chk(ch)) isEqual:@""]) {
      @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathTeXFormulaSettingsParser_RESOURCE_NAME_, [map getTagName], @"char", nil);
    }
    else if ([((NSString *) nil_chk(symbol)) isEqual:@""]) {
      @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathTeXFormulaSettingsParser_RESOURCE_NAME_, [map getTagName], @"symbol", nil);
    }
    if (((jint) [ch length]) == 1) {
      (void) IOSObjectArray_Set(nil_chk(tableMath), [ch charAtWithInt:0], symbol);
    }
    else {
      @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathTeXFormulaSettingsParser_RESOURCE_NAME_, [map getTagName], @"char", @"must have a value that contains exactly 1 character!");
    }
    if (tableText != nil && ![((NSString *) nil_chk(text)) isEqual:@""]) {
      (void) IOSObjectArray_Set(tableText, [ch charAtWithInt:0], text);
    }
  }
}

void OrgScilabForgeJlatexmathTeXFormulaSettingsParser_addFormulaToMapWithOrgScilabForgeJlatexmathPlatformParserNodeList_withNSStringArray_withNSStringArray_(id<OrgScilabForgeJlatexmathPlatformParserNodeList> mapList, IOSObjectArray *tableMath, IOSObjectArray *tableText) {
  OrgScilabForgeJlatexmathTeXFormulaSettingsParser_initialize();
  for (jint i = 0; i < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(mapList)) getLength]; i++) {
    id<OrgScilabForgeJlatexmathPlatformParserElement> map = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([mapList itemWithInt:i])) castToElement];
    NSString *ch = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(map)) getAttributeWithNSString:@"char"];
    NSString *formula = [map getAttributeWithNSString:@"formula"];
    NSString *text = [map getAttributeWithNSString:@"text"];
    if ([((NSString *) nil_chk(ch)) isEqual:@""]) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathTeXFormulaSettingsParser_RESOURCE_NAME_, [map getTagName], @"char", nil);
    else if ([((NSString *) nil_chk(formula)) isEqual:@""]) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathTeXFormulaSettingsParser_RESOURCE_NAME_, [map getTagName], @"formula", nil);
    if (((jint) [ch length]) == 1) {
      (void) IOSObjectArray_Set(nil_chk(tableMath), [ch charAtWithInt:0], formula);
    }
    else @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathTeXFormulaSettingsParser_RESOURCE_NAME_, [map getTagName], @"char", @"must have a value that contains exactly 1 character!");
    if (tableText != nil && ![((NSString *) nil_chk(text)) isEqual:@""]) {
      (void) IOSObjectArray_Set(tableText, [ch charAtWithInt:0], text);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathTeXFormulaSettingsParser)
