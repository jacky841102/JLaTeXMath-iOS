//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/platform/ParserAdapter.java
//


#include "Document.h"
#include "Element.h"
#include "FactoryProvider.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Parser.h"
#include "ParserAdapter.h"
#include "ParserFactory.h"
#include "ResourceParseException.h"

@interface OrgScilabForgeJlatexmathPlatformParserAdapter () {
 @public
  OrgScilabForgeJlatexmathPlatformParserParserFactory *parserFactory_;
}

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathPlatformParserAdapter, parserFactory_, OrgScilabForgeJlatexmathPlatformParserParserFactory *)

@implementation OrgScilabForgeJlatexmathPlatformParserAdapter

- (instancetype)init {
  OrgScilabForgeJlatexmathPlatformParserAdapter_init(self);
  return self;
}

- (id<OrgScilabForgeJlatexmathPlatformParserParser>)createParser {
  return [((OrgScilabForgeJlatexmathPlatformParserParserFactory *) nil_chk(parserFactory_)) createParser];
}

- (id<OrgScilabForgeJlatexmathPlatformParserElement>)createParserAndParseFileWithId:(id)file
                                                                        withBoolean:(jboolean)ignoreComments
                                                                        withBoolean:(jboolean)ignoreWhitespace {
  id<OrgScilabForgeJlatexmathPlatformParserParser> parser = [self createParser];
  [((id<OrgScilabForgeJlatexmathPlatformParserParser>) nil_chk(parser)) setIgnoringCommentsWithBoolean:ignoreComments];
  [parser setIgnoringElementContentWhitespaceWithBoolean:ignoreWhitespace];
  id<OrgScilabForgeJlatexmathPlatformParserDocument> document = [parser parseWithId:file];
  return [((id<OrgScilabForgeJlatexmathPlatformParserDocument>) nil_chk(document)) getDocumentElement];
}

- (id<OrgScilabForgeJlatexmathPlatformParserElement>)createParserAndParseFileWithId:(id)file {
  id<OrgScilabForgeJlatexmathPlatformParserParser> parser = [self createParser];
  id<OrgScilabForgeJlatexmathPlatformParserDocument> document = [((id<OrgScilabForgeJlatexmathPlatformParserParser>) nil_chk(parser)) parseWithId:file];
  return [((id<OrgScilabForgeJlatexmathPlatformParserDocument>) nil_chk(document)) getDocumentElement];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ParserAdapter", NULL, 0x1, NULL, NULL },
    { "createParser", NULL, "Lorg.scilab.forge.jlatexmath.platform.parser.Parser;", 0x1, NULL, NULL },
    { "createParserAndParseFileWithId:withBoolean:withBoolean:", "createParserAndParseFile", "Lorg.scilab.forge.jlatexmath.platform.parser.Element;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "createParserAndParseFileWithId:", "createParserAndParseFile", "Lorg.scilab.forge.jlatexmath.platform.parser.Element;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parserFactory_", NULL, 0x12, "Lorg.scilab.forge.jlatexmath.platform.parser.ParserFactory;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathPlatformParserAdapter = { 2, "ParserAdapter", "org.scilab.forge.jlatexmath.platform", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathPlatformParserAdapter;
}

@end

void OrgScilabForgeJlatexmathPlatformParserAdapter_init(OrgScilabForgeJlatexmathPlatformParserAdapter *self) {
  (void) NSObject_init(self);
  self->parserFactory_ = [((OrgScilabForgeJlatexmathPlatformFactoryProvider *) nil_chk(OrgScilabForgeJlatexmathPlatformFactoryProvider_get_INSTANCE_())) getParserFactory];
}

OrgScilabForgeJlatexmathPlatformParserAdapter *new_OrgScilabForgeJlatexmathPlatformParserAdapter_init() {
  OrgScilabForgeJlatexmathPlatformParserAdapter *self = [OrgScilabForgeJlatexmathPlatformParserAdapter alloc];
  OrgScilabForgeJlatexmathPlatformParserAdapter_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathPlatformParserAdapter)
