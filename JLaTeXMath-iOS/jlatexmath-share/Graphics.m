//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/platform/Graphics.java
//


#include "BasicStroke.h"
#include "Color.h"
#include "FactoryProvider.h"
#include "Graphics.h"
#include "GraphicsFactory.h"
#include "Image.h"
#include "J2ObjC_source.h"
#include "Transform.h"
#include "java/lang/Math.h"

@interface OrgScilabForgeJlatexmathPlatformGraphics () {
 @public
  OrgScilabForgeJlatexmathPlatformGraphicsGraphicsFactory *graphicsFactory_;
}

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathPlatformGraphics, graphicsFactory_, OrgScilabForgeJlatexmathPlatformGraphicsGraphicsFactory *)

@implementation OrgScilabForgeJlatexmathPlatformGraphics

- (instancetype)init {
  OrgScilabForgeJlatexmathPlatformGraphics_init(self);
  return self;
}

- (id<OrgScilabForgeJlatexmathPlatformGraphicsColor>)createColorWithInt:(jint)r
                                                                withInt:(jint)g
                                                                withInt:(jint)b {
  return [((OrgScilabForgeJlatexmathPlatformGraphicsGraphicsFactory *) nil_chk(graphicsFactory_)) createColorWithInt:r withInt:g withInt:b];
}

- (id<OrgScilabForgeJlatexmathPlatformGraphicsColor>)createColorWithFloat:(jfloat)r
                                                                withFloat:(jfloat)g
                                                                withFloat:(jfloat)b {
  jint red = JavaLangMath_roundWithFloat_(r * 255);
  jint green = JavaLangMath_roundWithFloat_(g * 255);
  jint blue = JavaLangMath_roundWithFloat_(b * 255);
  return [self createColorWithInt:red withInt:green withInt:blue];
}

- (id<OrgScilabForgeJlatexmathPlatformGraphicsBasicStroke>)createBasicStrokeWithFloat:(jfloat)width
                                                                              withInt:(jint)cap
                                                                              withInt:(jint)join
                                                                            withFloat:(jfloat)miterLimit {
  return [((OrgScilabForgeJlatexmathPlatformGraphicsGraphicsFactory *) nil_chk(graphicsFactory_)) createBasicStrokeWithFloat:width withInt:cap withInt:join withFloat:miterLimit];
}

- (id<OrgScilabForgeJlatexmathPlatformGraphicsBasicStroke>)createBasicStrokeWithFloat:(jfloat)width
                                                                              withInt:(jint)cap
                                                                              withInt:(jint)join {
  return [self createBasicStrokeWithFloat:width withInt:cap withInt:join withFloat:10.0f];
}

- (id<OrgScilabForgeJlatexmathPlatformGraphicsImage>)createImageWithInt:(jint)width
                                                                withInt:(jint)height
                                                                withInt:(jint)type {
  return [((OrgScilabForgeJlatexmathPlatformGraphicsGraphicsFactory *) nil_chk(graphicsFactory_)) createImageWithInt:width withInt:height withInt:type];
}

- (id<OrgScilabForgeJlatexmathPlatformGraphicsImage>)createImageWithInt:(jint)width
                                                                withInt:(jint)height {
  return [self createImageWithInt:width withInt:height withInt:OrgScilabForgeJlatexmathPlatformGraphicsImage_TYPE_INT_RGB];
}

- (id<OrgScilabForgeJlatexmathPlatformGraphicsTransform>)createTransform {
  return [((OrgScilabForgeJlatexmathPlatformGraphicsGraphicsFactory *) nil_chk(graphicsFactory_)) createTransform];
}

- (id<OrgScilabForgeJlatexmathPlatformGraphicsImage>)loadImageWithNSString:(NSString *)path {
  return [((OrgScilabForgeJlatexmathPlatformGraphicsGraphicsFactory *) nil_chk(graphicsFactory_)) getImageWithNSString:path];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Graphics", NULL, 0x1, NULL, NULL },
    { "createColorWithInt:withInt:withInt:", "createColor", "Lorg.scilab.forge.jlatexmath.platform.graphics.Color;", 0x1, NULL, NULL },
    { "createColorWithFloat:withFloat:withFloat:", "createColor", "Lorg.scilab.forge.jlatexmath.platform.graphics.Color;", 0x1, NULL, NULL },
    { "createBasicStrokeWithFloat:withInt:withInt:withFloat:", "createBasicStroke", "Lorg.scilab.forge.jlatexmath.platform.graphics.BasicStroke;", 0x1, NULL, NULL },
    { "createBasicStrokeWithFloat:withInt:withInt:", "createBasicStroke", "Lorg.scilab.forge.jlatexmath.platform.graphics.BasicStroke;", 0x1, NULL, NULL },
    { "createImageWithInt:withInt:withInt:", "createImage", "Lorg.scilab.forge.jlatexmath.platform.graphics.Image;", 0x1, NULL, NULL },
    { "createImageWithInt:withInt:", "createImage", "Lorg.scilab.forge.jlatexmath.platform.graphics.Image;", 0x1, NULL, NULL },
    { "createTransform", NULL, "Lorg.scilab.forge.jlatexmath.platform.graphics.Transform;", 0x1, NULL, NULL },
    { "loadImageWithNSString:", "loadImage", "Lorg.scilab.forge.jlatexmath.platform.graphics.Image;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "graphicsFactory_", NULL, 0x12, "Lorg.scilab.forge.jlatexmath.platform.graphics.GraphicsFactory;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathPlatformGraphics = { 2, "Graphics", "org.scilab.forge.jlatexmath.platform", NULL, 0x1, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathPlatformGraphics;
}

@end

void OrgScilabForgeJlatexmathPlatformGraphics_init(OrgScilabForgeJlatexmathPlatformGraphics *self) {
  (void) NSObject_init(self);
  self->graphicsFactory_ = [((OrgScilabForgeJlatexmathPlatformFactoryProvider *) nil_chk(OrgScilabForgeJlatexmathPlatformFactoryProvider_get_INSTANCE_())) getGraphicsFactory];
}

OrgScilabForgeJlatexmathPlatformGraphics *new_OrgScilabForgeJlatexmathPlatformGraphics_init() {
  OrgScilabForgeJlatexmathPlatformGraphics *self = [OrgScilabForgeJlatexmathPlatformGraphics alloc];
  OrgScilabForgeJlatexmathPlatformGraphics_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathPlatformGraphics)
