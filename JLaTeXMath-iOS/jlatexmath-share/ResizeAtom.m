//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/ResizeAtom.java
//


#include "Atom.h"
#include "Box.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ResizeAtom.h"
#include "ScaleBox.h"
#include "SpaceAtom.h"
#include "TeXEnvironment.h"
#include "java/lang/Math.h"

@interface OrgScilabForgeJlatexmathResizeAtom () {
 @public
  OrgScilabForgeJlatexmathAtom *base_;
  jint wunit_, hunit_;
  jfloat w_, h_;
  jboolean keepaspectratio_;
}

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathResizeAtom, base_, OrgScilabForgeJlatexmathAtom *)

@implementation OrgScilabForgeJlatexmathResizeAtom

- (instancetype)initWithOrgScilabForgeJlatexmathAtom:(OrgScilabForgeJlatexmathAtom *)base
                                        withNSString:(NSString *)ws
                                        withNSString:(NSString *)hs
                                         withBoolean:(jboolean)keepaspectratio {
  OrgScilabForgeJlatexmathResizeAtom_initWithOrgScilabForgeJlatexmathAtom_withNSString_withNSString_withBoolean_(self, base, ws, hs, keepaspectratio);
  return self;
}

- (jint)getLeftType {
  return [((OrgScilabForgeJlatexmathAtom *) nil_chk(base_)) getLeftType];
}

- (jint)getRightType {
  return [((OrgScilabForgeJlatexmathAtom *) nil_chk(base_)) getRightType];
}

- (OrgScilabForgeJlatexmathBox *)createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)env {
  OrgScilabForgeJlatexmathBox *bbox = [((OrgScilabForgeJlatexmathAtom *) nil_chk(base_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
  if (wunit_ == -1 && hunit_ == -1) {
    return bbox;
  }
  else {
    jdouble xscl = 1;
    jdouble yscl = 1;
    if (wunit_ != -1 && hunit_ != -1) {
      xscl = w_ * OrgScilabForgeJlatexmathSpaceAtom_getFactorWithInt_withOrgScilabForgeJlatexmathTeXEnvironment_(wunit_, env) / ((OrgScilabForgeJlatexmathBox *) nil_chk(bbox))->width_;
      yscl = h_ * OrgScilabForgeJlatexmathSpaceAtom_getFactorWithInt_withOrgScilabForgeJlatexmathTeXEnvironment_(hunit_, env) / bbox->height_;
      if (keepaspectratio_) {
        xscl = JavaLangMath_minWithDouble_withDouble_(xscl, yscl);
        yscl = xscl;
      }
    }
    else if (wunit_ != -1 && hunit_ == -1) {
      xscl = w_ * OrgScilabForgeJlatexmathSpaceAtom_getFactorWithInt_withOrgScilabForgeJlatexmathTeXEnvironment_(wunit_, env) / ((OrgScilabForgeJlatexmathBox *) nil_chk(bbox))->width_;
      yscl = xscl;
    }
    else {
      yscl = h_ * OrgScilabForgeJlatexmathSpaceAtom_getFactorWithInt_withOrgScilabForgeJlatexmathTeXEnvironment_(hunit_, env) / ((OrgScilabForgeJlatexmathBox *) nil_chk(bbox))->height_;
      xscl = yscl;
    }
    return new_OrgScilabForgeJlatexmathScaleBox_initWithOrgScilabForgeJlatexmathBox_withDouble_withDouble_(bbox, xscl, yscl);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgScilabForgeJlatexmathAtom:withNSString:withNSString:withBoolean:", "ResizeAtom", NULL, 0x1, NULL, NULL },
    { "getLeftType", NULL, "I", 0x1, NULL, NULL },
    { "getRightType", NULL, "I", 0x1, NULL, NULL },
    { "createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:", "createBox", "Lorg.scilab.forge.jlatexmath.Box;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "base_", NULL, 0x2, "Lorg.scilab.forge.jlatexmath.Atom;", NULL, NULL,  },
    { "wunit_", NULL, 0x2, "I", NULL, NULL,  },
    { "hunit_", NULL, 0x2, "I", NULL, NULL,  },
    { "w_", NULL, 0x2, "F", NULL, NULL,  },
    { "h_", NULL, 0x2, "F", NULL, NULL,  },
    { "keepaspectratio_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathResizeAtom = { 2, "ResizeAtom", "org.scilab.forge.jlatexmath", NULL, 0x1, 4, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathResizeAtom;
}

@end

void OrgScilabForgeJlatexmathResizeAtom_initWithOrgScilabForgeJlatexmathAtom_withNSString_withNSString_withBoolean_(OrgScilabForgeJlatexmathResizeAtom *self, OrgScilabForgeJlatexmathAtom *base, NSString *ws, NSString *hs, jboolean keepaspectratio) {
  (void) OrgScilabForgeJlatexmathAtom_init(self);
  self->type_ = ((OrgScilabForgeJlatexmathAtom *) nil_chk(base))->type_;
  self->base_ = base;
  self->keepaspectratio_ = keepaspectratio;
  IOSFloatArray *w = OrgScilabForgeJlatexmathSpaceAtom_getLengthWithNSString_(ws == nil ? @"" : ws);
  IOSFloatArray *h = OrgScilabForgeJlatexmathSpaceAtom_getLengthWithNSString_(hs == nil ? @"" : hs);
  if (((IOSFloatArray *) nil_chk(w))->size_ != 2) {
    self->wunit_ = -1;
  }
  else {
    self->wunit_ = J2ObjCFpToInt(IOSFloatArray_Get(w, 0));
    self->w_ = IOSFloatArray_Get(w, 1);
  }
  if (((IOSFloatArray *) nil_chk(h))->size_ != 2) {
    self->hunit_ = -1;
  }
  else {
    self->hunit_ = J2ObjCFpToInt(IOSFloatArray_Get(h, 0));
    self->h_ = IOSFloatArray_Get(h, 1);
  }
}

OrgScilabForgeJlatexmathResizeAtom *new_OrgScilabForgeJlatexmathResizeAtom_initWithOrgScilabForgeJlatexmathAtom_withNSString_withNSString_withBoolean_(OrgScilabForgeJlatexmathAtom *base, NSString *ws, NSString *hs, jboolean keepaspectratio) {
  OrgScilabForgeJlatexmathResizeAtom *self = [OrgScilabForgeJlatexmathResizeAtom alloc];
  OrgScilabForgeJlatexmathResizeAtom_initWithOrgScilabForgeJlatexmathAtom_withNSString_withNSString_withBoolean_(self, base, ws, hs, keepaspectratio);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathResizeAtom)
