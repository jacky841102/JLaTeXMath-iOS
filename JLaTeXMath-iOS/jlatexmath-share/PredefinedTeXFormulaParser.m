//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/PredefinedTeXFormulaParser.java
//


#include "Element.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MacroInfo.h"
#include "Node.h"
#include "NodeList.h"
#include "ParserAdapter.h"
#include "PredefinedTeXFormulaParser.h"
#include "Resource.h"
#include "ResourceParseException.h"
#include "TeXFormula.h"
#include "TeXFormulaParser.h"
#include "XMLResourceParseException.h"
#include "java/lang/Exception.h"
#include "java/util/Map.h"

@interface OrgScilabForgeJlatexmathPredefinedTeXFormulaParser () {
 @public
  id<OrgScilabForgeJlatexmathPlatformParserElement> root_;
  NSString *type_;
}

+ (NSString *)getAttrValueAndCheckIfNotNullWithNSString:(NSString *)attrName
      withOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)element;

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathPredefinedTeXFormulaParser, root_, id<OrgScilabForgeJlatexmathPlatformParserElement>)
J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathPredefinedTeXFormulaParser, type_, NSString *)

static NSString *OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_RESOURCE_DIR_ = @"";
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathPredefinedTeXFormulaParser, RESOURCE_DIR_, NSString *)

__attribute__((unused)) static NSString *OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(NSString *attrName, id<OrgScilabForgeJlatexmathPlatformParserElement> element);

NSString *OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_RESOURCE_NAME_ = @"PredefinedTeXFormulas.xml";

@implementation OrgScilabForgeJlatexmathPredefinedTeXFormulaParser

- (instancetype)initWithId:(id)file
              withNSString:(NSString *)type {
  OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_initWithId_withNSString_(self, file, type);
  return self;
}

- (instancetype)initWithNSString:(NSString *)PredefFile
                    withNSString:(NSString *)type {
  OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_initWithNSString_withNSString_(self, PredefFile, type);
  return self;
}

- (void)parseWithJavaUtilMap:(id<JavaUtilMap>)predefinedTeXFormulas {
  NSString *enabledAll = OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"enabled", root_);
  if ([@"true" isEqual:enabledAll]) {
    id<OrgScilabForgeJlatexmathPlatformParserNodeList> list = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(root_)) getElementsByTagNameWithNSString:self->type_];
    for (jint i = 0; i < [((id<OrgScilabForgeJlatexmathPlatformParserNodeList>) nil_chk(list)) getLength]; i++) {
      id<OrgScilabForgeJlatexmathPlatformParserElement> formula = [((id<OrgScilabForgeJlatexmathPlatformParserNode>) nil_chk([list itemWithInt:i])) castToElement];
      NSString *enabled = OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"enabled", formula);
      if ([@"true" isEqual:enabled]) {
        NSString *name = OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(@"name", formula);
        if ([@"TeXFormula" isEqual:self->type_]) (void) [((id<JavaUtilMap>) nil_chk(predefinedTeXFormulas)) putWithId:name withId:(OrgScilabForgeJlatexmathTeXFormula *) check_class_cast([new_OrgScilabForgeJlatexmathTeXFormulaParser_initWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withNSString_(name, formula, self->type_) parse], [OrgScilabForgeJlatexmathTeXFormula class])];
        else (void) [((id<JavaUtilMap>) nil_chk(predefinedTeXFormulas)) putWithId:name withId:(OrgScilabForgeJlatexmathMacroInfo *) check_class_cast([new_OrgScilabForgeJlatexmathTeXFormulaParser_initWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_withNSString_(name, formula, self->type_) parse], [OrgScilabForgeJlatexmathMacroInfo class])];
      }
    }
  }
}

+ (NSString *)getAttrValueAndCheckIfNotNullWithNSString:(NSString *)attrName
      withOrgScilabForgeJlatexmathPlatformParserElement:(id<OrgScilabForgeJlatexmathPlatformParserElement>)element {
  return OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(attrName, element);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withNSString:", "PredefinedTeXFormulaParser", NULL, 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "initWithNSString:withNSString:", "PredefinedTeXFormulaParser", NULL, 0x1, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "parseWithJavaUtilMap:", "parse", "V", 0x1, NULL, NULL },
    { "getAttrValueAndCheckIfNotNullWithNSString:withOrgScilabForgeJlatexmathPlatformParserElement:", "getAttrValueAndCheckIfNotNull", "Ljava.lang.String;", 0xa, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "RESOURCE_DIR_", NULL, 0x1a, "Ljava.lang.String;", &OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_RESOURCE_DIR_, NULL,  },
    { "RESOURCE_NAME_", NULL, 0x19, "Ljava.lang.String;", &OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_RESOURCE_NAME_, NULL,  },
    { "root_", NULL, 0x2, "Lorg.scilab.forge.jlatexmath.platform.parser.Element;", NULL, NULL,  },
    { "type_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathPredefinedTeXFormulaParser = { 2, "PredefinedTeXFormulaParser", "org.scilab.forge.jlatexmath", NULL, 0x1, 4, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathPredefinedTeXFormulaParser;
}

@end

void OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_initWithId_withNSString_(OrgScilabForgeJlatexmathPredefinedTeXFormulaParser *self, id file, NSString *type) {
  (void) NSObject_init(self);
  @try {
    self->type_ = type;
    self->root_ = [new_OrgScilabForgeJlatexmathPlatformParserAdapter_init() createParserAndParseFileWithId:file withBoolean:YES withBoolean:YES];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withJavaLangThrowable_(@"", e);
  }
}

OrgScilabForgeJlatexmathPredefinedTeXFormulaParser *new_OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_initWithId_withNSString_(id file, NSString *type) {
  OrgScilabForgeJlatexmathPredefinedTeXFormulaParser *self = [OrgScilabForgeJlatexmathPredefinedTeXFormulaParser alloc];
  OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_initWithId_withNSString_(self, file, type);
  return self;
}

void OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_initWithNSString_withNSString_(OrgScilabForgeJlatexmathPredefinedTeXFormulaParser *self, NSString *PredefFile, NSString *type) {
  (void) OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_initWithId_withNSString_(self, [new_OrgScilabForgeJlatexmathPlatformResource_init() loadResourceWithId:OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_class_() withNSString:PredefFile], type);
}

OrgScilabForgeJlatexmathPredefinedTeXFormulaParser *new_OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_initWithNSString_withNSString_(NSString *PredefFile, NSString *type) {
  OrgScilabForgeJlatexmathPredefinedTeXFormulaParser *self = [OrgScilabForgeJlatexmathPredefinedTeXFormulaParser alloc];
  OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_initWithNSString_withNSString_(self, PredefFile, type);
  return self;
}

NSString *OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_getAttrValueAndCheckIfNotNullWithNSString_withOrgScilabForgeJlatexmathPlatformParserElement_(NSString *attrName, id<OrgScilabForgeJlatexmathPlatformParserElement> element) {
  OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_initialize();
  NSString *attrValue = [((id<OrgScilabForgeJlatexmathPlatformParserElement>) nil_chk(element)) getAttributeWithNSString:attrName];
  if ([((NSString *) nil_chk(attrValue)) isEqual:@""]) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathPredefinedTeXFormulaParser_RESOURCE_NAME_, [element getTagName], attrName, nil);
  return attrValue;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathPredefinedTeXFormulaParser)
