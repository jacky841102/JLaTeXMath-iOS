//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/MulticolumnAtom.java
//


#include "Atom.h"
#include "Box.h"
#include "HorizontalBox.h"
#include "J2ObjC_source.h"
#include "MulticolumnAtom.h"
#include "TeXConstants.h"
#include "TeXEnvironment.h"

@interface OrgScilabForgeJlatexmathMulticolumnAtom ()

- (jint)parseAlignWithNSString:(NSString *)str;

@end

__attribute__((unused)) static jint OrgScilabForgeJlatexmathMulticolumnAtom_parseAlignWithNSString_(OrgScilabForgeJlatexmathMulticolumnAtom *self, NSString *str);

@implementation OrgScilabForgeJlatexmathMulticolumnAtom

- (instancetype)initWithInt:(jint)n
               withNSString:(NSString *)align
withOrgScilabForgeJlatexmathAtom:(OrgScilabForgeJlatexmathAtom *)cols {
  OrgScilabForgeJlatexmathMulticolumnAtom_initWithInt_withNSString_withOrgScilabForgeJlatexmathAtom_(self, n, align, cols);
  return self;
}

- (void)setWidthWithFloat:(jfloat)w {
  self->w_ = w;
}

- (jint)getSkipped {
  return n_;
}

- (jboolean)hasRightVline {
  return afterVlines_ != 0;
}

- (void)setRowColumnWithInt:(jint)i
                    withInt:(jint)j {
  self->row_ = i;
  self->col_ = j;
}

- (jint)getRow {
  return row_;
}

- (jint)getCol {
  return col_;
}

- (jint)parseAlignWithNSString:(NSString *)str {
  return OrgScilabForgeJlatexmathMulticolumnAtom_parseAlignWithNSString_(self, str);
}

- (OrgScilabForgeJlatexmathBox *)createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)env {
  OrgScilabForgeJlatexmathBox *b;
  if (w_ == 0) {
    b = [((OrgScilabForgeJlatexmathAtom *) nil_chk(cols_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
  }
  else {
    b = new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_withFloat_withInt_([((OrgScilabForgeJlatexmathAtom *) nil_chk(cols_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env], w_, align_);
  }
  ((OrgScilabForgeJlatexmathBox *) nil_chk(b))->type_ = OrgScilabForgeJlatexmathTeXConstants_TYPE_MULTICOLUMN;
  return b;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withNSString:withOrgScilabForgeJlatexmathAtom:", "MulticolumnAtom", NULL, 0x1, NULL, NULL },
    { "setWidthWithFloat:", "setWidth", "V", 0x1, NULL, NULL },
    { "getSkipped", NULL, "I", 0x1, NULL, NULL },
    { "hasRightVline", NULL, "Z", 0x1, NULL, NULL },
    { "setRowColumnWithInt:withInt:", "setRowColumn", "V", 0x1, NULL, NULL },
    { "getRow", NULL, "I", 0x1, NULL, NULL },
    { "getCol", NULL, "I", 0x1, NULL, NULL },
    { "parseAlignWithNSString:", "parseAlign", "I", 0x2, NULL, NULL },
    { "createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:", "createBox", "Lorg.scilab.forge.jlatexmath.Box;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x4, "I", NULL, NULL,  },
    { "align_", NULL, 0x4, "I", NULL, NULL,  },
    { "w_", NULL, 0x4, "F", NULL, NULL,  },
    { "cols_", NULL, 0x4, "Lorg.scilab.forge.jlatexmath.Atom;", NULL, NULL,  },
    { "beforeVlines_", NULL, 0x4, "I", NULL, NULL,  },
    { "afterVlines_", NULL, 0x4, "I", NULL, NULL,  },
    { "row_", NULL, 0x4, "I", NULL, NULL,  },
    { "col_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathMulticolumnAtom = { 2, "MulticolumnAtom", "org.scilab.forge.jlatexmath", NULL, 0x1, 9, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathMulticolumnAtom;
}

@end

void OrgScilabForgeJlatexmathMulticolumnAtom_initWithInt_withNSString_withOrgScilabForgeJlatexmathAtom_(OrgScilabForgeJlatexmathMulticolumnAtom *self, jint n, NSString *align, OrgScilabForgeJlatexmathAtom *cols) {
  (void) OrgScilabForgeJlatexmathAtom_init(self);
  self->w_ = 0;
  self->n_ = n >= 1 ? n : 1;
  self->cols_ = cols;
  self->align_ = OrgScilabForgeJlatexmathMulticolumnAtom_parseAlignWithNSString_(self, align);
}

OrgScilabForgeJlatexmathMulticolumnAtom *new_OrgScilabForgeJlatexmathMulticolumnAtom_initWithInt_withNSString_withOrgScilabForgeJlatexmathAtom_(jint n, NSString *align, OrgScilabForgeJlatexmathAtom *cols) {
  OrgScilabForgeJlatexmathMulticolumnAtom *self = [OrgScilabForgeJlatexmathMulticolumnAtom alloc];
  OrgScilabForgeJlatexmathMulticolumnAtom_initWithInt_withNSString_withOrgScilabForgeJlatexmathAtom_(self, n, align, cols);
  return self;
}

jint OrgScilabForgeJlatexmathMulticolumnAtom_parseAlignWithNSString_(OrgScilabForgeJlatexmathMulticolumnAtom *self, NSString *str) {
  jint pos = 0;
  jint len = ((jint) [((NSString *) nil_chk(str)) length]);
  jint align = OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER;
  jboolean first = YES;
  while (pos < len) {
    jchar c = [str charAtWithInt:pos];
    switch (c) {
      case 'l':
      align = OrgScilabForgeJlatexmathTeXConstants_ALIGN_LEFT;
      first = NO;
      break;
      case 'r':
      align = OrgScilabForgeJlatexmathTeXConstants_ALIGN_RIGHT;
      first = NO;
      break;
      case 'c':
      align = OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER;
      first = NO;
      break;
      case '|':
      if (first) {
        self->beforeVlines_ = 1;
      }
      else {
        self->afterVlines_ = 1;
      }
      while (++pos < len) {
        c = [str charAtWithInt:pos];
        if (c != '|') {
          pos--;
          break;
        }
        else {
          if (first) {
            self->beforeVlines_++;
          }
          else {
            self->afterVlines_++;
          }
        }
      }
    }
    pos++;
  }
  return align;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathMulticolumnAtom)
