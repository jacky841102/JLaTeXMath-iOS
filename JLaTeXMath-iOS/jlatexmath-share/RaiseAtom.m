//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/RaiseAtom.java
//


#include "Atom.h"
#include "Box.h"
#include "HorizontalBox.h"
#include "J2ObjC_source.h"
#include "RaiseAtom.h"
#include "SpaceAtom.h"
#include "TeXEnvironment.h"

@interface OrgScilabForgeJlatexmathRaiseAtom () {
 @public
  OrgScilabForgeJlatexmathAtom *base_;
  jint runit_, hunit_, dunit_;
  jfloat r_, h_, d_;
}

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathRaiseAtom, base_, OrgScilabForgeJlatexmathAtom *)

@implementation OrgScilabForgeJlatexmathRaiseAtom

- (instancetype)initWithOrgScilabForgeJlatexmathAtom:(OrgScilabForgeJlatexmathAtom *)base
                                             withInt:(jint)runit
                                           withFloat:(jfloat)r
                                             withInt:(jint)hunit
                                           withFloat:(jfloat)h
                                             withInt:(jint)dunit
                                           withFloat:(jfloat)d {
  OrgScilabForgeJlatexmathRaiseAtom_initWithOrgScilabForgeJlatexmathAtom_withInt_withFloat_withInt_withFloat_withInt_withFloat_(self, base, runit, r, hunit, h, dunit, d);
  return self;
}

- (jint)getLeftType {
  return [((OrgScilabForgeJlatexmathAtom *) nil_chk(base_)) getLeftType];
}

- (jint)getRightType {
  return [((OrgScilabForgeJlatexmathAtom *) nil_chk(base_)) getRightType];
}

- (OrgScilabForgeJlatexmathBox *)createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)env {
  OrgScilabForgeJlatexmathBox *bbox = [((OrgScilabForgeJlatexmathAtom *) nil_chk(base_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
  if (runit_ == -1) {
    [((OrgScilabForgeJlatexmathBox *) nil_chk(bbox)) setShiftWithFloat:0];
  }
  else {
    [((OrgScilabForgeJlatexmathBox *) nil_chk(bbox)) setShiftWithFloat:-r_ * OrgScilabForgeJlatexmathSpaceAtom_getFactorWithInt_withOrgScilabForgeJlatexmathTeXEnvironment_(runit_, env)];
  }
  if (hunit_ == -1) {
    return bbox;
  }
  OrgScilabForgeJlatexmathHorizontalBox *hbox = new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_(bbox);
  [hbox setHeightWithFloat:h_ * OrgScilabForgeJlatexmathSpaceAtom_getFactorWithInt_withOrgScilabForgeJlatexmathTeXEnvironment_(hunit_, env)];
  if (dunit_ == -1) {
    [hbox setDepthWithFloat:0];
  }
  else {
    [hbox setDepthWithFloat:d_ * OrgScilabForgeJlatexmathSpaceAtom_getFactorWithInt_withOrgScilabForgeJlatexmathTeXEnvironment_(dunit_, env)];
  }
  return hbox;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgScilabForgeJlatexmathAtom:withInt:withFloat:withInt:withFloat:withInt:withFloat:", "RaiseAtom", NULL, 0x1, NULL, NULL },
    { "getLeftType", NULL, "I", 0x1, NULL, NULL },
    { "getRightType", NULL, "I", 0x1, NULL, NULL },
    { "createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:", "createBox", "Lorg.scilab.forge.jlatexmath.Box;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "base_", NULL, 0x2, "Lorg.scilab.forge.jlatexmath.Atom;", NULL, NULL,  },
    { "runit_", NULL, 0x2, "I", NULL, NULL,  },
    { "hunit_", NULL, 0x2, "I", NULL, NULL,  },
    { "dunit_", NULL, 0x2, "I", NULL, NULL,  },
    { "r_", NULL, 0x2, "F", NULL, NULL,  },
    { "h_", NULL, 0x2, "F", NULL, NULL,  },
    { "d_", NULL, 0x2, "F", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathRaiseAtom = { 2, "RaiseAtom", "org.scilab.forge.jlatexmath", NULL, 0x1, 4, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathRaiseAtom;
}

@end

void OrgScilabForgeJlatexmathRaiseAtom_initWithOrgScilabForgeJlatexmathAtom_withInt_withFloat_withInt_withFloat_withInt_withFloat_(OrgScilabForgeJlatexmathRaiseAtom *self, OrgScilabForgeJlatexmathAtom *base, jint runit, jfloat r, jint hunit, jfloat h, jint dunit, jfloat d) {
  (void) OrgScilabForgeJlatexmathAtom_init(self);
  self->base_ = base;
  self->runit_ = runit;
  self->r_ = r;
  self->hunit_ = hunit;
  self->h_ = h;
  self->dunit_ = dunit;
  self->d_ = d;
}

OrgScilabForgeJlatexmathRaiseAtom *new_OrgScilabForgeJlatexmathRaiseAtom_initWithOrgScilabForgeJlatexmathAtom_withInt_withFloat_withInt_withFloat_withInt_withFloat_(OrgScilabForgeJlatexmathAtom *base, jint runit, jfloat r, jint hunit, jfloat h, jint dunit, jfloat d) {
  OrgScilabForgeJlatexmathRaiseAtom *self = [OrgScilabForgeJlatexmathRaiseAtom alloc];
  OrgScilabForgeJlatexmathRaiseAtom_initWithOrgScilabForgeJlatexmathAtom_withInt_withFloat_withInt_withFloat_withInt_withFloat_(self, base, runit, r, hunit, h, dunit, d);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathRaiseAtom)
