//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/ParseOption.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ParseOption.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@implementation OrgScilabForgeJlatexmathParseOption

+ (id<JavaUtilMap>)parseMapWithNSString:(NSString *)options {
  return OrgScilabForgeJlatexmathParseOption_parseMapWithNSString_(options);
}

- (instancetype)init {
  OrgScilabForgeJlatexmathParseOption_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "parseMapWithNSString:", "parseMap", "Ljava.util.Map;", 0x19, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathParseOption = { 2, "ParseOption", "org.scilab.forge.jlatexmath", NULL, 0x11, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathParseOption;
}

@end

id<JavaUtilMap> OrgScilabForgeJlatexmathParseOption_parseMapWithNSString_(NSString *options) {
  OrgScilabForgeJlatexmathParseOption_initialize();
  id<JavaUtilMap> map = new_JavaUtilHashMap_init();
  if (options == nil || ((jint) [options length]) == 0) {
    return map;
  }
  IOSObjectArray *tokens = [((NSString *) nil_chk(options)) split:@","];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(tokens))->size_; i++) {
    NSString *tok = [((NSString *) nil_chk(IOSObjectArray_Get(tokens, i))) trim];
    IOSObjectArray *optarg = [((NSString *) nil_chk(tok)) split:@"="];
    if (optarg != nil) {
      if (optarg->size_ == 2) {
        (void) [map putWithId:[((NSString *) nil_chk(IOSObjectArray_Get(optarg, 0))) trim] withId:[((NSString *) nil_chk(IOSObjectArray_Get(optarg, 1))) trim]];
      }
      else if (optarg->size_ == 1) {
        (void) [map putWithId:[((NSString *) nil_chk(IOSObjectArray_Get(optarg, 0))) trim] withId:nil];
      }
    }
  }
  return map;
}

void OrgScilabForgeJlatexmathParseOption_init(OrgScilabForgeJlatexmathParseOption *self) {
  (void) NSObject_init(self);
}

OrgScilabForgeJlatexmathParseOption *new_OrgScilabForgeJlatexmathParseOption_init() {
  OrgScilabForgeJlatexmathParseOption *self = [OrgScilabForgeJlatexmathParseOption alloc];
  OrgScilabForgeJlatexmathParseOption_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathParseOption)
