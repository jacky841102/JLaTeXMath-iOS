//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/Dummy.java
//


#include "Atom.h"
#include "Box.h"
#include "CharFont.h"
#include "CharSymbol.h"
#include "Dummy.h"
#include "FixedCharAtom.h"
#include "J2ObjC_source.h"
#include "Row.h"
#include "SpaceAtom.h"
#include "TeXEnvironment.h"
#include "TeXFont.h"

@interface OrgScilabForgeJlatexmathDummy () {
 @public
  OrgScilabForgeJlatexmathAtom *el_;
  jboolean textSymbol_;
  jint type_;
}

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathDummy, el_, OrgScilabForgeJlatexmathAtom *)

@implementation OrgScilabForgeJlatexmathDummy

- (instancetype)initWithOrgScilabForgeJlatexmathAtom:(OrgScilabForgeJlatexmathAtom *)a {
  OrgScilabForgeJlatexmathDummy_initWithOrgScilabForgeJlatexmathAtom_(self, a);
  return self;
}

- (void)setTypeWithInt:(jint)t {
  type_ = t;
}

- (jint)getType {
  return type_;
}

- (jint)getLeftType {
  return (type_ >= 0 ? type_ : [((OrgScilabForgeJlatexmathAtom *) nil_chk(el_)) getLeftType]);
}

- (jint)getRightType {
  return (type_ >= 0 ? type_ : [((OrgScilabForgeJlatexmathAtom *) nil_chk(el_)) getRightType]);
}

- (jboolean)isCharSymbol {
  return [el_ isKindOfClass:[OrgScilabForgeJlatexmathCharSymbol class]];
}

- (OrgScilabForgeJlatexmathCharFont *)getCharFontWithOrgScilabForgeJlatexmathTeXFont:(id<OrgScilabForgeJlatexmathTeXFont>)tf {
  return [((OrgScilabForgeJlatexmathCharSymbol *) nil_chk(((OrgScilabForgeJlatexmathCharSymbol *) check_class_cast(el_, [OrgScilabForgeJlatexmathCharSymbol class])))) getCharFontWithOrgScilabForgeJlatexmathTeXFont:tf];
}

- (void)changeAtomWithOrgScilabForgeJlatexmathFixedCharAtom:(OrgScilabForgeJlatexmathFixedCharAtom *)a {
  textSymbol_ = NO;
  type_ = -1;
  el_ = a;
}

- (OrgScilabForgeJlatexmathBox *)createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)rs {
  if (textSymbol_) [((OrgScilabForgeJlatexmathCharSymbol *) nil_chk(((OrgScilabForgeJlatexmathCharSymbol *) check_class_cast(el_, [OrgScilabForgeJlatexmathCharSymbol class])))) markAsTextSymbol];
  OrgScilabForgeJlatexmathBox *b = [((OrgScilabForgeJlatexmathAtom *) nil_chk(el_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:rs];
  if (textSymbol_) [((OrgScilabForgeJlatexmathCharSymbol *) check_class_cast(el_, [OrgScilabForgeJlatexmathCharSymbol class])) removeMark];
  return b;
}

- (void)markAsTextSymbol {
  textSymbol_ = YES;
}

- (jboolean)isKern {
  return [el_ isKindOfClass:[OrgScilabForgeJlatexmathSpaceAtom class]];
}

- (void)setPreviousAtomWithOrgScilabForgeJlatexmathDummy:(OrgScilabForgeJlatexmathDummy *)prev {
  if ([OrgScilabForgeJlatexmathRow_class_() isInstance:el_]) [((id<OrgScilabForgeJlatexmathRow>) nil_chk(((id<OrgScilabForgeJlatexmathRow>) check_protocol_cast(el_, @protocol(OrgScilabForgeJlatexmathRow))))) setPreviousAtomWithOrgScilabForgeJlatexmathDummy:prev];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgScilabForgeJlatexmathAtom:", "Dummy", NULL, 0x1, NULL, NULL },
    { "setTypeWithInt:", "setType", "V", 0x1, NULL, NULL },
    { "getType", NULL, "I", 0x1, NULL, NULL },
    { "getLeftType", NULL, "I", 0x1, NULL, NULL },
    { "getRightType", NULL, "I", 0x1, NULL, NULL },
    { "isCharSymbol", NULL, "Z", 0x1, NULL, NULL },
    { "getCharFontWithOrgScilabForgeJlatexmathTeXFont:", "getCharFont", "Lorg.scilab.forge.jlatexmath.CharFont;", 0x1, NULL, NULL },
    { "changeAtomWithOrgScilabForgeJlatexmathFixedCharAtom:", "changeAtom", "V", 0x1, NULL, NULL },
    { "createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:", "createBox", "Lorg.scilab.forge.jlatexmath.Box;", 0x1, NULL, NULL },
    { "markAsTextSymbol", NULL, "V", 0x1, NULL, NULL },
    { "isKern", NULL, "Z", 0x1, NULL, NULL },
    { "setPreviousAtomWithOrgScilabForgeJlatexmathDummy:", "setPreviousAtom", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "el_", NULL, 0x2, "Lorg.scilab.forge.jlatexmath.Atom;", NULL, NULL,  },
    { "textSymbol_", NULL, 0x2, "Z", NULL, NULL,  },
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathDummy = { 2, "Dummy", "org.scilab.forge.jlatexmath", NULL, 0x1, 12, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathDummy;
}

@end

void OrgScilabForgeJlatexmathDummy_initWithOrgScilabForgeJlatexmathAtom_(OrgScilabForgeJlatexmathDummy *self, OrgScilabForgeJlatexmathAtom *a) {
  (void) NSObject_init(self);
  self->textSymbol_ = NO;
  self->type_ = -1;
  self->el_ = a;
}

OrgScilabForgeJlatexmathDummy *new_OrgScilabForgeJlatexmathDummy_initWithOrgScilabForgeJlatexmathAtom_(OrgScilabForgeJlatexmathAtom *a) {
  OrgScilabForgeJlatexmathDummy *self = [OrgScilabForgeJlatexmathDummy alloc];
  OrgScilabForgeJlatexmathDummy_initWithOrgScilabForgeJlatexmathAtom_(self, a);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathDummy)
