//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/NewCommandMacro.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MacroInfo.h"
#include "NewCommandMacro.h"
#include "ParseException.h"
#include "RegexUtil.h"
#include "TeXParser.h"
#include "java/util/HashMap.h"

J2OBJC_INITIALIZED_DEFN(OrgScilabForgeJlatexmathNewCommandMacro)

JavaUtilHashMap *OrgScilabForgeJlatexmathNewCommandMacro_macrocode_;
JavaUtilHashMap *OrgScilabForgeJlatexmathNewCommandMacro_macroreplacement_;

@implementation OrgScilabForgeJlatexmathNewCommandMacro

- (instancetype)init {
  OrgScilabForgeJlatexmathNewCommandMacro_init(self);
  return self;
}

+ (void)addNewCommandWithNSString:(NSString *)name
                     withNSString:(NSString *)code
                          withInt:(jint)nbargs {
  OrgScilabForgeJlatexmathNewCommandMacro_addNewCommandWithNSString_withNSString_withInt_(name, code, nbargs);
}

+ (void)addNewCommandWithNSString:(NSString *)name
                     withNSString:(NSString *)code
                          withInt:(jint)nbargs
                     withNSString:(NSString *)def {
  OrgScilabForgeJlatexmathNewCommandMacro_addNewCommandWithNSString_withNSString_withInt_withNSString_(name, code, nbargs, def);
}

+ (jboolean)isMacroWithNSString:(NSString *)name {
  return OrgScilabForgeJlatexmathNewCommandMacro_isMacroWithNSString_(name);
}

+ (void)addReNewCommandWithNSString:(NSString *)name
                       withNSString:(NSString *)code
                            withInt:(jint)nbargs {
  OrgScilabForgeJlatexmathNewCommandMacro_addReNewCommandWithNSString_withNSString_withInt_(name, code, nbargs);
}

- (NSString *)executeMacroWithOrgScilabForgeJlatexmathTeXParser:(OrgScilabForgeJlatexmathTeXParser *)tp
                                              withNSStringArray:(IOSObjectArray *)args {
  NSString *code = [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathNewCommandMacro_macrocode_)) getWithId:IOSObjectArray_Get(nil_chk(args), 0)];
  NSString *rep;
  jint nbargs = args->size_ - 11;
  jint dec = 0;
  if (IOSObjectArray_Get(args, nbargs + 1) != nil) {
    dec = 1;
    rep = OrgScilabForgeJlatexmathRegexRegexUtil_quoteReplacementWithNSString_(IOSObjectArray_Get(args, nbargs + 1));
    code = [((NSString *) nil_chk(code)) replaceAll:@"#1" withReplacement:rep];
  }
  else if ([((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathNewCommandMacro_macroreplacement_)) getWithId:IOSObjectArray_Get(args, 0)] != nil) {
    dec = 1;
    rep = OrgScilabForgeJlatexmathRegexRegexUtil_quoteReplacementWithNSString_([OrgScilabForgeJlatexmathNewCommandMacro_macroreplacement_ getWithId:IOSObjectArray_Get(args, 0)]);
    code = [((NSString *) nil_chk(code)) replaceAll:@"#1" withReplacement:rep];
  }
  for (jint i = 1; i <= nbargs; i++) {
    rep = OrgScilabForgeJlatexmathRegexRegexUtil_quoteReplacementWithNSString_(IOSObjectArray_Get(args, i));
    code = [((NSString *) nil_chk(code)) replaceAll:JreStrcat("CI", '#', (i + dec)) withReplacement:rep];
  }
  return code;
}

+ (void)initialize {
  if (self == [OrgScilabForgeJlatexmathNewCommandMacro class]) {
    OrgScilabForgeJlatexmathNewCommandMacro_macrocode_ = new_JavaUtilHashMap_init();
    OrgScilabForgeJlatexmathNewCommandMacro_macroreplacement_ = new_JavaUtilHashMap_init();
    J2OBJC_SET_INITIALIZED(OrgScilabForgeJlatexmathNewCommandMacro)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "NewCommandMacro", NULL, 0x1, NULL, NULL },
    { "addNewCommandWithNSString:withNSString:withInt:", "addNewCommand", "V", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "addNewCommandWithNSString:withNSString:withInt:withNSString:", "addNewCommand", "V", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "isMacroWithNSString:", "isMacro", "Z", 0x9, NULL, NULL },
    { "addReNewCommandWithNSString:withNSString:withInt:", "addReNewCommand", "V", 0x9, NULL, NULL },
    { "executeMacroWithOrgScilabForgeJlatexmathTeXParser:withNSStringArray:", "executeMacro", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "macrocode_", NULL, 0xc, "Ljava.util.HashMap;", &OrgScilabForgeJlatexmathNewCommandMacro_macrocode_, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;",  },
    { "macroreplacement_", NULL, 0xc, "Ljava.util.HashMap;", &OrgScilabForgeJlatexmathNewCommandMacro_macroreplacement_, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;",  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathNewCommandMacro = { 2, "NewCommandMacro", "org.scilab.forge.jlatexmath", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathNewCommandMacro;
}

@end

void OrgScilabForgeJlatexmathNewCommandMacro_init(OrgScilabForgeJlatexmathNewCommandMacro *self) {
  (void) NSObject_init(self);
}

OrgScilabForgeJlatexmathNewCommandMacro *new_OrgScilabForgeJlatexmathNewCommandMacro_init() {
  OrgScilabForgeJlatexmathNewCommandMacro *self = [OrgScilabForgeJlatexmathNewCommandMacro alloc];
  OrgScilabForgeJlatexmathNewCommandMacro_init(self);
  return self;
}

void OrgScilabForgeJlatexmathNewCommandMacro_addNewCommandWithNSString_withNSString_withInt_(NSString *name, NSString *code, jint nbargs) {
  OrgScilabForgeJlatexmathNewCommandMacro_initialize();
  (void) [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathNewCommandMacro_macrocode_)) putWithId:name withId:code];
  (void) [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathMacroInfo_get_Commands_())) putWithId:name withId:new_OrgScilabForgeJlatexmathMacroInfo_initWithOrgScilabForgeJlatexmathMacro_withInt_(new_OrgScilabForgeJlatexmathNewCommandMacro_init(), nbargs)];
}

void OrgScilabForgeJlatexmathNewCommandMacro_addNewCommandWithNSString_withNSString_withInt_withNSString_(NSString *name, NSString *code, jint nbargs, NSString *def) {
  OrgScilabForgeJlatexmathNewCommandMacro_initialize();
  if ([((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathNewCommandMacro_macrocode_)) getWithId:name] != nil) @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(JreStrcat("$$$", @"Command ", name, @" already exists ! Use renewcommand instead ..."));
  (void) [OrgScilabForgeJlatexmathNewCommandMacro_macrocode_ putWithId:name withId:code];
  (void) [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathNewCommandMacro_macroreplacement_)) putWithId:name withId:def];
  (void) [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathMacroInfo_get_Commands_())) putWithId:name withId:new_OrgScilabForgeJlatexmathMacroInfo_initWithOrgScilabForgeJlatexmathMacro_withInt_withInt_(new_OrgScilabForgeJlatexmathNewCommandMacro_init(), nbargs, 1)];
}

jboolean OrgScilabForgeJlatexmathNewCommandMacro_isMacroWithNSString_(NSString *name) {
  OrgScilabForgeJlatexmathNewCommandMacro_initialize();
  return [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathNewCommandMacro_macrocode_)) containsKeyWithId:name];
}

void OrgScilabForgeJlatexmathNewCommandMacro_addReNewCommandWithNSString_withNSString_withInt_(NSString *name, NSString *code, jint nbargs) {
  OrgScilabForgeJlatexmathNewCommandMacro_initialize();
  if ([((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathNewCommandMacro_macrocode_)) getWithId:name] == nil) @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(JreStrcat("$$$", @"Command ", name, @" is not defined ! Use newcommand instead ..."));
  (void) [OrgScilabForgeJlatexmathNewCommandMacro_macrocode_ putWithId:name withId:code];
  (void) [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathMacroInfo_get_Commands_())) putWithId:name withId:new_OrgScilabForgeJlatexmathMacroInfo_initWithOrgScilabForgeJlatexmathMacro_withInt_(new_OrgScilabForgeJlatexmathNewCommandMacro_init(), nbargs)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathNewCommandMacro)
