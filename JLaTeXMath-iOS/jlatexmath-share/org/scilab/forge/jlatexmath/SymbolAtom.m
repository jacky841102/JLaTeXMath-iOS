//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/JLaTeXMath-iOS/JLaTeXMath-iOS/jlatexmath-share/org/scilab/forge/jlatexmath/SymbolAtom.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/util/Map.h"
#include "org/scilab/forge/jlatexmath/BitSet.h"
#include "org/scilab/forge/jlatexmath/Box.h"
#include "org/scilab/forge/jlatexmath/Char.h"
#include "org/scilab/forge/jlatexmath/CharBox.h"
#include "org/scilab/forge/jlatexmath/CharFont.h"
#include "org/scilab/forge/jlatexmath/CharSymbol.h"
#include "org/scilab/forge/jlatexmath/HorizontalBox.h"
#include "org/scilab/forge/jlatexmath/ScaleBox.h"
#include "org/scilab/forge/jlatexmath/StrutBox.h"
#include "org/scilab/forge/jlatexmath/SymbolAtom.h"
#include "org/scilab/forge/jlatexmath/TeXConstants.h"
#include "org/scilab/forge/jlatexmath/TeXEnvironment.h"
#include "org/scilab/forge/jlatexmath/TeXFont.h"
#include "org/scilab/forge/jlatexmath/TeXFormula.h"
#include "org/scilab/forge/jlatexmath/TeXSymbolParser.h"
#include "org/scilab/forge/jlatexmath/exception/InvalidSymbolTypeException.h"
#include "org/scilab/forge/jlatexmath/exception/SymbolMappingNotFoundException.h"
#include "org/scilab/forge/jlatexmath/exception/SymbolNotFoundException.h"
#include "org/scilab/forge/jlatexmath/platform/Resource.h"

@interface OrgScilabForgeJlatexmathSymbolAtom () {
 @public
  jboolean delimiter_;
  NSString *name_;
  jchar unicode_;
}

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathSymbolAtom, name_, NSString *)

static OrgScilabForgeJlatexmathBitSet *OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathSymbolAtom, validSymbolTypes_, OrgScilabForgeJlatexmathBitSet *)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathSymbolAtom, validSymbolTypes_, OrgScilabForgeJlatexmathBitSet *)

J2OBJC_INITIALIZED_DEFN(OrgScilabForgeJlatexmathSymbolAtom)

id<JavaUtilMap> OrgScilabForgeJlatexmathSymbolAtom_symbols_;

@implementation OrgScilabForgeJlatexmathSymbolAtom

- (instancetype)initWithOrgScilabForgeJlatexmathSymbolAtom:(OrgScilabForgeJlatexmathSymbolAtom *)s
                                                   withInt:(jint)type {
  OrgScilabForgeJlatexmathSymbolAtom_initWithOrgScilabForgeJlatexmathSymbolAtom_withInt_(self, s, type);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)type
                     withBoolean:(jboolean)del {
  OrgScilabForgeJlatexmathSymbolAtom_initWithNSString_withInt_withBoolean_(self, name, type, del);
  return self;
}

- (OrgScilabForgeJlatexmathSymbolAtom *)setUnicodeWithChar:(jchar)c {
  self->unicode_ = c;
  return self;
}

- (jchar)getUnicode {
  return unicode_;
}

+ (void)addSymbolAtomWithNSString:(NSString *)file {
  OrgScilabForgeJlatexmathSymbolAtom_addSymbolAtomWithNSString_(file);
}

+ (void)addSymbolAtomWithId:(id)inArg
               withNSString:(NSString *)name {
  OrgScilabForgeJlatexmathSymbolAtom_addSymbolAtomWithId_withNSString_(inArg, name);
}

+ (void)addSymbolAtomWithOrgScilabForgeJlatexmathSymbolAtom:(OrgScilabForgeJlatexmathSymbolAtom *)sym {
  OrgScilabForgeJlatexmathSymbolAtom_addSymbolAtomWithOrgScilabForgeJlatexmathSymbolAtom_(sym);
}

+ (OrgScilabForgeJlatexmathSymbolAtom *)getWithNSString:(NSString *)name {
  return OrgScilabForgeJlatexmathSymbolAtom_getWithNSString_(name);
}

- (jboolean)isDelimiter {
  return delimiter_;
}

- (NSString *)getName {
  return name_;
}

- (OrgScilabForgeJlatexmathBox *)createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)env {
  id<OrgScilabForgeJlatexmathTeXFont> tf = [((OrgScilabForgeJlatexmathTeXEnvironment *) nil_chk(env)) getTeXFont];
  jint style = [env getStyle];
  OrgScilabForgeJlatexmathChar *c = [((id<OrgScilabForgeJlatexmathTeXFont>) nil_chk(tf)) getCharWithNSString:name_ withInt:style];
  OrgScilabForgeJlatexmathBox *cb = [new_OrgScilabForgeJlatexmathCharBox_initWithOrgScilabForgeJlatexmathChar_(c) autorelease];
  if ([env getSmallCap] && unicode_ != 0 && JavaLangCharacter_isLowerCaseWithChar_(unicode_)) {
    @try {
      cb = [new_OrgScilabForgeJlatexmathScaleBox_initWithOrgScilabForgeJlatexmathBox_withDouble_withDouble_([new_OrgScilabForgeJlatexmathCharBox_initWithOrgScilabForgeJlatexmathChar_([tf getCharWithNSString:IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathTeXFormula_get_symbolTextMappings_()), JavaLangCharacter_toUpperCaseWithChar_(unicode_)) withInt:style]) autorelease], 0.8, 0.8) autorelease];
    }
    @catch (OrgScilabForgeJlatexmathExceptionSymbolMappingNotFoundException *e) {
    }
  }
  if (type_ == OrgScilabForgeJlatexmathTeXConstants_TYPE_BIG_OPERATOR) {
    if (style < OrgScilabForgeJlatexmathTeXConstants_STYLE_TEXT && [tf hasNextLargerWithOrgScilabForgeJlatexmathChar:c]) c = [tf getNextLargerWithOrgScilabForgeJlatexmathChar:c withInt:style];
    cb = [new_OrgScilabForgeJlatexmathCharBox_initWithOrgScilabForgeJlatexmathChar_(c) autorelease];
    [cb setShiftWithFloat:-([cb getHeight] + [cb getDepth]) / 2 - [((id<OrgScilabForgeJlatexmathTeXFont>) nil_chk([env getTeXFont])) getAxisHeightWithInt:[env getStyle]]];
    jfloat delta = [((OrgScilabForgeJlatexmathChar *) nil_chk(c)) getItalic];
    OrgScilabForgeJlatexmathHorizontalBox *hb = [new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_(cb) autorelease];
    if (delta > OrgScilabForgeJlatexmathTeXFormula_PREC) [hb addWithOrgScilabForgeJlatexmathBox:[new_OrgScilabForgeJlatexmathStrutBox_initWithFloat_withFloat_withFloat_withFloat_(delta, 0, 0, 0) autorelease]];
    return hb;
  }
  return cb;
}

- (OrgScilabForgeJlatexmathCharFont *)getCharFontWithOrgScilabForgeJlatexmathTeXFont:(id<OrgScilabForgeJlatexmathTeXFont>)tf {
  return [((OrgScilabForgeJlatexmathChar *) nil_chk([((id<OrgScilabForgeJlatexmathTeXFont>) nil_chk(tf)) getCharWithNSString:name_ withInt:OrgScilabForgeJlatexmathTeXConstants_STYLE_DISPLAY])) getCharFont];
}

- (void)dealloc {
  RELEASE_(name_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgScilabForgeJlatexmathSymbolAtom class]) {
    {
      JreStrongAssign(&OrgScilabForgeJlatexmathSymbolAtom_symbols_, nil, [((OrgScilabForgeJlatexmathTeXSymbolParser *) [new_OrgScilabForgeJlatexmathTeXSymbolParser_init() autorelease]) readSymbols]);
      JreStrongAssignAndConsume(&OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_, nil, new_OrgScilabForgeJlatexmathBitSet_init());
      [OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_ setBitWithInt:OrgScilabForgeJlatexmathTeXConstants_TYPE_ORDINARY];
      [OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_ setBitWithInt:OrgScilabForgeJlatexmathTeXConstants_TYPE_BIG_OPERATOR];
      [OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_ setBitWithInt:OrgScilabForgeJlatexmathTeXConstants_TYPE_BINARY_OPERATOR];
      [OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_ setBitWithInt:OrgScilabForgeJlatexmathTeXConstants_TYPE_RELATION];
      [OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_ setBitWithInt:OrgScilabForgeJlatexmathTeXConstants_TYPE_OPENING];
      [OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_ setBitWithInt:OrgScilabForgeJlatexmathTeXConstants_TYPE_CLOSING];
      [OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_ setBitWithInt:OrgScilabForgeJlatexmathTeXConstants_TYPE_PUNCTUATION];
      [OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_ setBitWithInt:OrgScilabForgeJlatexmathTeXConstants_TYPE_ACCENT];
    }
    J2OBJC_SET_INITIALIZED(OrgScilabForgeJlatexmathSymbolAtom)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgScilabForgeJlatexmathSymbolAtom:withInt:", "SymbolAtom", NULL, 0x1, "Lorg.scilab.forge.jlatexmath.exception.InvalidSymbolTypeException;", NULL },
    { "initWithNSString:withInt:withBoolean:", "SymbolAtom", NULL, 0x1, NULL, NULL },
    { "setUnicodeWithChar:", "setUnicode", "Lorg.scilab.forge.jlatexmath.SymbolAtom;", 0x1, NULL, NULL },
    { "getUnicode", NULL, "C", 0x1, NULL, NULL },
    { "addSymbolAtomWithNSString:", "addSymbolAtom", "V", 0x9, NULL, NULL },
    { "addSymbolAtomWithId:withNSString:", "addSymbolAtom", "V", 0x9, NULL, NULL },
    { "addSymbolAtomWithOrgScilabForgeJlatexmathSymbolAtom:", "addSymbolAtom", "V", 0x9, NULL, NULL },
    { "getWithNSString:", "get", "Lorg.scilab.forge.jlatexmath.SymbolAtom;", 0x9, "Lorg.scilab.forge.jlatexmath.exception.SymbolNotFoundException;", NULL },
    { "isDelimiter", NULL, "Z", 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:", "createBox", "Lorg.scilab.forge.jlatexmath.Box;", 0x1, NULL, NULL },
    { "getCharFontWithOrgScilabForgeJlatexmathTeXFont:", "getCharFont", "Lorg.scilab.forge.jlatexmath.CharFont;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "delimiter_", NULL, 0x12, "Z", NULL, NULL,  },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "symbols_", NULL, 0x9, "Ljava.util.Map;", &OrgScilabForgeJlatexmathSymbolAtom_symbols_, "Ljava/util/Map<Ljava/lang/String;Lorg/scilab/forge/jlatexmath/SymbolAtom;>;",  },
    { "validSymbolTypes_", NULL, 0xa, "Lorg.scilab.forge.jlatexmath.BitSet;", &OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_, NULL,  },
    { "unicode_", NULL, 0x2, "C", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathSymbolAtom = { 2, "SymbolAtom", "org.scilab.forge.jlatexmath", NULL, 0x1, 12, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathSymbolAtom;
}

@end

void OrgScilabForgeJlatexmathSymbolAtom_initWithOrgScilabForgeJlatexmathSymbolAtom_withInt_(OrgScilabForgeJlatexmathSymbolAtom *self, OrgScilabForgeJlatexmathSymbolAtom *s, jint type) {
  OrgScilabForgeJlatexmathCharSymbol_init(self);
  if (![((OrgScilabForgeJlatexmathBitSet *) nil_chk(OrgScilabForgeJlatexmathSymbolAtom_validSymbolTypes_)) getBitWithInt:type]) @throw [new_OrgScilabForgeJlatexmathExceptionInvalidSymbolTypeException_initWithNSString_(@"The symbol type was not valid! Use one of the symbol type constants from the class 'TeXConstants'.") autorelease];
  OrgScilabForgeJlatexmathSymbolAtom_set_name_(self, ((OrgScilabForgeJlatexmathSymbolAtom *) nil_chk(s))->name_);
  self->type_ = type;
  if (type == OrgScilabForgeJlatexmathTeXConstants_TYPE_BIG_OPERATOR) self->type_limits_ = OrgScilabForgeJlatexmathTeXConstants_SCRIPT_NORMAL;
  self->delimiter_ = s->delimiter_;
}

OrgScilabForgeJlatexmathSymbolAtom *new_OrgScilabForgeJlatexmathSymbolAtom_initWithOrgScilabForgeJlatexmathSymbolAtom_withInt_(OrgScilabForgeJlatexmathSymbolAtom *s, jint type) {
  OrgScilabForgeJlatexmathSymbolAtom *self = [OrgScilabForgeJlatexmathSymbolAtom alloc];
  OrgScilabForgeJlatexmathSymbolAtom_initWithOrgScilabForgeJlatexmathSymbolAtom_withInt_(self, s, type);
  return self;
}

void OrgScilabForgeJlatexmathSymbolAtom_initWithNSString_withInt_withBoolean_(OrgScilabForgeJlatexmathSymbolAtom *self, NSString *name, jint type, jboolean del) {
  OrgScilabForgeJlatexmathCharSymbol_init(self);
  OrgScilabForgeJlatexmathSymbolAtom_set_name_(self, name);
  self->type_ = type;
  if (type == OrgScilabForgeJlatexmathTeXConstants_TYPE_BIG_OPERATOR) self->type_limits_ = OrgScilabForgeJlatexmathTeXConstants_SCRIPT_NORMAL;
  self->delimiter_ = del;
}

OrgScilabForgeJlatexmathSymbolAtom *new_OrgScilabForgeJlatexmathSymbolAtom_initWithNSString_withInt_withBoolean_(NSString *name, jint type, jboolean del) {
  OrgScilabForgeJlatexmathSymbolAtom *self = [OrgScilabForgeJlatexmathSymbolAtom alloc];
  OrgScilabForgeJlatexmathSymbolAtom_initWithNSString_withInt_withBoolean_(self, name, type, del);
  return self;
}

void OrgScilabForgeJlatexmathSymbolAtom_addSymbolAtomWithNSString_(NSString *file) {
  OrgScilabForgeJlatexmathSymbolAtom_initialize();
  id in = [((OrgScilabForgeJlatexmathPlatformResource *) [new_OrgScilabForgeJlatexmathPlatformResource_init() autorelease]) loadResourceWithNSString:file];
  OrgScilabForgeJlatexmathSymbolAtom_addSymbolAtomWithId_withNSString_(in, file);
}

void OrgScilabForgeJlatexmathSymbolAtom_addSymbolAtomWithId_withNSString_(id inArg, NSString *name) {
  OrgScilabForgeJlatexmathSymbolAtom_initialize();
  OrgScilabForgeJlatexmathTeXSymbolParser *tsp = [new_OrgScilabForgeJlatexmathTeXSymbolParser_initWithId_withNSString_(inArg, name) autorelease];
  [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathSymbolAtom_symbols_)) putAllWithJavaUtilMap:[tsp readSymbols]];
}

void OrgScilabForgeJlatexmathSymbolAtom_addSymbolAtomWithOrgScilabForgeJlatexmathSymbolAtom_(OrgScilabForgeJlatexmathSymbolAtom *sym) {
  OrgScilabForgeJlatexmathSymbolAtom_initialize();
  [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathSymbolAtom_symbols_)) putWithId:((OrgScilabForgeJlatexmathSymbolAtom *) nil_chk(sym))->name_ withId:sym];
}

OrgScilabForgeJlatexmathSymbolAtom *OrgScilabForgeJlatexmathSymbolAtom_getWithNSString_(NSString *name) {
  OrgScilabForgeJlatexmathSymbolAtom_initialize();
  id obj = [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathSymbolAtom_symbols_)) getWithId:name];
  if (obj == nil) @throw [new_OrgScilabForgeJlatexmathExceptionSymbolNotFoundException_initWithNSString_(name) autorelease];
  else return (OrgScilabForgeJlatexmathSymbolAtom *) check_class_cast(obj, [OrgScilabForgeJlatexmathSymbolAtom class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathSymbolAtom)
