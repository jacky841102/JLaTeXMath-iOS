//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/JLaTeXMath-iOS/JLaTeXMath-iOS/jlatexmath-share/org/scilab/forge/jlatexmath/dynamic/DynamicAtom.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/scilab/forge/jlatexmath/Atom.h"
#include "org/scilab/forge/jlatexmath/Box.h"
#include "org/scilab/forge/jlatexmath/EmptyAtom.h"
#include "org/scilab/forge/jlatexmath/StrutBox.h"
#include "org/scilab/forge/jlatexmath/TeXEnvironment.h"
#include "org/scilab/forge/jlatexmath/TeXFormula.h"
#include "org/scilab/forge/jlatexmath/dynamic/DynamicAtom.h"
#include "org/scilab/forge/jlatexmath/dynamic/ExternalConverter.h"
#include "org/scilab/forge/jlatexmath/dynamic/ExternalConverterFactory.h"

@interface OrgScilabForgeJlatexmathDynamicDynamicAtom () {
 @public
  id<OrgScilabForgeJlatexmathDynamicExternalConverter> converter_;
  OrgScilabForgeJlatexmathTeXFormula *formula_;
  NSString *externalCode_;
  jboolean insert_;
  jboolean refreshed_;
}

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathDynamicDynamicAtom, converter_, id<OrgScilabForgeJlatexmathDynamicExternalConverter>)
J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathDynamicDynamicAtom, formula_, OrgScilabForgeJlatexmathTeXFormula *)
J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathDynamicDynamicAtom, externalCode_, NSString *)

static id<OrgScilabForgeJlatexmathDynamicExternalConverterFactory> OrgScilabForgeJlatexmathDynamicDynamicAtom_ecFactory_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDynamicDynamicAtom, ecFactory_, id<OrgScilabForgeJlatexmathDynamicExternalConverterFactory>)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathDynamicDynamicAtom, ecFactory_, id<OrgScilabForgeJlatexmathDynamicExternalConverterFactory>)

@implementation OrgScilabForgeJlatexmathDynamicDynamicAtom

- (instancetype)initWithNSString:(NSString *)externalCode
                    withNSString:(NSString *)option {
  OrgScilabForgeJlatexmathDynamicDynamicAtom_initWithNSString_withNSString_(self, externalCode, option);
  return self;
}

+ (jboolean)hasAnExternalConverterFactory {
  return OrgScilabForgeJlatexmathDynamicDynamicAtom_hasAnExternalConverterFactory();
}

+ (void)setExternalConverterFactoryWithOrgScilabForgeJlatexmathDynamicExternalConverterFactory:(id<OrgScilabForgeJlatexmathDynamicExternalConverterFactory>)factory {
  OrgScilabForgeJlatexmathDynamicDynamicAtom_setExternalConverterFactoryWithOrgScilabForgeJlatexmathDynamicExternalConverterFactory_(factory);
}

- (jboolean)getInsertMode {
  return insert_;
}

- (OrgScilabForgeJlatexmathAtom *)getAtom {
  if (!refreshed_) {
    [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) setLaTeXWithNSString:[((id<OrgScilabForgeJlatexmathDynamicExternalConverter>) nil_chk(converter_)) getLaTeXStringWithNSString:externalCode_]];
    refreshed_ = YES;
  }
  if (((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_))->root_ == nil) {
    return [new_OrgScilabForgeJlatexmathEmptyAtom_init() autorelease];
  }
  return formula_->root_;
}

- (OrgScilabForgeJlatexmathBox *)createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)env {
  if (converter_ != nil) {
    if (refreshed_) {
      refreshed_ = NO;
    }
    else {
      [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) setLaTeXWithNSString:[converter_ getLaTeXStringWithNSString:externalCode_]];
    }
    if (((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_))->root_ != nil) {
      return [formula_->root_ createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
    }
  }
  return [new_OrgScilabForgeJlatexmathStrutBox_initWithFloat_withFloat_withFloat_withFloat_(0, 0, 0, 0) autorelease];
}

- (void)dealloc {
  RELEASE_(converter_);
  RELEASE_(formula_);
  RELEASE_(externalCode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:", "DynamicAtom", NULL, 0x1, NULL, NULL },
    { "hasAnExternalConverterFactory", NULL, "Z", 0x9, NULL, NULL },
    { "setExternalConverterFactoryWithOrgScilabForgeJlatexmathDynamicExternalConverterFactory:", "setExternalConverterFactory", "V", 0x9, NULL, NULL },
    { "getInsertMode", NULL, "Z", 0x1, NULL, NULL },
    { "getAtom", NULL, "Lorg.scilab.forge.jlatexmath.Atom;", 0x1, NULL, NULL },
    { "createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:", "createBox", "Lorg.scilab.forge.jlatexmath.Box;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ecFactory_", NULL, 0xa, "Lorg.scilab.forge.jlatexmath.dynamic.ExternalConverterFactory;", &OrgScilabForgeJlatexmathDynamicDynamicAtom_ecFactory_, NULL,  },
    { "converter_", NULL, 0x2, "Lorg.scilab.forge.jlatexmath.dynamic.ExternalConverter;", NULL, NULL,  },
    { "formula_", NULL, 0x2, "Lorg.scilab.forge.jlatexmath.TeXFormula;", NULL, NULL,  },
    { "externalCode_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "insert_", NULL, 0x2, "Z", NULL, NULL,  },
    { "refreshed_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathDynamicDynamicAtom = { 2, "DynamicAtom", "org.scilab.forge.jlatexmath.dynamic", NULL, 0x1, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathDynamicDynamicAtom;
}

@end

void OrgScilabForgeJlatexmathDynamicDynamicAtom_initWithNSString_withNSString_(OrgScilabForgeJlatexmathDynamicDynamicAtom *self, NSString *externalCode, NSString *option) {
  OrgScilabForgeJlatexmathAtom_init(self);
  OrgScilabForgeJlatexmathDynamicDynamicAtom_setAndConsume_formula_(self, new_OrgScilabForgeJlatexmathTeXFormula_init());
  OrgScilabForgeJlatexmathDynamicDynamicAtom_set_externalCode_(self, externalCode);
  if (OrgScilabForgeJlatexmathDynamicDynamicAtom_ecFactory_ != nil) {
    OrgScilabForgeJlatexmathDynamicDynamicAtom_set_converter_(self, [OrgScilabForgeJlatexmathDynamicDynamicAtom_ecFactory_ getExternalConverter]);
  }
  if (option != nil && [option isEqual:@"i"]) {
    self->insert_ = YES;
  }
}

OrgScilabForgeJlatexmathDynamicDynamicAtom *new_OrgScilabForgeJlatexmathDynamicDynamicAtom_initWithNSString_withNSString_(NSString *externalCode, NSString *option) {
  OrgScilabForgeJlatexmathDynamicDynamicAtom *self = [OrgScilabForgeJlatexmathDynamicDynamicAtom alloc];
  OrgScilabForgeJlatexmathDynamicDynamicAtom_initWithNSString_withNSString_(self, externalCode, option);
  return self;
}

jboolean OrgScilabForgeJlatexmathDynamicDynamicAtom_hasAnExternalConverterFactory() {
  OrgScilabForgeJlatexmathDynamicDynamicAtom_initialize();
  return OrgScilabForgeJlatexmathDynamicDynamicAtom_ecFactory_ != nil;
}

void OrgScilabForgeJlatexmathDynamicDynamicAtom_setExternalConverterFactoryWithOrgScilabForgeJlatexmathDynamicExternalConverterFactory_(id<OrgScilabForgeJlatexmathDynamicExternalConverterFactory> factory) {
  OrgScilabForgeJlatexmathDynamicDynamicAtom_initialize();
  JreStrongAssign(&OrgScilabForgeJlatexmathDynamicDynamicAtom_ecFactory_, nil, factory);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathDynamicDynamicAtom)
