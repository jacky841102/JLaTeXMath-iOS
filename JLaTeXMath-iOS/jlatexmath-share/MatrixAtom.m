//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/MatrixAtom.java
//


#include "ArrayOfAtoms.h"
#include "Atom.h"
#include "Box.h"
#include "HlineAtom.h"
#include "HorizontalBox.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MatrixAtom.h"
#include "MulticolumnAtom.h"
#include "SpaceAtom.h"
#include "StrutBox.h"
#include "TeXConstants.h"
#include "TeXEnvironment.h"
#include "TeXFont.h"
#include "TeXFormula.h"
#include "TeXParser.h"
#include "VerticalBox.h"
#include "VlineAtom.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface OrgScilabForgeJlatexmathMatrixAtom () {
 @public
  OrgScilabForgeJlatexmathArrayOfAtoms *matrix_;
  IOSIntArray *position_;
  id<JavaUtilMap> vlines_;
  jboolean isAlign_;
  jboolean isAlignat_;
  jboolean isFl_;
  jint type_MatrixAtom_;
  jboolean isPartial_;
  jboolean spaceAround_;
}

- (void)parsePositionsWithJavaLangStringBuffer:(JavaLangStringBuffer *)opt;

- (OrgScilabForgeJlatexmathBox *)generateMulticolumnWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)env
                                                          withOrgScilabForgeJlatexmathBoxArray:(IOSObjectArray *)Hsep
                                                                                withFloatArray:(IOSFloatArray *)rowWidth
                                                                                       withInt:(jint)i
                                                                                       withInt:(jint)j;

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathMatrixAtom, matrix_, OrgScilabForgeJlatexmathArrayOfAtoms *)
J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathMatrixAtom, position_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathMatrixAtom, vlines_, id<JavaUtilMap>)

static OrgScilabForgeJlatexmathBox *OrgScilabForgeJlatexmathMatrixAtom_nullBox_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathMatrixAtom, nullBox_, OrgScilabForgeJlatexmathBox *)

static OrgScilabForgeJlatexmathSpaceAtom *OrgScilabForgeJlatexmathMatrixAtom_align_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathMatrixAtom, align_, OrgScilabForgeJlatexmathSpaceAtom *)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathMatrixAtom, align_, OrgScilabForgeJlatexmathSpaceAtom *)

__attribute__((unused)) static void OrgScilabForgeJlatexmathMatrixAtom_parsePositionsWithJavaLangStringBuffer_(OrgScilabForgeJlatexmathMatrixAtom *self, JavaLangStringBuffer *opt);

__attribute__((unused)) static OrgScilabForgeJlatexmathBox *OrgScilabForgeJlatexmathMatrixAtom_generateMulticolumnWithOrgScilabForgeJlatexmathTeXEnvironment_withOrgScilabForgeJlatexmathBoxArray_withFloatArray_withInt_withInt_(OrgScilabForgeJlatexmathMatrixAtom *self, OrgScilabForgeJlatexmathTeXEnvironment *env, IOSObjectArray *Hsep, IOSFloatArray *rowWidth, jint i, jint j);

J2OBJC_INITIALIZED_DEFN(OrgScilabForgeJlatexmathMatrixAtom)

OrgScilabForgeJlatexmathSpaceAtom *OrgScilabForgeJlatexmathMatrixAtom_hsep_;
OrgScilabForgeJlatexmathSpaceAtom *OrgScilabForgeJlatexmathMatrixAtom_semihsep_;
OrgScilabForgeJlatexmathSpaceAtom *OrgScilabForgeJlatexmathMatrixAtom_vsep_in_;
OrgScilabForgeJlatexmathSpaceAtom *OrgScilabForgeJlatexmathMatrixAtom_vsep_ext_top_;
OrgScilabForgeJlatexmathSpaceAtom *OrgScilabForgeJlatexmathMatrixAtom_vsep_ext_bot_;

@implementation OrgScilabForgeJlatexmathMatrixAtom

- (instancetype)initWithBoolean:(jboolean)isPartial
withOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)array
                   withNSString:(NSString *)options
                    withBoolean:(jboolean)spaceAround {
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_withBoolean_(self, isPartial, array, options, spaceAround);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isPartial
withOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)array
                   withNSString:(NSString *)options {
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_(self, isPartial, array, options);
  return self;
}

- (instancetype)initWithOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)array
                                                withNSString:(NSString *)options {
  OrgScilabForgeJlatexmathMatrixAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_(self, array, options);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isPartial
withOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)array
                        withInt:(jint)type {
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(self, isPartial, array, type);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isPartial
withOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)array
                        withInt:(jint)type
                    withBoolean:(jboolean)spaceAround {
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withBoolean_(self, isPartial, array, type, spaceAround);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isPartial
withOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)array
                        withInt:(jint)type
                        withInt:(jint)alignment {
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withInt_(self, isPartial, array, type, alignment);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isPartial
withOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)array
                        withInt:(jint)type
                        withInt:(jint)alignment
                    withBoolean:(jboolean)spaceAround {
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withInt_withBoolean_(self, isPartial, array, type, alignment, spaceAround);
  return self;
}

- (instancetype)initWithOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)array
                                                     withInt:(jint)type {
  OrgScilabForgeJlatexmathMatrixAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(self, array, type);
  return self;
}

- (void)parsePositionsWithJavaLangStringBuffer:(JavaLangStringBuffer *)opt {
  OrgScilabForgeJlatexmathMatrixAtom_parsePositionsWithJavaLangStringBuffer_(self, opt);
}

- (IOSObjectArray *)getColumnSepWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)env
                                                                 withFloat:(jfloat)width {
  jint row = ((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(matrix_))->row_;
  jint col = matrix_->col_;
  IOSObjectArray *arr = [IOSObjectArray newArrayWithLength:col + 1 type:OrgScilabForgeJlatexmathBox_class_()];
  OrgScilabForgeJlatexmathBox *Align, *AlignSep, *Hsep;
  jfloat h, w = [((OrgScilabForgeJlatexmathTeXEnvironment *) nil_chk(env)) getTextwidth];
  jint i;
  if (type_MatrixAtom_ == OrgScilabForgeJlatexmathMatrixAtom_ALIGNED || type_MatrixAtom_ == OrgScilabForgeJlatexmathMatrixAtom_ALIGNEDAT) {
    w = JavaLangFloat_POSITIVE_INFINITY;
  }
  {
    OrgScilabForgeJlatexmathBox *empty;
    switch (type_MatrixAtom_) {
      case OrgScilabForgeJlatexmathMatrixAtom_ARRAY:
      i = 1;
      if (IOSIntArray_Get(nil_chk(position_), 0) == OrgScilabForgeJlatexmathTeXConstants_ALIGN_NONE) {
        (void) IOSObjectArray_Set(arr, 1, new_OrgScilabForgeJlatexmathStrutBox_initWithFloat_withFloat_withFloat_withFloat_(0.0f, 0.0f, 0.0f, 0.0f));
        i = 2;
      }
      if (spaceAround_) {
        (void) IOSObjectArray_Set(arr, 0, [((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_semihsep_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env]);
      }
      else {
        (void) IOSObjectArray_Set(arr, 0, new_OrgScilabForgeJlatexmathStrutBox_initWithFloat_withFloat_withFloat_withFloat_(0.0f, 0.0f, 0.0f, 0.0f));
      }
      (void) IOSObjectArray_Set(arr, col, IOSObjectArray_Get(arr, 0));
      Hsep = [((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_hsep_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
      for (; i < col; i++) {
        if (IOSIntArray_Get(position_, i) == OrgScilabForgeJlatexmathTeXConstants_ALIGN_NONE) {
          (void) IOSObjectArray_Set(arr, i, new_OrgScilabForgeJlatexmathStrutBox_initWithFloat_withFloat_withFloat_withFloat_(0.0f, 0.0f, 0.0f, 0.0f));
          (void) IOSObjectArray_Set(arr, i + 1, IOSObjectArray_Get(arr, i));
          i++;
        }
        else {
          (void) IOSObjectArray_Set(arr, i, Hsep);
        }
      }
      return arr;
      case OrgScilabForgeJlatexmathMatrixAtom_MATRIX:
      case OrgScilabForgeJlatexmathMatrixAtom_SMALLMATRIX:
      (void) IOSObjectArray_Set(arr, 0, OrgScilabForgeJlatexmathMatrixAtom_nullBox_);
      (void) IOSObjectArray_Set(arr, col, IOSObjectArray_Get(arr, 0));
      Hsep = [((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_hsep_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
      for (i = 1; i < col; i++) {
        (void) IOSObjectArray_Set(arr, i, Hsep);
      }
      return arr;
      case OrgScilabForgeJlatexmathMatrixAtom_ALIGNED:
      case OrgScilabForgeJlatexmathMatrixAtom_ALIGN:
      Align = [((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_align_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
      if (w != JavaLangFloat_POSITIVE_INFINITY) {
        h = JavaLangMath_maxWithFloat_withFloat_((w - width - (col / 2) * [((OrgScilabForgeJlatexmathBox *) nil_chk(Align)) getWidth]) / (jfloat) JavaLangMath_floorWithDouble_((col + 3) / 2), 0);
        AlignSep = new_OrgScilabForgeJlatexmathStrutBox_initWithFloat_withFloat_withFloat_withFloat_(h, 0.0f, 0.0f, 0.0f);
      }
      else {
        AlignSep = [((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_hsep_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
      }
      (void) IOSObjectArray_Set(arr, col, AlignSep);
      for (i = 0; i < col; i++) {
        if (i % 2 == 0) {
          (void) IOSObjectArray_Set(arr, i, AlignSep);
        }
        else {
          (void) IOSObjectArray_Set(arr, i, Align);
        }
      }
      break;
      case OrgScilabForgeJlatexmathMatrixAtom_ALIGNEDAT:
      case OrgScilabForgeJlatexmathMatrixAtom_ALIGNAT:
      if (w != JavaLangFloat_POSITIVE_INFINITY) {
        h = JavaLangMath_maxWithFloat_withFloat_((w - width) / 2, 0);
      }
      else {
        h = 0;
      }
      Align = [((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_align_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
      empty = OrgScilabForgeJlatexmathMatrixAtom_nullBox_;
      (void) IOSObjectArray_Set(arr, 0, new_OrgScilabForgeJlatexmathStrutBox_initWithFloat_withFloat_withFloat_withFloat_(h, 0.0f, 0.0f, 0.0f));
      (void) IOSObjectArray_Set(arr, col, IOSObjectArray_Get(arr, 0));
      for (i = 1; i < col; i++) {
        if (i % 2 == 0) {
          (void) IOSObjectArray_Set(arr, i, empty);
        }
        else {
          (void) IOSObjectArray_Set(arr, i, Align);
        }
      }
      break;
      case OrgScilabForgeJlatexmathMatrixAtom_FLALIGN:
      Align = [((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_align_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
      if (w != JavaLangFloat_POSITIVE_INFINITY) {
        h = JavaLangMath_maxWithFloat_withFloat_((w - width - (col / 2) * [((OrgScilabForgeJlatexmathBox *) nil_chk(Align)) getWidth]) / (jfloat) JavaLangMath_floorWithDouble_((col - 1) / 2), 0);
        AlignSep = new_OrgScilabForgeJlatexmathStrutBox_initWithFloat_withFloat_withFloat_withFloat_(h, 0.0f, 0.0f, 0.0f);
      }
      else {
        AlignSep = [((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_hsep_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
      }
      (void) IOSObjectArray_Set(arr, 0, OrgScilabForgeJlatexmathMatrixAtom_nullBox_);
      (void) IOSObjectArray_Set(arr, col, IOSObjectArray_Get(arr, 0));
      for (i = 1; i < col; i++) {
        if (i % 2 == 0) {
          (void) IOSObjectArray_Set(arr, i, AlignSep);
        }
        else {
          (void) IOSObjectArray_Set(arr, i, Align);
        }
      }
      break;
    }
  }
  if (w == JavaLangFloat_POSITIVE_INFINITY) {
    (void) IOSObjectArray_Set(arr, 0, OrgScilabForgeJlatexmathMatrixAtom_nullBox_);
    (void) IOSObjectArray_Set(arr, col, IOSObjectArray_Get(arr, 0));
  }
  return arr;
}

- (OrgScilabForgeJlatexmathBox *)createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)env {
  jint row = ((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(matrix_))->row_;
  jint col = matrix_->col_;
  IOSObjectArray *boxarr = [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ row, col } type:OrgScilabForgeJlatexmathBox_class_()];
  IOSFloatArray *lineDepth = [IOSFloatArray newArrayWithLength:row];
  IOSFloatArray *lineHeight = [IOSFloatArray newArrayWithLength:row];
  IOSFloatArray *rowWidth = [IOSFloatArray newArrayWithLength:col];
  jfloat matW = 0;
  jfloat drt = [((id<OrgScilabForgeJlatexmathTeXFont>) nil_chk([((OrgScilabForgeJlatexmathTeXEnvironment *) nil_chk(env)) getTeXFont])) getDefaultRuleThicknessWithInt:[env getStyle]];
  if (type_MatrixAtom_ == OrgScilabForgeJlatexmathMatrixAtom_SMALLMATRIX) {
    env = [env copy__];
    [((OrgScilabForgeJlatexmathTeXEnvironment *) nil_chk(env)) setStyleWithInt:OrgScilabForgeJlatexmathTeXConstants_STYLE_SCRIPT];
  }
  id<JavaUtilList> listMulti = new_JavaUtilArrayList_init();
  for (jint i = 0; i < row; i++) {
    *IOSFloatArray_GetRef(lineDepth, i) = 0;
    *IOSFloatArray_GetRef(lineHeight, i) = 0;
    for (jint j = 0; j < col; j++) {
      OrgScilabForgeJlatexmathAtom *at = nil;
      @try {
        at = [((JavaUtilLinkedList *) nil_chk([((JavaUtilLinkedList *) nil_chk(matrix_->array_)) getWithInt:i])) getWithInt:j];
      }
      @catch (JavaLangException *e) {
        ((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, i)), j - 1)))->type_ = OrgScilabForgeJlatexmathTeXConstants_TYPE_INTERTEXT;
        j = col - 1;
      }
      (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(boxarr, i)), j, (at == nil) ? OrgScilabForgeJlatexmathMatrixAtom_nullBox_ : [at createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env]);
      *IOSFloatArray_GetRef(lineDepth, i) = JavaLangMath_maxWithFloat_withFloat_([((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, i)), j))) getDepth], IOSFloatArray_Get(lineDepth, i));
      *IOSFloatArray_GetRef(lineHeight, i) = JavaLangMath_maxWithFloat_withFloat_([((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, i)), j))) getHeight], IOSFloatArray_Get(lineHeight, i));
      if (((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, i)), j)))->type_ != OrgScilabForgeJlatexmathTeXConstants_TYPE_MULTICOLUMN) {
        *IOSFloatArray_GetRef(rowWidth, j) = JavaLangMath_maxWithFloat_withFloat_([((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, i)), j))) getWidth], IOSFloatArray_Get(rowWidth, j));
      }
      else {
        [((OrgScilabForgeJlatexmathMulticolumnAtom *) nil_chk(((OrgScilabForgeJlatexmathMulticolumnAtom *) check_class_cast(at, [OrgScilabForgeJlatexmathMulticolumnAtom class])))) setRowColumnWithInt:i withInt:j];
        [listMulti addWithId:(OrgScilabForgeJlatexmathMulticolumnAtom *) check_class_cast(at, [OrgScilabForgeJlatexmathMulticolumnAtom class])];
      }
    }
  }
  for (jint i = 0; i < [listMulti size]; i++) {
    OrgScilabForgeJlatexmathMulticolumnAtom *multi = [listMulti getWithInt:i];
    jint c = [((OrgScilabForgeJlatexmathMulticolumnAtom *) nil_chk(multi)) getCol];
    jint r = [multi getRow];
    jint n = [multi getSkipped];
    jfloat w = 0;
    for (jint j = c; j < c + n; j++) {
      w += IOSFloatArray_Get(rowWidth, j);
    }
    if ([((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, r)), c))) getWidth] > w) {
      jfloat extraW = ([((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, r)), c))) getWidth] - w) / n;
      for (jint j = c; j < c + n; j++) {
        *IOSFloatArray_GetRef(rowWidth, j) += extraW;
      }
    }
  }
  for (jint j = 0; j < col; j++) {
    matW += IOSFloatArray_Get(rowWidth, j);
  }
  IOSObjectArray *Hsep = [self getColumnSepWithOrgScilabForgeJlatexmathTeXEnvironment:env withFloat:matW];
  for (jint j = 0; j < col + 1; j++) {
    matW += [((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(Hsep), j))) getWidth];
    if ([((id<JavaUtilMap>) nil_chk(vlines_)) getWithId:JavaLangInteger_valueOfWithInt_(j)] != nil) {
      matW += [((OrgScilabForgeJlatexmathVlineAtom *) nil_chk([vlines_ getWithId:JavaLangInteger_valueOfWithInt_(j)])) getWidthWithOrgScilabForgeJlatexmathTeXEnvironment:env];
    }
  }
  OrgScilabForgeJlatexmathVerticalBox *vb = new_OrgScilabForgeJlatexmathVerticalBox_init();
  OrgScilabForgeJlatexmathBox *Vsep = [((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_vsep_in_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
  [vb addWithOrgScilabForgeJlatexmathBox:[((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_vsep_ext_top_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env]];
  jfloat vsepH = [((OrgScilabForgeJlatexmathBox *) nil_chk(Vsep)) getHeight];
  jfloat totalHeight = 0;
  for (jint i = 0; i < row; i++) {
    OrgScilabForgeJlatexmathHorizontalBox *hb = new_OrgScilabForgeJlatexmathHorizontalBox_init();
    for (jint j = 0; j < col; j++) {
      {
        jboolean lastVline;
        jfloat f;
        OrgScilabForgeJlatexmathHlineAtom *at;
        switch (((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, i)), j)))->type_) {
          case -1:
          case OrgScilabForgeJlatexmathTeXConstants_TYPE_MULTICOLUMN:
          if (j == 0) {
            if ([((id<JavaUtilMap>) nil_chk(vlines_)) getWithId:JavaLangInteger_valueOfWithInt_(0)] != nil) {
              OrgScilabForgeJlatexmathVlineAtom *vat = [vlines_ getWithId:JavaLangInteger_valueOfWithInt_(0)];
              [((OrgScilabForgeJlatexmathVlineAtom *) nil_chk(vat)) setHeightWithFloat:IOSFloatArray_Get(lineHeight, i) + IOSFloatArray_Get(lineDepth, i) + [Vsep getHeight]];
              [vat setShiftWithFloat:IOSFloatArray_Get(lineDepth, i) + [Vsep getHeight] / 2];
              OrgScilabForgeJlatexmathBox *vatBox = [vat createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
              [hb addWithOrgScilabForgeJlatexmathBox:new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_withFloat_withInt_(vatBox, [((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(Hsep), 0))) getWidth] + [((OrgScilabForgeJlatexmathBox *) nil_chk(vatBox)) getWidth], OrgScilabForgeJlatexmathTeXConstants_ALIGN_LEFT)];
            }
            else {
              [hb addWithOrgScilabForgeJlatexmathBox:IOSObjectArray_Get(nil_chk(Hsep), 0)];
            }
          }
          lastVline = YES;
          if (((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, i)), j)))->type_ == -1) {
            [hb addWithOrgScilabForgeJlatexmathBox:new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_withFloat_withInt_(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, i)), j), IOSFloatArray_Get(rowWidth, j), IOSIntArray_Get(nil_chk(position_), j))];
          }
          else {
            OrgScilabForgeJlatexmathBox *b = OrgScilabForgeJlatexmathMatrixAtom_generateMulticolumnWithOrgScilabForgeJlatexmathTeXEnvironment_withOrgScilabForgeJlatexmathBoxArray_withFloatArray_withInt_withInt_(self, env, Hsep, rowWidth, i, j);
            OrgScilabForgeJlatexmathMulticolumnAtom *matom = (OrgScilabForgeJlatexmathMulticolumnAtom *) check_class_cast([((JavaUtilLinkedList *) nil_chk([((JavaUtilLinkedList *) nil_chk(matrix_->array_)) getWithInt:i])) getWithInt:j], [OrgScilabForgeJlatexmathMulticolumnAtom class]);
            j += [((OrgScilabForgeJlatexmathMulticolumnAtom *) nil_chk(matom)) getSkipped] - 1;
            [hb addWithOrgScilabForgeJlatexmathBox:b];
            lastVline = [matom hasRightVline];
          }
          if (lastVline && [((id<JavaUtilMap>) nil_chk(vlines_)) getWithId:JavaLangInteger_valueOfWithInt_(j + 1)] != nil) {
            OrgScilabForgeJlatexmathVlineAtom *vat = [vlines_ getWithId:JavaLangInteger_valueOfWithInt_(j + 1)];
            [((OrgScilabForgeJlatexmathVlineAtom *) nil_chk(vat)) setHeightWithFloat:IOSFloatArray_Get(lineHeight, i) + IOSFloatArray_Get(lineDepth, i) + [Vsep getHeight]];
            [vat setShiftWithFloat:IOSFloatArray_Get(lineDepth, i) + [Vsep getHeight] / 2];
            OrgScilabForgeJlatexmathBox *vatBox = [vat createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
            if (j < col - 1) {
              [hb addWithOrgScilabForgeJlatexmathBox:new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_withFloat_withInt_(vatBox, [((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(Hsep), j + 1))) getWidth] + [((OrgScilabForgeJlatexmathBox *) nil_chk(vatBox)) getWidth], OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER)];
            }
            else {
              [hb addWithOrgScilabForgeJlatexmathBox:new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_withFloat_withInt_(vatBox, [((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(Hsep), j + 1))) getWidth] + [((OrgScilabForgeJlatexmathBox *) nil_chk(vatBox)) getWidth], OrgScilabForgeJlatexmathTeXConstants_ALIGN_RIGHT)];
            }
          }
          else {
            [hb addWithOrgScilabForgeJlatexmathBox:IOSObjectArray_Get(nil_chk(Hsep), j + 1)];
          }
          break;
          case OrgScilabForgeJlatexmathTeXConstants_TYPE_INTERTEXT:
          f = [((OrgScilabForgeJlatexmathTeXEnvironment *) nil_chk(env)) getTextwidth];
          f = f == JavaLangFloat_POSITIVE_INFINITY ? IOSFloatArray_Get(rowWidth, j) : f;
          hb = new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_withFloat_withInt_(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, i)), j), f, OrgScilabForgeJlatexmathTeXConstants_ALIGN_LEFT);
          j = col - 1;
          break;
          case OrgScilabForgeJlatexmathTeXConstants_TYPE_HLINE:
          at = (OrgScilabForgeJlatexmathHlineAtom *) check_class_cast([((JavaUtilLinkedList *) nil_chk([((JavaUtilLinkedList *) nil_chk(matrix_->array_)) getWithInt:i])) getWithInt:j], [OrgScilabForgeJlatexmathHlineAtom class]);
          [((OrgScilabForgeJlatexmathHlineAtom *) nil_chk(at)) setWidthWithFloat:matW];
          if (i >= 1 && [[((JavaUtilLinkedList *) nil_chk([matrix_->array_ getWithInt:i - 1])) getWithInt:j] isKindOfClass:[OrgScilabForgeJlatexmathHlineAtom class]]) {
            [hb addWithOrgScilabForgeJlatexmathBox:new_OrgScilabForgeJlatexmathStrutBox_initWithFloat_withFloat_withFloat_withFloat_(0, 2 * drt, 0, 0)];
            [at setShiftWithFloat:-[Vsep getHeight] / 2 + drt];
          }
          else {
            [at setShiftWithFloat:-[Vsep getHeight] / 2];
          }
          [hb addWithOrgScilabForgeJlatexmathBox:[at createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env]];
          j = col;
          break;
        }
      }
    }
    if (((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(boxarr, i)), 0)))->type_ != OrgScilabForgeJlatexmathTeXConstants_TYPE_HLINE) {
      [hb setHeightWithFloat:IOSFloatArray_Get(lineHeight, i)];
      [hb setDepthWithFloat:IOSFloatArray_Get(lineDepth, i)];
      [vb addWithOrgScilabForgeJlatexmathBox:hb];
      if (i < row - 1) [vb addWithOrgScilabForgeJlatexmathBox:Vsep];
    }
    else {
      [vb addWithOrgScilabForgeJlatexmathBox:hb];
    }
  }
  [vb addWithOrgScilabForgeJlatexmathBox:[((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMatrixAtom_vsep_ext_bot_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env]];
  totalHeight = [vb getHeight] + [vb getDepth];
  jfloat axis = [((id<OrgScilabForgeJlatexmathTeXFont>) nil_chk([((OrgScilabForgeJlatexmathTeXEnvironment *) nil_chk(env)) getTeXFont])) getAxisHeightWithInt:[env getStyle]];
  [vb setHeightWithFloat:totalHeight / 2 + axis];
  [vb setDepthWithFloat:totalHeight / 2 - axis];
  return vb;
}

- (OrgScilabForgeJlatexmathBox *)generateMulticolumnWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)env
                                                          withOrgScilabForgeJlatexmathBoxArray:(IOSObjectArray *)Hsep
                                                                                withFloatArray:(IOSFloatArray *)rowWidth
                                                                                       withInt:(jint)i
                                                                                       withInt:(jint)j {
  return OrgScilabForgeJlatexmathMatrixAtom_generateMulticolumnWithOrgScilabForgeJlatexmathTeXEnvironment_withOrgScilabForgeJlatexmathBoxArray_withFloatArray_withInt_withInt_(self, env, Hsep, rowWidth, i, j);
}

+ (void)initialize {
  if (self == [OrgScilabForgeJlatexmathMatrixAtom class]) {
    OrgScilabForgeJlatexmathMatrixAtom_hsep_ = new_OrgScilabForgeJlatexmathSpaceAtom_initWithInt_withFloat_withFloat_withFloat_(OrgScilabForgeJlatexmathTeXConstants_UNIT_EM, 1.0f, 0.0f, 0.0f);
    OrgScilabForgeJlatexmathMatrixAtom_semihsep_ = new_OrgScilabForgeJlatexmathSpaceAtom_initWithInt_withFloat_withFloat_withFloat_(OrgScilabForgeJlatexmathTeXConstants_UNIT_EM, 0.5f, 0.0f, 0.0f);
    OrgScilabForgeJlatexmathMatrixAtom_vsep_in_ = new_OrgScilabForgeJlatexmathSpaceAtom_initWithInt_withFloat_withFloat_withFloat_(OrgScilabForgeJlatexmathTeXConstants_UNIT_EX, 0.0f, 1.0f, 0.0f);
    OrgScilabForgeJlatexmathMatrixAtom_vsep_ext_top_ = new_OrgScilabForgeJlatexmathSpaceAtom_initWithInt_withFloat_withFloat_withFloat_(OrgScilabForgeJlatexmathTeXConstants_UNIT_EX, 0.0f, 0.4f, 0.0f);
    OrgScilabForgeJlatexmathMatrixAtom_vsep_ext_bot_ = new_OrgScilabForgeJlatexmathSpaceAtom_initWithInt_withFloat_withFloat_withFloat_(OrgScilabForgeJlatexmathTeXConstants_UNIT_EX, 0.0f, 0.4f, 0.0f);
    OrgScilabForgeJlatexmathMatrixAtom_nullBox_ = new_OrgScilabForgeJlatexmathStrutBox_initWithFloat_withFloat_withFloat_withFloat_(0, 0, 0, 0);
    OrgScilabForgeJlatexmathMatrixAtom_align_ = new_OrgScilabForgeJlatexmathSpaceAtom_initWithInt_(OrgScilabForgeJlatexmathTeXConstants_MEDMUSKIP);
    J2OBJC_SET_INITIALIZED(OrgScilabForgeJlatexmathMatrixAtom)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withOrgScilabForgeJlatexmathArrayOfAtoms:withNSString:withBoolean:", "MatrixAtom", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withOrgScilabForgeJlatexmathArrayOfAtoms:withNSString:", "MatrixAtom", NULL, 0x1, NULL, NULL },
    { "initWithOrgScilabForgeJlatexmathArrayOfAtoms:withNSString:", "MatrixAtom", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withOrgScilabForgeJlatexmathArrayOfAtoms:withInt:", "MatrixAtom", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withOrgScilabForgeJlatexmathArrayOfAtoms:withInt:withBoolean:", "MatrixAtom", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withOrgScilabForgeJlatexmathArrayOfAtoms:withInt:withInt:", "MatrixAtom", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withOrgScilabForgeJlatexmathArrayOfAtoms:withInt:withInt:withBoolean:", "MatrixAtom", NULL, 0x1, NULL, NULL },
    { "initWithOrgScilabForgeJlatexmathArrayOfAtoms:withInt:", "MatrixAtom", NULL, 0x1, NULL, NULL },
    { "parsePositionsWithJavaLangStringBuffer:", "parsePositions", "V", 0x2, NULL, NULL },
    { "getColumnSepWithOrgScilabForgeJlatexmathTeXEnvironment:withFloat:", "getColumnSep", "[Lorg.scilab.forge.jlatexmath.Box;", 0x1, NULL, NULL },
    { "createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:", "createBox", "Lorg.scilab.forge.jlatexmath.Box;", 0x1, NULL, NULL },
    { "generateMulticolumnWithOrgScilabForgeJlatexmathTeXEnvironment:withOrgScilabForgeJlatexmathBoxArray:withFloatArray:withInt:withInt:", "generateMulticolumn", "Lorg.scilab.forge.jlatexmath.Box;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hsep_", NULL, 0x9, "Lorg.scilab.forge.jlatexmath.SpaceAtom;", &OrgScilabForgeJlatexmathMatrixAtom_hsep_, NULL,  },
    { "semihsep_", NULL, 0x9, "Lorg.scilab.forge.jlatexmath.SpaceAtom;", &OrgScilabForgeJlatexmathMatrixAtom_semihsep_, NULL,  },
    { "vsep_in_", NULL, 0x9, "Lorg.scilab.forge.jlatexmath.SpaceAtom;", &OrgScilabForgeJlatexmathMatrixAtom_vsep_in_, NULL,  },
    { "vsep_ext_top_", NULL, 0x9, "Lorg.scilab.forge.jlatexmath.SpaceAtom;", &OrgScilabForgeJlatexmathMatrixAtom_vsep_ext_top_, NULL,  },
    { "vsep_ext_bot_", NULL, 0x9, "Lorg.scilab.forge.jlatexmath.SpaceAtom;", &OrgScilabForgeJlatexmathMatrixAtom_vsep_ext_bot_, NULL,  },
    { "ARRAY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMatrixAtom_ARRAY },
    { "MATRIX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMatrixAtom_MATRIX },
    { "ALIGN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMatrixAtom_ALIGN },
    { "ALIGNAT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMatrixAtom_ALIGNAT },
    { "FLALIGN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMatrixAtom_FLALIGN },
    { "SMALLMATRIX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMatrixAtom_SMALLMATRIX },
    { "ALIGNED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMatrixAtom_ALIGNED },
    { "ALIGNEDAT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMatrixAtom_ALIGNEDAT },
    { "nullBox_", NULL, 0x1a, "Lorg.scilab.forge.jlatexmath.Box;", &OrgScilabForgeJlatexmathMatrixAtom_nullBox_, NULL,  },
    { "matrix_", NULL, 0x2, "Lorg.scilab.forge.jlatexmath.ArrayOfAtoms;", NULL, NULL,  },
    { "position_", NULL, 0x2, "[I", NULL, NULL,  },
    { "vlines_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Integer;Lorg/scilab/forge/jlatexmath/VlineAtom;>;",  },
    { "isAlign_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isAlignat_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isFl_", NULL, 0x2, "Z", NULL, NULL,  },
    { "type_MatrixAtom_", "type", 0x2, "I", NULL, NULL,  },
    { "isPartial_", NULL, 0x2, "Z", NULL, NULL,  },
    { "spaceAround_", NULL, 0x2, "Z", NULL, NULL,  },
    { "align_", NULL, 0xa, "Lorg.scilab.forge.jlatexmath.SpaceAtom;", &OrgScilabForgeJlatexmathMatrixAtom_align_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathMatrixAtom = { 2, "MatrixAtom", "org.scilab.forge.jlatexmath", NULL, 0x1, 12, methods, 24, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathMatrixAtom;
}

@end

void OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_withBoolean_(OrgScilabForgeJlatexmathMatrixAtom *self, jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, NSString *options, jboolean spaceAround) {
  (void) OrgScilabForgeJlatexmathAtom_init(self);
  self->vlines_ = new_JavaUtilHashMap_init();
  self->isPartial_ = isPartial;
  self->matrix_ = array;
  self->type_MatrixAtom_ = OrgScilabForgeJlatexmathMatrixAtom_ARRAY;
  self->spaceAround_ = spaceAround;
  OrgScilabForgeJlatexmathMatrixAtom_parsePositionsWithJavaLangStringBuffer_(self, new_JavaLangStringBuffer_initWithNSString_(options));
}

OrgScilabForgeJlatexmathMatrixAtom *new_OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_withBoolean_(jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, NSString *options, jboolean spaceAround) {
  OrgScilabForgeJlatexmathMatrixAtom *self = [OrgScilabForgeJlatexmathMatrixAtom alloc];
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_withBoolean_(self, isPartial, array, options, spaceAround);
  return self;
}

void OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_(OrgScilabForgeJlatexmathMatrixAtom *self, jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, NSString *options) {
  (void) OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_withBoolean_(self, isPartial, array, options, NO);
}

OrgScilabForgeJlatexmathMatrixAtom *new_OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_(jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, NSString *options) {
  OrgScilabForgeJlatexmathMatrixAtom *self = [OrgScilabForgeJlatexmathMatrixAtom alloc];
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_(self, isPartial, array, options);
  return self;
}

void OrgScilabForgeJlatexmathMatrixAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_(OrgScilabForgeJlatexmathMatrixAtom *self, OrgScilabForgeJlatexmathArrayOfAtoms *array, NSString *options) {
  (void) OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_(self, NO, array, options);
}

OrgScilabForgeJlatexmathMatrixAtom *new_OrgScilabForgeJlatexmathMatrixAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_(OrgScilabForgeJlatexmathArrayOfAtoms *array, NSString *options) {
  OrgScilabForgeJlatexmathMatrixAtom *self = [OrgScilabForgeJlatexmathMatrixAtom alloc];
  OrgScilabForgeJlatexmathMatrixAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_(self, array, options);
  return self;
}

void OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(OrgScilabForgeJlatexmathMatrixAtom *self, jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, jint type) {
  (void) OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withBoolean_(self, isPartial, array, type, NO);
}

OrgScilabForgeJlatexmathMatrixAtom *new_OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, jint type) {
  OrgScilabForgeJlatexmathMatrixAtom *self = [OrgScilabForgeJlatexmathMatrixAtom alloc];
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(self, isPartial, array, type);
  return self;
}

void OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withBoolean_(OrgScilabForgeJlatexmathMatrixAtom *self, jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, jint type, jboolean spaceAround) {
  (void) OrgScilabForgeJlatexmathAtom_init(self);
  self->vlines_ = new_JavaUtilHashMap_init();
  self->isPartial_ = isPartial;
  self->matrix_ = array;
  self->type_MatrixAtom_ = type;
  self->spaceAround_ = spaceAround;
  if (type != OrgScilabForgeJlatexmathMatrixAtom_MATRIX && type != OrgScilabForgeJlatexmathMatrixAtom_SMALLMATRIX) {
    self->position_ = [IOSIntArray newArrayWithLength:((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(self->matrix_))->col_];
    for (jint i = 0; i < self->matrix_->col_; i += 2) {
      *IOSIntArray_GetRef(self->position_, i) = OrgScilabForgeJlatexmathTeXConstants_ALIGN_RIGHT;
      if (i + 1 < self->matrix_->col_) {
        *IOSIntArray_GetRef(self->position_, i + 1) = OrgScilabForgeJlatexmathTeXConstants_ALIGN_LEFT;
      }
    }
  }
  else {
    self->position_ = [IOSIntArray newArrayWithLength:((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(self->matrix_))->col_];
    for (jint i = 0; i < self->matrix_->col_; i++) {
      *IOSIntArray_GetRef(self->position_, i) = OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER;
    }
  }
}

OrgScilabForgeJlatexmathMatrixAtom *new_OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withBoolean_(jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, jint type, jboolean spaceAround) {
  OrgScilabForgeJlatexmathMatrixAtom *self = [OrgScilabForgeJlatexmathMatrixAtom alloc];
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withBoolean_(self, isPartial, array, type, spaceAround);
  return self;
}

void OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withInt_(OrgScilabForgeJlatexmathMatrixAtom *self, jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, jint type, jint alignment) {
  (void) OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withInt_withBoolean_(self, isPartial, array, type, alignment, YES);
}

OrgScilabForgeJlatexmathMatrixAtom *new_OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withInt_(jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, jint type, jint alignment) {
  OrgScilabForgeJlatexmathMatrixAtom *self = [OrgScilabForgeJlatexmathMatrixAtom alloc];
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withInt_(self, isPartial, array, type, alignment);
  return self;
}

void OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withInt_withBoolean_(OrgScilabForgeJlatexmathMatrixAtom *self, jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, jint type, jint alignment, jboolean spaceAround) {
  (void) OrgScilabForgeJlatexmathAtom_init(self);
  self->vlines_ = new_JavaUtilHashMap_init();
  self->isPartial_ = isPartial;
  self->matrix_ = array;
  self->type_MatrixAtom_ = type;
  self->spaceAround_ = spaceAround;
  self->position_ = [IOSIntArray newArrayWithLength:((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(self->matrix_))->col_];
  for (jint i = 0; i < self->matrix_->col_; i++) {
    *IOSIntArray_GetRef(self->position_, i) = alignment;
  }
}

OrgScilabForgeJlatexmathMatrixAtom *new_OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withInt_withBoolean_(jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *array, jint type, jint alignment, jboolean spaceAround) {
  OrgScilabForgeJlatexmathMatrixAtom *self = [OrgScilabForgeJlatexmathMatrixAtom alloc];
  OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_withInt_withBoolean_(self, isPartial, array, type, alignment, spaceAround);
  return self;
}

void OrgScilabForgeJlatexmathMatrixAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(OrgScilabForgeJlatexmathMatrixAtom *self, OrgScilabForgeJlatexmathArrayOfAtoms *array, jint type) {
  (void) OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(self, NO, array, type);
}

OrgScilabForgeJlatexmathMatrixAtom *new_OrgScilabForgeJlatexmathMatrixAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(OrgScilabForgeJlatexmathArrayOfAtoms *array, jint type) {
  OrgScilabForgeJlatexmathMatrixAtom *self = [OrgScilabForgeJlatexmathMatrixAtom alloc];
  OrgScilabForgeJlatexmathMatrixAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(self, array, type);
  return self;
}

void OrgScilabForgeJlatexmathMatrixAtom_parsePositionsWithJavaLangStringBuffer_(OrgScilabForgeJlatexmathMatrixAtom *self, JavaLangStringBuffer *opt) {
  jint len = [((JavaLangStringBuffer *) nil_chk(opt)) length];
  jint pos = 0;
  jchar ch;
  OrgScilabForgeJlatexmathTeXFormula *tf;
  OrgScilabForgeJlatexmathTeXParser *tp;
  id<JavaUtilList> lposition = new_JavaUtilArrayList_init();
  while (pos < len) {
    ch = [opt charAtWithInt:pos];
    {
      jint nb;
      OrgScilabForgeJlatexmathAtom *at;
      IOSObjectArray *args;
      jint nrep;
      NSString *str;
      switch (ch) {
        case 'l':
        [lposition addWithId:JavaLangInteger_valueOfWithInt_(OrgScilabForgeJlatexmathTeXConstants_ALIGN_LEFT)];
        break;
        case 'r':
        [lposition addWithId:JavaLangInteger_valueOfWithInt_(OrgScilabForgeJlatexmathTeXConstants_ALIGN_RIGHT)];
        break;
        case 'c':
        [lposition addWithId:JavaLangInteger_valueOfWithInt_(OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER)];
        break;
        case '|':
        nb = 1;
        while (++pos < len) {
          ch = [opt charAtWithInt:pos];
          if (ch != '|') {
            pos--;
            break;
          }
          else {
            nb++;
          }
        }
        (void) [((id<JavaUtilMap>) nil_chk(self->vlines_)) putWithId:JavaLangInteger_valueOfWithInt_([lposition size]) withId:new_OrgScilabForgeJlatexmathVlineAtom_initWithInt_(nb)];
        break;
        case '@':
        pos++;
        tf = new_OrgScilabForgeJlatexmathTeXFormula_init();
        tp = new_OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self->isPartial_, [opt substringWithInt:pos], tf, NO);
        at = [tp getArgument];
        ((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(self->matrix_))->col_++;
        for (jint j = 0; j < self->matrix_->row_; j++) {
          [((JavaUtilLinkedList *) nil_chk([((JavaUtilLinkedList *) nil_chk(self->matrix_->array_)) getWithInt:j])) addWithInt:[lposition size] withId:at];
        }
        [lposition addWithId:JavaLangInteger_valueOfWithInt_(OrgScilabForgeJlatexmathTeXConstants_ALIGN_NONE)];
        pos += [tp getPos];
        pos--;
        break;
        case '*':
        pos++;
        tf = new_OrgScilabForgeJlatexmathTeXFormula_init();
        tp = new_OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self->isPartial_, [opt substringWithInt:pos], tf, NO);
        args = [tp getOptsArgsWithInt:2 withInt:0];
        pos += [tp getPos];
        nrep = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(args), 1));
        str = @"";
        for (jint j = 0; j < nrep; j++) {
          str = JreStrcat("$$", str, IOSObjectArray_Get(args, 2));
        }
        (void) [opt insertWithInt:pos withNSString:str];
        len = [opt length];
        pos--;
        break;
        case ' ':
        case 0x0009:
        break;
        default:
        [lposition addWithId:JavaLangInteger_valueOfWithInt_(OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER)];
      }
    }
    pos++;
  }
  for (jint j = [lposition size]; j < ((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(self->matrix_))->col_; j++) {
    [lposition addWithId:JavaLangInteger_valueOfWithInt_(OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER)];
  }
  if ([lposition size] != 0) {
    IOSObjectArray *tab = [lposition toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:JavaLangInteger_class_()]];
    self->position_ = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(tab))->size_];
    for (jint i = 0; i < tab->size_; i++) {
      *IOSIntArray_GetRef(self->position_, i) = [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(tab, i))) intValue];
    }
  }
  else {
    self->position_ = [IOSIntArray newArrayWithInts:(jint[]){ OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER } count:1];
  }
}

OrgScilabForgeJlatexmathBox *OrgScilabForgeJlatexmathMatrixAtom_generateMulticolumnWithOrgScilabForgeJlatexmathTeXEnvironment_withOrgScilabForgeJlatexmathBoxArray_withFloatArray_withInt_withInt_(OrgScilabForgeJlatexmathMatrixAtom *self, OrgScilabForgeJlatexmathTeXEnvironment *env, IOSObjectArray *Hsep, IOSFloatArray *rowWidth, jint i, jint j) {
  jfloat w = 0;
  OrgScilabForgeJlatexmathMulticolumnAtom *mca = (OrgScilabForgeJlatexmathMulticolumnAtom *) check_class_cast([((JavaUtilLinkedList *) nil_chk([((JavaUtilLinkedList *) nil_chk(((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(self->matrix_))->array_)) getWithInt:i])) getWithInt:j], [OrgScilabForgeJlatexmathMulticolumnAtom class]);
  jint k, n = [((OrgScilabForgeJlatexmathMulticolumnAtom *) nil_chk(mca)) getSkipped];
  for (k = j; k < j + n - 1; k++) {
    w += IOSFloatArray_Get(nil_chk(rowWidth), k) + [((OrgScilabForgeJlatexmathBox *) nil_chk(IOSObjectArray_Get(nil_chk(Hsep), k + 1))) getWidth];
    if ([((id<JavaUtilMap>) nil_chk(self->vlines_)) getWithId:JavaLangInteger_valueOfWithInt_(k + 1)] != nil) {
      w += [((OrgScilabForgeJlatexmathVlineAtom *) nil_chk([self->vlines_ getWithId:JavaLangInteger_valueOfWithInt_(k + 1)])) getWidthWithOrgScilabForgeJlatexmathTeXEnvironment:env];
    }
  }
  w += IOSFloatArray_Get(nil_chk(rowWidth), k);
  OrgScilabForgeJlatexmathBox *b = [mca createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
  jfloat bw = [((OrgScilabForgeJlatexmathBox *) nil_chk(b)) getWidth];
  if (bw > w) {
    w = 0;
  }
  [mca setWidthWithFloat:w];
  b = [mca createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
  return b;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathMatrixAtom)
