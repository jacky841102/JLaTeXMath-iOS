//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/MultlineAtom.java
//


#include "ArrayOfAtoms.h"
#include "Atom.h"
#include "Box.h"
#include "HorizontalBox.h"
#include "J2ObjC_source.h"
#include "MatrixAtom.h"
#include "MultlineAtom.h"
#include "SpaceAtom.h"
#include "TeXConstants.h"
#include "TeXEnvironment.h"
#include "VerticalBox.h"
#include "java/lang/Float.h"
#include "java/util/LinkedList.h"

@interface OrgScilabForgeJlatexmathMultlineAtom () {
 @public
  OrgScilabForgeJlatexmathArrayOfAtoms *column_;
  jint type_MultlineAtom_;
  jboolean isPartial_;
}

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathMultlineAtom, column_, OrgScilabForgeJlatexmathArrayOfAtoms *)

J2OBJC_INITIALIZED_DEFN(OrgScilabForgeJlatexmathMultlineAtom)

OrgScilabForgeJlatexmathSpaceAtom *OrgScilabForgeJlatexmathMultlineAtom_vsep_in_;

@implementation OrgScilabForgeJlatexmathMultlineAtom

- (instancetype)initWithBoolean:(jboolean)isPartial
withOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)column
                        withInt:(jint)type {
  OrgScilabForgeJlatexmathMultlineAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(self, isPartial, column, type);
  return self;
}

- (instancetype)initWithOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)column
                                                     withInt:(jint)type {
  OrgScilabForgeJlatexmathMultlineAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(self, column, type);
  return self;
}

- (OrgScilabForgeJlatexmathBox *)createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:(OrgScilabForgeJlatexmathTeXEnvironment *)env {
  jfloat tw = [((OrgScilabForgeJlatexmathTeXEnvironment *) nil_chk(env)) getTextwidth];
  if (tw == JavaLangFloat_POSITIVE_INFINITY || type_MultlineAtom_ == OrgScilabForgeJlatexmathMultlineAtom_GATHERED) {
    return [new_OrgScilabForgeJlatexmathMatrixAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withNSString_(isPartial_, column_, @"") createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
  }
  OrgScilabForgeJlatexmathVerticalBox *vb = new_OrgScilabForgeJlatexmathVerticalBox_init();
  OrgScilabForgeJlatexmathAtom *at = [((JavaUtilLinkedList *) nil_chk([((JavaUtilLinkedList *) nil_chk(((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(column_))->array_)) getWithInt:0])) getWithInt:0];
  jint alignment = type_MultlineAtom_ == OrgScilabForgeJlatexmathMultlineAtom_GATHER ? OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER : OrgScilabForgeJlatexmathTeXConstants_ALIGN_LEFT;
  if (((OrgScilabForgeJlatexmathAtom *) nil_chk(at))->alignment_ != -1) {
    alignment = at->alignment_;
  }
  [vb addWithOrgScilabForgeJlatexmathBox:new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_withFloat_withInt_([at createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env], tw, alignment)];
  OrgScilabForgeJlatexmathBox *Vsep = [((OrgScilabForgeJlatexmathSpaceAtom *) nil_chk(OrgScilabForgeJlatexmathMultlineAtom_vsep_in_)) createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env];
  for (jint i = 1; i < column_->row_ - 1; i++) {
    at = [((JavaUtilLinkedList *) nil_chk([column_->array_ getWithInt:i])) getWithInt:0];
    alignment = OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER;
    if (((OrgScilabForgeJlatexmathAtom *) nil_chk(at))->alignment_ != -1) {
      alignment = at->alignment_;
    }
    [vb addWithOrgScilabForgeJlatexmathBox:Vsep];
    [vb addWithOrgScilabForgeJlatexmathBox:new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_withFloat_withInt_([at createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env], tw, alignment)];
  }
  if (column_->row_ > 1) {
    at = [((JavaUtilLinkedList *) nil_chk([column_->array_ getWithInt:column_->row_ - 1])) getWithInt:0];
    alignment = type_MultlineAtom_ == OrgScilabForgeJlatexmathMultlineAtom_GATHER ? OrgScilabForgeJlatexmathTeXConstants_ALIGN_CENTER : OrgScilabForgeJlatexmathTeXConstants_ALIGN_RIGHT;
    if (((OrgScilabForgeJlatexmathAtom *) nil_chk(at))->alignment_ != -1) {
      alignment = at->alignment_;
    }
    [vb addWithOrgScilabForgeJlatexmathBox:Vsep];
    [vb addWithOrgScilabForgeJlatexmathBox:new_OrgScilabForgeJlatexmathHorizontalBox_initWithOrgScilabForgeJlatexmathBox_withFloat_withInt_([at createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:env], tw, alignment)];
  }
  jfloat height = [vb getHeight] + [vb getDepth];
  [vb setHeightWithFloat:height / 2];
  [vb setDepthWithFloat:height / 2];
  return vb;
}

+ (void)initialize {
  if (self == [OrgScilabForgeJlatexmathMultlineAtom class]) {
    OrgScilabForgeJlatexmathMultlineAtom_vsep_in_ = new_OrgScilabForgeJlatexmathSpaceAtom_initWithInt_withFloat_withFloat_withFloat_(OrgScilabForgeJlatexmathTeXConstants_UNIT_EX, 0.0f, 1.0f, 0.0f);
    J2OBJC_SET_INITIALIZED(OrgScilabForgeJlatexmathMultlineAtom)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withOrgScilabForgeJlatexmathArrayOfAtoms:withInt:", "MultlineAtom", NULL, 0x1, NULL, NULL },
    { "initWithOrgScilabForgeJlatexmathArrayOfAtoms:withInt:", "MultlineAtom", NULL, 0x1, NULL, NULL },
    { "createBoxWithOrgScilabForgeJlatexmathTeXEnvironment:", "createBox", "Lorg.scilab.forge.jlatexmath.Box;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vsep_in_", NULL, 0x9, "Lorg.scilab.forge.jlatexmath.SpaceAtom;", &OrgScilabForgeJlatexmathMultlineAtom_vsep_in_, NULL,  },
    { "MULTLINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMultlineAtom_MULTLINE },
    { "GATHER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMultlineAtom_GATHER },
    { "GATHERED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathMultlineAtom_GATHERED },
    { "column_", NULL, 0x2, "Lorg.scilab.forge.jlatexmath.ArrayOfAtoms;", NULL, NULL,  },
    { "type_MultlineAtom_", "type", 0x2, "I", NULL, NULL,  },
    { "isPartial_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathMultlineAtom = { 2, "MultlineAtom", "org.scilab.forge.jlatexmath", NULL, 0x1, 3, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathMultlineAtom;
}

@end

void OrgScilabForgeJlatexmathMultlineAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(OrgScilabForgeJlatexmathMultlineAtom *self, jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *column, jint type) {
  (void) OrgScilabForgeJlatexmathAtom_init(self);
  self->isPartial_ = isPartial;
  self->column_ = column;
  self->type_MultlineAtom_ = type;
}

OrgScilabForgeJlatexmathMultlineAtom *new_OrgScilabForgeJlatexmathMultlineAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(jboolean isPartial, OrgScilabForgeJlatexmathArrayOfAtoms *column, jint type) {
  OrgScilabForgeJlatexmathMultlineAtom *self = [OrgScilabForgeJlatexmathMultlineAtom alloc];
  OrgScilabForgeJlatexmathMultlineAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(self, isPartial, column, type);
  return self;
}

void OrgScilabForgeJlatexmathMultlineAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(OrgScilabForgeJlatexmathMultlineAtom *self, OrgScilabForgeJlatexmathArrayOfAtoms *column, jint type) {
  (void) OrgScilabForgeJlatexmathMultlineAtom_initWithBoolean_withOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(self, NO, column, type);
}

OrgScilabForgeJlatexmathMultlineAtom *new_OrgScilabForgeJlatexmathMultlineAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(OrgScilabForgeJlatexmathArrayOfAtoms *column, jint type) {
  OrgScilabForgeJlatexmathMultlineAtom *self = [OrgScilabForgeJlatexmathMultlineAtom alloc];
  OrgScilabForgeJlatexmathMultlineAtom_initWithOrgScilabForgeJlatexmathArrayOfAtoms_withInt_(self, column, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathMultlineAtom)
