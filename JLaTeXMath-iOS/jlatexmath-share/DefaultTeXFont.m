//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/DefaultTeXFont.java
//


#include "AlphabetRegistration.h"
#include "AlphabetRegistrationException.h"
#include "Char.h"
#include "CharFont.h"
#include "Character.h"
#include "DefaultTeXFont.h"
#include "DefaultTeXFontParser.h"
#include "Extension.h"
#include "Font.h"
#include "FontAlreadyLoadedException.h"
#include "FontInfo.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Metrics.h"
#include "Resource.h"
#include "ResourceParseException.h"
#include "SymbolAtom.h"
#include "SymbolMappingNotFoundException.h"
#include "TeXConstants.h"
#include "TeXFont.h"
#include "TeXFormula.h"
#include "TeXIcon.h"
#include "TeXParser.h"
#include "TextStyleMappingNotFoundException.h"
#include "XMLResourceParseException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#define OrgScilabForgeJlatexmathDefaultTeXFont_NUMBER_OF_FONT_IDS 256

@interface OrgScilabForgeJlatexmathDefaultTeXFont () {
 @public
  jfloat size_;
}

- (OrgScilabForgeJlatexmathChar *)getCharWithChar:(jchar)c
        withOrgScilabForgeJlatexmathCharFontArray:(IOSObjectArray *)cf
                                          withInt:(jint)style;

- (OrgScilabForgeJlatexmathMetrics *)getMetricsWithOrgScilabForgeJlatexmathCharFont:(OrgScilabForgeJlatexmathCharFont *)cf
                                                                          withFloat:(jfloat)size;

+ (jfloat)getParameterWithNSString:(NSString *)parameterName;

@end

static IOSObjectArray *OrgScilabForgeJlatexmathDefaultTeXFont_defaultTextStyleMappings_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFont, defaultTextStyleMappings_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFont, defaultTextStyleMappings_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFont, NUMBER_OF_FONT_IDS, jint)

static id<JavaUtilMap> OrgScilabForgeJlatexmathDefaultTeXFont_textStyleMappings_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFont, textStyleMappings_, id<JavaUtilMap>)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFont, textStyleMappings_, id<JavaUtilMap>)

static id<JavaUtilMap> OrgScilabForgeJlatexmathDefaultTeXFont_symbolMappings_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFont, symbolMappings_, id<JavaUtilMap>)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFont, symbolMappings_, id<JavaUtilMap>)

static IOSObjectArray *OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFont, fontInfo_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFont, fontInfo_, IOSObjectArray *)

static id<JavaUtilMap> OrgScilabForgeJlatexmathDefaultTeXFont_parameters_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFont, parameters_, id<JavaUtilMap>)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFont, parameters_, id<JavaUtilMap>)

static id<JavaUtilMap> OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFont, generalSettings_, id<JavaUtilMap>)
J2OBJC_STATIC_FIELD_SETTER(OrgScilabForgeJlatexmathDefaultTeXFont, generalSettings_, id<JavaUtilMap>)

static jboolean OrgScilabForgeJlatexmathDefaultTeXFont_magnificationEnable_ = YES;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathDefaultTeXFont, magnificationEnable_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgScilabForgeJlatexmathDefaultTeXFont, magnificationEnable_, jboolean)

__attribute__((unused)) static OrgScilabForgeJlatexmathChar *OrgScilabForgeJlatexmathDefaultTeXFont_getCharWithChar_withOrgScilabForgeJlatexmathCharFontArray_withInt_(OrgScilabForgeJlatexmathDefaultTeXFont *self, jchar c, IOSObjectArray *cf, jint style);

__attribute__((unused)) static OrgScilabForgeJlatexmathMetrics *OrgScilabForgeJlatexmathDefaultTeXFont_getMetricsWithOrgScilabForgeJlatexmathCharFont_withFloat_(OrgScilabForgeJlatexmathDefaultTeXFont *self, OrgScilabForgeJlatexmathCharFont *cf, jfloat size);

__attribute__((unused)) static jfloat OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(NSString *parameterName);

J2OBJC_INITIALIZED_DEFN(OrgScilabForgeJlatexmathDefaultTeXFont)

id<JavaUtilList> OrgScilabForgeJlatexmathDefaultTeXFont_loadedAlphabets_;
id<JavaUtilMap> OrgScilabForgeJlatexmathDefaultTeXFont_registeredAlphabets_;

@implementation OrgScilabForgeJlatexmathDefaultTeXFont

- (instancetype)initWithFloat:(jfloat)pointSize {
  OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_(self, pointSize);
  return self;
}

- (instancetype)initWithFloat:(jfloat)pointSize
                  withBoolean:(jboolean)b
                  withBoolean:(jboolean)rm
                  withBoolean:(jboolean)ss
                  withBoolean:(jboolean)tt
                  withBoolean:(jboolean)it {
  OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, pointSize, b, rm, ss, tt, it);
  return self;
}

- (instancetype)initWithFloat:(jfloat)pointSize
                    withFloat:(jfloat)f
                  withBoolean:(jboolean)b
                  withBoolean:(jboolean)rm
                  withBoolean:(jboolean)ss
                  withBoolean:(jboolean)tt
                  withBoolean:(jboolean)it {
  OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, pointSize, f, b, rm, ss, tt, it);
  return self;
}

+ (void)addTeXFontDescriptionWithNSString:(NSString *)file {
  OrgScilabForgeJlatexmathDefaultTeXFont_addTeXFontDescriptionWithNSString_(file);
}

+ (void)addTeXFontDescriptionWithId:(id)inArg
                       withNSString:(NSString *)name {
  OrgScilabForgeJlatexmathDefaultTeXFont_addTeXFontDescriptionWithId_withNSString_(inArg, name);
}

+ (void)addTeXFontDescriptionWithId:(id)base
                             withId:(id)inArg
                       withNSString:(NSString *)name {
  OrgScilabForgeJlatexmathDefaultTeXFont_addTeXFontDescriptionWithId_withId_withNSString_(base, inArg, name);
}

+ (void)addAlphabetWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock:(OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock *)alphabet
                                                                        withId:(id)inlanguage
                                                                  withNSString:(NSString *)language
                                                                        withId:(id)insymbols
                                                                  withNSString:(NSString *)symbols
                                                                        withId:(id)inmappings
                                                                  withNSString:(NSString *)mappings {
  OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_withId_withNSString_withId_withNSString_withId_withNSString_(alphabet, inlanguage, language, insymbols, symbols, inmappings, mappings);
}

+ (void)addAlphabetWithId:(id)base
withOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlockArray:(IOSObjectArray *)alphabet
             withNSString:(NSString *)language {
  OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithId_withOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlockArray_withNSString_(base, alphabet, language);
}

+ (void)addAlphabetWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock:(OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock *)alphabet
                                                                  withNSString:(NSString *)name {
  OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_withNSString_(alphabet, name);
}

+ (void)addAlphabetWithOrgScilabForgeJlatexmathAlphabetRegistration:(id<OrgScilabForgeJlatexmathAlphabetRegistration>)reg {
  OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithOrgScilabForgeJlatexmathAlphabetRegistration_(reg);
}

+ (void)registerAlphabetWithOrgScilabForgeJlatexmathAlphabetRegistration:(id<OrgScilabForgeJlatexmathAlphabetRegistration>)reg {
  OrgScilabForgeJlatexmathDefaultTeXFont_registerAlphabetWithOrgScilabForgeJlatexmathAlphabetRegistration_(reg);
}

- (id<OrgScilabForgeJlatexmathTeXFont>)copy__ {
  return new_OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(size_, factor_, isBold_, isRoman_, isSs_, isTt_, isIt_);
}

- (id<OrgScilabForgeJlatexmathTeXFont>)deriveFontWithFloat:(jfloat)size {
  return new_OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(size, factor_, isBold_, isRoman_, isSs_, isTt_, isIt_);
}

- (id<OrgScilabForgeJlatexmathTeXFont>)scaleFontWithFloat:(jfloat)factor {
  return new_OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(size_, factor, isBold_, isRoman_, isSs_, isTt_, isIt_);
}

- (jfloat)getScaleFactor {
  return factor_;
}

- (jfloat)getAxisHeightWithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"axisheight") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getBigOpSpacing1WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"bigopspacing1") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getBigOpSpacing2WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"bigopspacing2") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getBigOpSpacing3WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"bigopspacing3") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getBigOpSpacing4WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"bigopspacing4") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getBigOpSpacing5WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"bigopspacing5") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (OrgScilabForgeJlatexmathChar *)getCharWithChar:(jchar)c
        withOrgScilabForgeJlatexmathCharFontArray:(IOSObjectArray *)cf
                                          withInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getCharWithChar_withOrgScilabForgeJlatexmathCharFontArray_withInt_(self, c, cf, style);
}

- (OrgScilabForgeJlatexmathChar *)getCharWithChar:(jchar)c
                                     withNSString:(NSString *)textStyle
                                          withInt:(jint)style {
  id mapping = [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_textStyleMappings_)) getWithId:textStyle];
  if (mapping == nil) @throw new_OrgScilabForgeJlatexmathExceptionTextStyleMappingNotFoundException_initWithNSString_(textStyle);
  else return OrgScilabForgeJlatexmathDefaultTeXFont_getCharWithChar_withOrgScilabForgeJlatexmathCharFontArray_withInt_(self, c, (IOSObjectArray *) check_class_cast(mapping, [IOSObjectArray class]), style);
}

- (OrgScilabForgeJlatexmathChar *)getCharWithOrgScilabForgeJlatexmathCharFont:(OrgScilabForgeJlatexmathCharFont *)cf
                                                                      withInt:(jint)style {
  jfloat fsize = OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style);
  jint id_ = isBold_ ? ((OrgScilabForgeJlatexmathCharFont *) nil_chk(cf))->boldFontId_ : ((OrgScilabForgeJlatexmathCharFont *) nil_chk(cf))->fontId_;
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), id_);
  if (isBold_ && ((OrgScilabForgeJlatexmathCharFont *) nil_chk(cf))->fontId_ == cf->boldFontId_) {
    id_ = [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getBoldId];
    info = IOSObjectArray_Get(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_, id_);
    cf = new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_withInt_(cf->c_, id_, style);
  }
  if (isRoman_) {
    id_ = [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getRomanId];
    info = IOSObjectArray_Get(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_, id_);
    cf = new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_withInt_(((OrgScilabForgeJlatexmathCharFont *) nil_chk(cf))->c_, id_, style);
  }
  if (isSs_) {
    id_ = [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getSsId];
    info = IOSObjectArray_Get(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_, id_);
    cf = new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_withInt_(((OrgScilabForgeJlatexmathCharFont *) nil_chk(cf))->c_, id_, style);
  }
  if (isTt_) {
    id_ = [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getTtId];
    info = IOSObjectArray_Get(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_, id_);
    cf = new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_withInt_(((OrgScilabForgeJlatexmathCharFont *) nil_chk(cf))->c_, id_, style);
  }
  if (isIt_) {
    id_ = [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getItId];
    info = IOSObjectArray_Get(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_, id_);
    cf = new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_withInt_(((OrgScilabForgeJlatexmathCharFont *) nil_chk(cf))->c_, id_, style);
  }
  id<OrgScilabForgeJlatexmathPlatformFontFont> font = [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getFont];
  return new_OrgScilabForgeJlatexmathChar_initWithChar_withOrgScilabForgeJlatexmathPlatformFontFont_withInt_withOrgScilabForgeJlatexmathMetrics_(((OrgScilabForgeJlatexmathCharFont *) nil_chk(cf))->c_, font, id_, OrgScilabForgeJlatexmathDefaultTeXFont_getMetricsWithOrgScilabForgeJlatexmathCharFont_withFloat_(self, cf, factor_ * fsize));
}

- (OrgScilabForgeJlatexmathChar *)getCharWithNSString:(NSString *)symbolName
                                              withInt:(jint)style {
  id obj = [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_symbolMappings_)) getWithId:symbolName];
  if (obj == nil) {
    @throw new_OrgScilabForgeJlatexmathExceptionSymbolMappingNotFoundException_initWithNSString_(symbolName);
  }
  else {
    return [self getCharWithOrgScilabForgeJlatexmathCharFont:(OrgScilabForgeJlatexmathCharFont *) check_class_cast(obj, [OrgScilabForgeJlatexmathCharFont class]) withInt:style];
  }
}

- (OrgScilabForgeJlatexmathChar *)getDefaultCharWithChar:(jchar)c
                                                 withInt:(jint)style {
  if (c >= '0' && c <= '9') {
    return [self getCharWithChar:c withNSString:IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_defaultTextStyleMappings_), OrgScilabForgeJlatexmathDefaultTeXFont_NUMBERS) withInt:style];
  }
  else if (c >= 'a' && c <= 'z') {
    return [self getCharWithChar:c withNSString:IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_defaultTextStyleMappings_), OrgScilabForgeJlatexmathDefaultTeXFont_SMALL) withInt:style];
  }
  else {
    return [self getCharWithChar:c withNSString:IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_defaultTextStyleMappings_), OrgScilabForgeJlatexmathDefaultTeXFont_CAPITALS) withInt:style];
  }
}

- (jfloat)getDefaultRuleThicknessWithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"defaultrulethickness") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getDenom1WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"denom1") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getDenom2WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"denom2") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (OrgScilabForgeJlatexmathExtension *)getExtensionWithOrgScilabForgeJlatexmathChar:(OrgScilabForgeJlatexmathChar *)c
                                                                            withInt:(jint)style {
  id<OrgScilabForgeJlatexmathPlatformFontFont> f = [((OrgScilabForgeJlatexmathChar *) nil_chk(c)) getFont];
  jint fc = [c getFontCode];
  jfloat s = OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style);
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), fc);
  IOSIntArray *ext = [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getExtensionWithChar:[c getChar]];
  IOSObjectArray *parts = [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(ext))->size_ type:OrgScilabForgeJlatexmathChar_class_()];
  for (jint i = 0; i < ext->size_; i++) {
    if (IOSIntArray_Get(ext, i) == OrgScilabForgeJlatexmathDefaultTeXFont_NONE) {
      (void) IOSObjectArray_Set(parts, i, nil);
    }
    else {
      (void) IOSObjectArray_Set(parts, i, new_OrgScilabForgeJlatexmathChar_initWithChar_withOrgScilabForgeJlatexmathPlatformFontFont_withInt_withOrgScilabForgeJlatexmathMetrics_((jchar) IOSIntArray_Get(ext, i), f, fc, OrgScilabForgeJlatexmathDefaultTeXFont_getMetricsWithOrgScilabForgeJlatexmathCharFont_withFloat_(self, new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_((jchar) IOSIntArray_Get(ext, i), fc), s)));
    }
  }
  return new_OrgScilabForgeJlatexmathExtension_initWithOrgScilabForgeJlatexmathChar_withOrgScilabForgeJlatexmathChar_withOrgScilabForgeJlatexmathChar_withOrgScilabForgeJlatexmathChar_(IOSObjectArray_Get(parts, OrgScilabForgeJlatexmathDefaultTeXFont_TOP), IOSObjectArray_Get(parts, OrgScilabForgeJlatexmathDefaultTeXFont_MID), IOSObjectArray_Get(parts, OrgScilabForgeJlatexmathDefaultTeXFont_REP), IOSObjectArray_Get(parts, OrgScilabForgeJlatexmathDefaultTeXFont_BOT));
}

- (jfloat)getKernWithOrgScilabForgeJlatexmathCharFont:(OrgScilabForgeJlatexmathCharFont *)left
                 withOrgScilabForgeJlatexmathCharFont:(OrgScilabForgeJlatexmathCharFont *)right
                                              withInt:(jint)style {
  if (((OrgScilabForgeJlatexmathCharFont *) nil_chk(left))->fontId_ == ((OrgScilabForgeJlatexmathCharFont *) nil_chk(right))->fontId_) {
    OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), left->fontId_);
    return [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getKernWithChar:left->c_ withChar:right->c_ withFloat:OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_()];
  }
  else {
    return 0;
  }
}

- (OrgScilabForgeJlatexmathCharFont *)getLigatureWithOrgScilabForgeJlatexmathCharFont:(OrgScilabForgeJlatexmathCharFont *)left
                                                 withOrgScilabForgeJlatexmathCharFont:(OrgScilabForgeJlatexmathCharFont *)right {
  if (((OrgScilabForgeJlatexmathCharFont *) nil_chk(left))->fontId_ == ((OrgScilabForgeJlatexmathCharFont *) nil_chk(right))->fontId_) {
    OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), left->fontId_);
    return [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getLigatureWithChar:left->c_ withChar:right->c_];
  }
  else {
    return nil;
  }
}

- (OrgScilabForgeJlatexmathMetrics *)getMetricsWithOrgScilabForgeJlatexmathCharFont:(OrgScilabForgeJlatexmathCharFont *)cf
                                                                          withFloat:(jfloat)size {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getMetricsWithOrgScilabForgeJlatexmathCharFont_withFloat_(self, cf, size);
}

- (jint)getMuFontId {
  return [((NSNumber *) nil_chk([((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_)) getWithId:OrgScilabForgeJlatexmathDefaultTeXFontParser_get_MUFONTID_ATTR_()])) intValue];
}

- (OrgScilabForgeJlatexmathChar *)getNextLargerWithOrgScilabForgeJlatexmathChar:(OrgScilabForgeJlatexmathChar *)c
                                                                        withInt:(jint)style {
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), [((OrgScilabForgeJlatexmathChar *) nil_chk(c)) getFontCode]);
  OrgScilabForgeJlatexmathCharFont *ch = [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getNextLargerWithChar:[c getChar]];
  OrgScilabForgeJlatexmathFontInfo *newInfo = IOSObjectArray_Get(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_, ((OrgScilabForgeJlatexmathCharFont *) nil_chk(ch))->fontId_);
  return new_OrgScilabForgeJlatexmathChar_initWithChar_withOrgScilabForgeJlatexmathPlatformFontFont_withInt_withOrgScilabForgeJlatexmathMetrics_(ch->c_, [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(newInfo)) getFont], ch->fontId_, OrgScilabForgeJlatexmathDefaultTeXFont_getMetricsWithOrgScilabForgeJlatexmathCharFont_withFloat_(self, ch, OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style)));
}

- (jfloat)getNum1WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"num1") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getNum2WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"num2") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getNum3WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"num3") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getQuadWithInt:(jint)style
                 withInt:(jint)fontCode {
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), fontCode);
  return [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getQuadWithFloat:OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_()];
}

- (jfloat)getSize {
  return size_;
}

- (jfloat)getSkewWithOrgScilabForgeJlatexmathCharFont:(OrgScilabForgeJlatexmathCharFont *)cf
                                              withInt:(jint)style {
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), ((OrgScilabForgeJlatexmathCharFont *) nil_chk(cf))->fontId_);
  jchar skew = [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getSkewChar];
  if (skew == -1) return 0;
  else return [self getKernWithOrgScilabForgeJlatexmathCharFont:cf withOrgScilabForgeJlatexmathCharFont:new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_(skew, cf->fontId_) withInt:style];
}

- (jfloat)getSpaceWithInt:(jint)style {
  jint spaceFontId = [((NSNumber *) nil_chk([((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_)) getWithId:OrgScilabForgeJlatexmathDefaultTeXFontParser_get_SPACEFONTID_ATTR_()])) intValue];
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), spaceFontId);
  return [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getSpaceWithFloat:OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_()];
}

- (jfloat)getSub1WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"sub1") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getSub2WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"sub2") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getSubDropWithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"subdrop") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getSup1WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"sup1") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getSup2WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"sup2") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getSup3WithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"sup3") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getSupDropWithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(@"supdrop") * OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jfloat)getXHeightWithInt:(jint)style
                    withInt:(jint)fontCode {
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), fontCode);
  return [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getXHeightWithFloat:OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_()];
}

- (jfloat)getEMWithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style) * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_();
}

- (jboolean)hasNextLargerWithOrgScilabForgeJlatexmathChar:(OrgScilabForgeJlatexmathChar *)c {
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), [((OrgScilabForgeJlatexmathChar *) nil_chk(c)) getFontCode]);
  return ([((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getNextLargerWithChar:[c getChar]] != nil);
}

- (void)setBoldWithBoolean:(jboolean)bold {
  isBold_ = bold;
}

- (jboolean)getBold {
  return isBold_;
}

- (void)setRomanWithBoolean:(jboolean)rm {
  isRoman_ = rm;
}

- (jboolean)getRoman {
  return isRoman_;
}

- (void)setTtWithBoolean:(jboolean)tt {
  isTt_ = tt;
}

- (jboolean)getTt {
  return isTt_;
}

- (void)setItWithBoolean:(jboolean)it {
  isIt_ = it;
}

- (jboolean)getIt {
  return isIt_;
}

- (void)setSsWithBoolean:(jboolean)ss {
  isSs_ = ss;
}

- (jboolean)getSs {
  return isSs_;
}

- (jboolean)hasSpaceWithInt:(jint)font {
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), font);
  return [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) hasSpace];
}

- (jboolean)isExtensionCharWithOrgScilabForgeJlatexmathChar:(OrgScilabForgeJlatexmathChar *)c {
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), [((OrgScilabForgeJlatexmathChar *) nil_chk(c)) getFontCode]);
  return [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getExtensionWithChar:[c getChar]] != nil;
}

+ (void)setMathSizesWithFloat:(jfloat)ds
                    withFloat:(jfloat)ts
                    withFloat:(jfloat)ss
                    withFloat:(jfloat)sss {
  OrgScilabForgeJlatexmathDefaultTeXFont_setMathSizesWithFloat_withFloat_withFloat_withFloat_(ds, ts, ss, sss);
}

+ (void)setMagnificationWithFloat:(jfloat)mag {
  OrgScilabForgeJlatexmathDefaultTeXFont_setMagnificationWithFloat_(mag);
}

+ (void)enableMagnificationWithBoolean:(jboolean)b {
  OrgScilabForgeJlatexmathDefaultTeXFont_enableMagnificationWithBoolean_(b);
}

+ (jfloat)getParameterWithNSString:(NSString *)parameterName {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(parameterName);
}

+ (jfloat)getSizeFactorWithInt:(jint)style {
  return OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(style);
}

+ (void)initialize {
  if (self == [OrgScilabForgeJlatexmathDefaultTeXFont class]) {
    OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_ = [IOSObjectArray newArrayWithLength:0 type:OrgScilabForgeJlatexmathFontInfo_class_()];
    OrgScilabForgeJlatexmathDefaultTeXFont_loadedAlphabets_ = new_JavaUtilArrayList_init();
    OrgScilabForgeJlatexmathDefaultTeXFont_registeredAlphabets_ = new_JavaUtilHashMap_init();
    {
      OrgScilabForgeJlatexmathDefaultTeXFontParser *parser = new_OrgScilabForgeJlatexmathDefaultTeXFontParser_init();
      [OrgScilabForgeJlatexmathDefaultTeXFont_loadedAlphabets_ addWithId:OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_ofWithChar_('a')];
      OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_ = [parser parseFontDescriptionsWithOrgScilabForgeJlatexmathFontInfoArray:OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_];
      OrgScilabForgeJlatexmathDefaultTeXFont_parameters_ = [parser parseParameters];
      OrgScilabForgeJlatexmathDefaultTeXFont_textStyleMappings_ = [parser parseTextStyleMappings];
      OrgScilabForgeJlatexmathDefaultTeXFont_defaultTextStyleMappings_ = [parser parseDefaultTextStyleMappings];
      OrgScilabForgeJlatexmathDefaultTeXFont_symbolMappings_ = [parser parseSymbolMappings];
      OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_ = [parser parseGeneralSettings];
      (void) [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_)) putWithId:@"textfactor" withId:JavaLangInteger_valueOfWithInt_(1)];
      jint muFontId = [((NSNumber *) nil_chk([OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_ getWithId:OrgScilabForgeJlatexmathDefaultTeXFontParser_get_MUFONTID_ATTR_()])) intValue];
      if (muFontId < 0 || muFontId >= ((IOSObjectArray *) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_))->size_ || IOSObjectArray_Get(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_, muFontId) == nil) @throw new_OrgScilabForgeJlatexmathExceptionXMLResourceParseException_initWithNSString_withNSString_withNSString_withNSString_(OrgScilabForgeJlatexmathDefaultTeXFontParser_get_RESOURCE_NAME_(), OrgScilabForgeJlatexmathDefaultTeXFontParser_get_GEN_SET_EL_(), OrgScilabForgeJlatexmathDefaultTeXFontParser_get_MUFONTID_ATTR_(), @"contains an unknown font id!");
    }
    J2OBJC_SET_INITIALIZED(OrgScilabForgeJlatexmathDefaultTeXFont)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFloat:", "DefaultTeXFont", NULL, 0x1, NULL, NULL },
    { "initWithFloat:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", "DefaultTeXFont", NULL, 0x1, NULL, NULL },
    { "initWithFloat:withFloat:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", "DefaultTeXFont", NULL, 0x1, NULL, NULL },
    { "addTeXFontDescriptionWithNSString:", "addTeXFontDescription", "V", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "addTeXFontDescriptionWithId:withNSString:", "addTeXFontDescription", "V", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "addTeXFontDescriptionWithId:withId:withNSString:", "addTeXFontDescription", "V", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "addAlphabetWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock:withId:withNSString:withId:withNSString:withId:withNSString:", "addAlphabet", "V", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "addAlphabetWithId:withOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlockArray:withNSString:", "addAlphabet", "V", 0x9, "Lorg.scilab.forge.jlatexmath.exception.ResourceParseException;", NULL },
    { "addAlphabetWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock:withNSString:", "addAlphabet", "V", 0x9, NULL, NULL },
    { "addAlphabetWithOrgScilabForgeJlatexmathAlphabetRegistration:", "addAlphabet", "V", 0x9, NULL, NULL },
    { "registerAlphabetWithOrgScilabForgeJlatexmathAlphabetRegistration:", "registerAlphabet", "V", 0x9, NULL, NULL },
    { "copy__", "copy", "Lorg.scilab.forge.jlatexmath.TeXFont;", 0x1, NULL, NULL },
    { "deriveFontWithFloat:", "deriveFont", "Lorg.scilab.forge.jlatexmath.TeXFont;", 0x1, NULL, NULL },
    { "scaleFontWithFloat:", "scaleFont", "Lorg.scilab.forge.jlatexmath.TeXFont;", 0x1, NULL, NULL },
    { "getScaleFactor", NULL, "F", 0x1, NULL, NULL },
    { "getAxisHeightWithInt:", "getAxisHeight", "F", 0x1, NULL, NULL },
    { "getBigOpSpacing1WithInt:", "getBigOpSpacing1", "F", 0x1, NULL, NULL },
    { "getBigOpSpacing2WithInt:", "getBigOpSpacing2", "F", 0x1, NULL, NULL },
    { "getBigOpSpacing3WithInt:", "getBigOpSpacing3", "F", 0x1, NULL, NULL },
    { "getBigOpSpacing4WithInt:", "getBigOpSpacing4", "F", 0x1, NULL, NULL },
    { "getBigOpSpacing5WithInt:", "getBigOpSpacing5", "F", 0x1, NULL, NULL },
    { "getCharWithChar:withOrgScilabForgeJlatexmathCharFontArray:withInt:", "getChar", "Lorg.scilab.forge.jlatexmath.Char;", 0x2, NULL, NULL },
    { "getCharWithChar:withNSString:withInt:", "getChar", "Lorg.scilab.forge.jlatexmath.Char;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.TextStyleMappingNotFoundException;", NULL },
    { "getCharWithOrgScilabForgeJlatexmathCharFont:withInt:", "getChar", "Lorg.scilab.forge.jlatexmath.Char;", 0x1, NULL, NULL },
    { "getCharWithNSString:withInt:", "getChar", "Lorg.scilab.forge.jlatexmath.Char;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.SymbolMappingNotFoundException;", NULL },
    { "getDefaultCharWithChar:withInt:", "getDefaultChar", "Lorg.scilab.forge.jlatexmath.Char;", 0x1, NULL, NULL },
    { "getDefaultRuleThicknessWithInt:", "getDefaultRuleThickness", "F", 0x1, NULL, NULL },
    { "getDenom1WithInt:", "getDenom1", "F", 0x1, NULL, NULL },
    { "getDenom2WithInt:", "getDenom2", "F", 0x1, NULL, NULL },
    { "getExtensionWithOrgScilabForgeJlatexmathChar:withInt:", "getExtension", "Lorg.scilab.forge.jlatexmath.Extension;", 0x1, NULL, NULL },
    { "getKernWithOrgScilabForgeJlatexmathCharFont:withOrgScilabForgeJlatexmathCharFont:withInt:", "getKern", "F", 0x1, NULL, NULL },
    { "getLigatureWithOrgScilabForgeJlatexmathCharFont:withOrgScilabForgeJlatexmathCharFont:", "getLigature", "Lorg.scilab.forge.jlatexmath.CharFont;", 0x1, NULL, NULL },
    { "getMetricsWithOrgScilabForgeJlatexmathCharFont:withFloat:", "getMetrics", "Lorg.scilab.forge.jlatexmath.Metrics;", 0x2, NULL, NULL },
    { "getMuFontId", NULL, "I", 0x1, NULL, NULL },
    { "getNextLargerWithOrgScilabForgeJlatexmathChar:withInt:", "getNextLarger", "Lorg.scilab.forge.jlatexmath.Char;", 0x1, NULL, NULL },
    { "getNum1WithInt:", "getNum1", "F", 0x1, NULL, NULL },
    { "getNum2WithInt:", "getNum2", "F", 0x1, NULL, NULL },
    { "getNum3WithInt:", "getNum3", "F", 0x1, NULL, NULL },
    { "getQuadWithInt:withInt:", "getQuad", "F", 0x1, NULL, NULL },
    { "getSize", NULL, "F", 0x1, NULL, NULL },
    { "getSkewWithOrgScilabForgeJlatexmathCharFont:withInt:", "getSkew", "F", 0x1, NULL, NULL },
    { "getSpaceWithInt:", "getSpace", "F", 0x1, NULL, NULL },
    { "getSub1WithInt:", "getSub1", "F", 0x1, NULL, NULL },
    { "getSub2WithInt:", "getSub2", "F", 0x1, NULL, NULL },
    { "getSubDropWithInt:", "getSubDrop", "F", 0x1, NULL, NULL },
    { "getSup1WithInt:", "getSup1", "F", 0x1, NULL, NULL },
    { "getSup2WithInt:", "getSup2", "F", 0x1, NULL, NULL },
    { "getSup3WithInt:", "getSup3", "F", 0x1, NULL, NULL },
    { "getSupDropWithInt:", "getSupDrop", "F", 0x1, NULL, NULL },
    { "getXHeightWithInt:withInt:", "getXHeight", "F", 0x1, NULL, NULL },
    { "getEMWithInt:", "getEM", "F", 0x1, NULL, NULL },
    { "hasNextLargerWithOrgScilabForgeJlatexmathChar:", "hasNextLarger", "Z", 0x1, NULL, NULL },
    { "setBoldWithBoolean:", "setBold", "V", 0x1, NULL, NULL },
    { "getBold", NULL, "Z", 0x1, NULL, NULL },
    { "setRomanWithBoolean:", "setRoman", "V", 0x1, NULL, NULL },
    { "getRoman", NULL, "Z", 0x1, NULL, NULL },
    { "setTtWithBoolean:", "setTt", "V", 0x1, NULL, NULL },
    { "getTt", NULL, "Z", 0x1, NULL, NULL },
    { "setItWithBoolean:", "setIt", "V", 0x1, NULL, NULL },
    { "getIt", NULL, "Z", 0x1, NULL, NULL },
    { "setSsWithBoolean:", "setSs", "V", 0x1, NULL, NULL },
    { "getSs", NULL, "Z", 0x1, NULL, NULL },
    { "hasSpaceWithInt:", "hasSpace", "Z", 0x1, NULL, NULL },
    { "isExtensionCharWithOrgScilabForgeJlatexmathChar:", "isExtensionChar", "Z", 0x1, NULL, NULL },
    { "setMathSizesWithFloat:withFloat:withFloat:withFloat:", "setMathSizes", "V", 0x9, NULL, NULL },
    { "setMagnificationWithFloat:", "setMagnification", "V", 0x9, NULL, NULL },
    { "enableMagnificationWithBoolean:", "enableMagnification", "V", 0x9, NULL, NULL },
    { "getParameterWithNSString:", "getParameter", "F", 0xa, NULL, NULL },
    { "getSizeFactorWithInt:", "getSizeFactor", "F", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultTextStyleMappings_", NULL, 0xa, "[Ljava.lang.String;", &OrgScilabForgeJlatexmathDefaultTeXFont_defaultTextStyleMappings_, NULL,  },
    { "NONE_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_NONE },
    { "NUMBERS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_NUMBERS },
    { "CAPITALS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_CAPITALS },
    { "SMALL_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_SMALL },
    { "UNICODE_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_UNICODE },
    { "NUMBER_OF_FONT_IDS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_NUMBER_OF_FONT_IDS },
    { "textStyleMappings_", NULL, 0xa, "Ljava.util.Map;", &OrgScilabForgeJlatexmathDefaultTeXFont_textStyleMappings_, "Ljava/util/Map<Ljava/lang/String;L[Lorg/scilab/forge/jlatexmath/CharFont;;>;",  },
    { "symbolMappings_", NULL, 0xa, "Ljava.util.Map;", &OrgScilabForgeJlatexmathDefaultTeXFont_symbolMappings_, "Ljava/util/Map<Ljava/lang/String;Lorg/scilab/forge/jlatexmath/CharFont;>;",  },
    { "fontInfo_", NULL, 0xa, "[Lorg.scilab.forge.jlatexmath.FontInfo;", &OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_, NULL,  },
    { "parameters_", NULL, 0xa, "Ljava.util.Map;", &OrgScilabForgeJlatexmathDefaultTeXFont_parameters_, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Float;>;",  },
    { "generalSettings_", NULL, 0xa, "Ljava.util.Map;", &OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Number;>;",  },
    { "magnificationEnable_", NULL, 0xa, "Z", &OrgScilabForgeJlatexmathDefaultTeXFont_magnificationEnable_, NULL,  },
    { "TOP_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_TOP },
    { "MID_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_MID },
    { "REP_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_REP },
    { "BOT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_BOT },
    { "WIDTH_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_WIDTH },
    { "HEIGHT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_HEIGHT },
    { "DEPTH_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_DEPTH },
    { "IT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathDefaultTeXFont_IT },
    { "loadedAlphabets_", NULL, 0x9, "Ljava.util.List;", &OrgScilabForgeJlatexmathDefaultTeXFont_loadedAlphabets_, "Ljava/util/List<Lorg/scilab/forge/jlatexmath/character/Character$UnicodeBlock;>;",  },
    { "registeredAlphabets_", NULL, 0x9, "Ljava.util.Map;", &OrgScilabForgeJlatexmathDefaultTeXFont_registeredAlphabets_, "Ljava/util/Map<Lorg/scilab/forge/jlatexmath/character/Character$UnicodeBlock;Lorg/scilab/forge/jlatexmath/AlphabetRegistration;>;",  },
    { "factor_", NULL, 0x4, "F", NULL, NULL,  },
    { "isBold_", NULL, 0x1, "Z", NULL, NULL,  },
    { "isRoman_", NULL, 0x1, "Z", NULL, NULL,  },
    { "isSs_", NULL, 0x1, "Z", NULL, NULL,  },
    { "isTt_", NULL, 0x1, "Z", NULL, NULL,  },
    { "isIt_", NULL, 0x1, "Z", NULL, NULL,  },
    { "size_", NULL, 0x12, "F", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathDefaultTeXFont = { 2, "DefaultTeXFont", "org.scilab.forge.jlatexmath", NULL, 0x1, 69, methods, 30, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathDefaultTeXFont;
}

@end

void OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_(OrgScilabForgeJlatexmathDefaultTeXFont *self, jfloat pointSize) {
  (void) NSObject_init(self);
  self->factor_ = 1.0f;
  self->isBold_ = NO;
  self->isRoman_ = NO;
  self->isSs_ = NO;
  self->isTt_ = NO;
  self->isIt_ = NO;
  self->size_ = pointSize;
}

OrgScilabForgeJlatexmathDefaultTeXFont *new_OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_(jfloat pointSize) {
  OrgScilabForgeJlatexmathDefaultTeXFont *self = [OrgScilabForgeJlatexmathDefaultTeXFont alloc];
  OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_(self, pointSize);
  return self;
}

void OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(OrgScilabForgeJlatexmathDefaultTeXFont *self, jfloat pointSize, jboolean b, jboolean rm, jboolean ss, jboolean tt, jboolean it) {
  (void) OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, pointSize, 1, b, rm, ss, tt, it);
}

OrgScilabForgeJlatexmathDefaultTeXFont *new_OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(jfloat pointSize, jboolean b, jboolean rm, jboolean ss, jboolean tt, jboolean it) {
  OrgScilabForgeJlatexmathDefaultTeXFont *self = [OrgScilabForgeJlatexmathDefaultTeXFont alloc];
  OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, pointSize, b, rm, ss, tt, it);
  return self;
}

void OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(OrgScilabForgeJlatexmathDefaultTeXFont *self, jfloat pointSize, jfloat f, jboolean b, jboolean rm, jboolean ss, jboolean tt, jboolean it) {
  (void) NSObject_init(self);
  self->factor_ = 1.0f;
  self->isBold_ = NO;
  self->isRoman_ = NO;
  self->isSs_ = NO;
  self->isTt_ = NO;
  self->isIt_ = NO;
  self->size_ = pointSize;
  self->factor_ = f;
  self->isBold_ = b;
  self->isRoman_ = rm;
  self->isSs_ = ss;
  self->isTt_ = tt;
  self->isIt_ = it;
}

OrgScilabForgeJlatexmathDefaultTeXFont *new_OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(jfloat pointSize, jfloat f, jboolean b, jboolean rm, jboolean ss, jboolean tt, jboolean it) {
  OrgScilabForgeJlatexmathDefaultTeXFont *self = [OrgScilabForgeJlatexmathDefaultTeXFont alloc];
  OrgScilabForgeJlatexmathDefaultTeXFont_initWithFloat_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, pointSize, f, b, rm, ss, tt, it);
  return self;
}

void OrgScilabForgeJlatexmathDefaultTeXFont_addTeXFontDescriptionWithNSString_(NSString *file) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  id in = [new_OrgScilabForgeJlatexmathPlatformResource_init() loadResourceWithNSString:file];
  OrgScilabForgeJlatexmathDefaultTeXFont_addTeXFontDescriptionWithId_withNSString_(in, file);
}

void OrgScilabForgeJlatexmathDefaultTeXFont_addTeXFontDescriptionWithId_withNSString_(id inArg, NSString *name) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  OrgScilabForgeJlatexmathDefaultTeXFontParser *dtfp = new_OrgScilabForgeJlatexmathDefaultTeXFontParser_initWithId_withNSString_(inArg, name);
  OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_ = [dtfp parseFontDescriptionsWithOrgScilabForgeJlatexmathFontInfoArray:OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_];
  [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_textStyleMappings_)) putAllWithJavaUtilMap:[dtfp parseTextStyleMappings]];
  [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_symbolMappings_)) putAllWithJavaUtilMap:[dtfp parseSymbolMappings]];
}

void OrgScilabForgeJlatexmathDefaultTeXFont_addTeXFontDescriptionWithId_withId_withNSString_(id base, id inArg, NSString *name) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  OrgScilabForgeJlatexmathDefaultTeXFontParser *dtfp = new_OrgScilabForgeJlatexmathDefaultTeXFontParser_initWithId_withId_withNSString_(base, inArg, name);
  OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_ = [dtfp parseFontDescriptionsWithOrgScilabForgeJlatexmathFontInfoArray:OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_];
  [dtfp parseExtraPath];
  [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_textStyleMappings_)) putAllWithJavaUtilMap:[dtfp parseTextStyleMappings]];
  [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_symbolMappings_)) putAllWithJavaUtilMap:[dtfp parseSymbolMappings]];
}

void OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_withId_withNSString_withId_withNSString_withId_withNSString_(OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock *alphabet, id inlanguage, NSString *language, id insymbols, NSString *symbols, id inmappings, NSString *mappings) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  if (![((id<JavaUtilList>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_loadedAlphabets_)) containsWithId:alphabet]) {
    OrgScilabForgeJlatexmathDefaultTeXFont_addTeXFontDescriptionWithId_withNSString_(inlanguage, language);
    OrgScilabForgeJlatexmathSymbolAtom_addSymbolAtomWithId_withNSString_(insymbols, symbols);
    OrgScilabForgeJlatexmathTeXFormula_addSymbolMappingsWithId_withNSString_(inmappings, mappings);
    [OrgScilabForgeJlatexmathDefaultTeXFont_loadedAlphabets_ addWithId:alphabet];
  }
}

void OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithId_withOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlockArray_withNSString_(id base, IOSObjectArray *alphabet, NSString *language) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  jboolean b = NO;
  for (jint i = 0; !b && i < ((IOSObjectArray *) nil_chk(alphabet))->size_; i++) {
    b = ([((id<JavaUtilList>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_loadedAlphabets_)) containsWithId:IOSObjectArray_Get(nil_chk(alphabet), i)] || b);
  }
  if (!b) {
    *OrgScilabForgeJlatexmathTeXParser_getRef_isLoading_() = YES;
    OrgScilabForgeJlatexmathDefaultTeXFont_addTeXFontDescriptionWithId_withId_withNSString_(base, [new_OrgScilabForgeJlatexmathPlatformResource_init() loadResourceWithId:base withNSString:language], language);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(alphabet))->size_; i++) {
      [((id<JavaUtilList>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_loadedAlphabets_)) addWithId:IOSObjectArray_Get(alphabet, i)];
    }
    *OrgScilabForgeJlatexmathTeXParser_getRef_isLoading_() = NO;
  }
}

void OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_withNSString_(OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock *alphabet, NSString *name) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  NSString *lg = JreStrcat("$$$$$", @"fonts/", name, @"/language_", name, @".xml");
  NSString *sym = JreStrcat("$$$$$", @"fonts/", name, @"/symbols_", name, @".xml");
  NSString *map = JreStrcat("$$$$$", @"fonts/", name, @"/mappings_", name, @".xml");
  OrgScilabForgeJlatexmathPlatformResource *resource = new_OrgScilabForgeJlatexmathPlatformResource_init();
  @try {
    OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_withId_withNSString_withId_withNSString_withId_withNSString_(alphabet, [resource loadResourceWithId:OrgScilabForgeJlatexmathTeXFormula_class_() withNSString:lg], lg, [resource loadResourceWithId:OrgScilabForgeJlatexmathTeXFormula_class_() withNSString:sym], sym, [resource loadResourceWithId:OrgScilabForgeJlatexmathTeXFormula_class_() withNSString:map], map);
  }
  @catch (OrgScilabForgeJlatexmathExceptionFontAlreadyLoadedException *e) {
  }
}

void OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithOrgScilabForgeJlatexmathAlphabetRegistration_(id<OrgScilabForgeJlatexmathAlphabetRegistration> reg) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  @try {
    if (reg != nil) {
      OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithId_withOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlockArray_withNSString_([reg getPackage], [reg getUnicodeBlock], [reg getTeXFontFileName]);
    }
  }
  @catch (OrgScilabForgeJlatexmathExceptionFontAlreadyLoadedException *e) {
  }
  @catch (OrgScilabForgeJlatexmathExceptionAlphabetRegistrationException *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:[((OrgScilabForgeJlatexmathExceptionAlphabetRegistrationException *) nil_chk(e)) description]];
  }
}

void OrgScilabForgeJlatexmathDefaultTeXFont_registerAlphabetWithOrgScilabForgeJlatexmathAlphabetRegistration_(id<OrgScilabForgeJlatexmathAlphabetRegistration> reg) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  IOSObjectArray *blocks = [((id<OrgScilabForgeJlatexmathAlphabetRegistration>) nil_chk(reg)) getUnicodeBlock];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(blocks))->size_; i++) {
    (void) [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_registeredAlphabets_)) putWithId:IOSObjectArray_Get(blocks, i) withId:reg];
  }
}

OrgScilabForgeJlatexmathChar *OrgScilabForgeJlatexmathDefaultTeXFont_getCharWithChar_withOrgScilabForgeJlatexmathCharFontArray_withInt_(OrgScilabForgeJlatexmathDefaultTeXFont *self, jchar c, IOSObjectArray *cf, jint style) {
  jint kind, offset;
  if (c >= '0' && c <= '9') {
    kind = OrgScilabForgeJlatexmathDefaultTeXFont_NUMBERS;
    offset = c - '0';
  }
  else if (c >= 'a' && c <= 'z') {
    kind = OrgScilabForgeJlatexmathDefaultTeXFont_SMALL;
    offset = c - 'a';
  }
  else if (c >= 'A' && c <= 'Z') {
    kind = OrgScilabForgeJlatexmathDefaultTeXFont_CAPITALS;
    offset = c - 'A';
  }
  else {
    kind = OrgScilabForgeJlatexmathDefaultTeXFont_UNICODE;
    offset = c;
  }
  if (IOSObjectArray_Get(nil_chk(cf), kind) == nil) return [self getDefaultCharWithChar:c withInt:style];
  else return [self getCharWithOrgScilabForgeJlatexmathCharFont:new_OrgScilabForgeJlatexmathCharFont_initWithChar_withInt_((jchar) (((OrgScilabForgeJlatexmathCharFont *) nil_chk(IOSObjectArray_Get(cf, kind)))->c_ + offset), ((OrgScilabForgeJlatexmathCharFont *) nil_chk(IOSObjectArray_Get(cf, kind)))->fontId_) withInt:style];
}

OrgScilabForgeJlatexmathMetrics *OrgScilabForgeJlatexmathDefaultTeXFont_getMetricsWithOrgScilabForgeJlatexmathCharFont_withFloat_(OrgScilabForgeJlatexmathDefaultTeXFont *self, OrgScilabForgeJlatexmathCharFont *cf, jfloat size) {
  OrgScilabForgeJlatexmathFontInfo *info = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_fontInfo_), ((OrgScilabForgeJlatexmathCharFont *) nil_chk(cf))->fontId_);
  IOSFloatArray *m = [((OrgScilabForgeJlatexmathFontInfo *) nil_chk(info)) getMetricsWithChar:cf->c_];
  return new_OrgScilabForgeJlatexmathMetrics_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(IOSFloatArray_Get(nil_chk(m), OrgScilabForgeJlatexmathDefaultTeXFont_WIDTH), IOSFloatArray_Get(m, OrgScilabForgeJlatexmathDefaultTeXFont_HEIGHT), IOSFloatArray_Get(m, OrgScilabForgeJlatexmathDefaultTeXFont_DEPTH), IOSFloatArray_Get(m, OrgScilabForgeJlatexmathDefaultTeXFont_IT), size * OrgScilabForgeJlatexmathTeXFormula_get_PIXELS_PER_POINT_(), size);
}

void OrgScilabForgeJlatexmathDefaultTeXFont_setMathSizesWithFloat_withFloat_withFloat_withFloat_(jfloat ds, jfloat ts, jfloat ss, jfloat sss) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  if (OrgScilabForgeJlatexmathDefaultTeXFont_magnificationEnable_) {
    (void) [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_)) putWithId:@"scriptfactor" withId:JavaLangFloat_valueOfWithFloat_(JavaLangMath_absWithFloat_(ss / ds))];
    (void) [OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_ putWithId:@"scriptscriptfactor" withId:JavaLangFloat_valueOfWithFloat_(JavaLangMath_absWithFloat_(sss / ds))];
    (void) [OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_ putWithId:@"textfactor" withId:JavaLangFloat_valueOfWithFloat_(JavaLangMath_absWithFloat_(ts / ds))];
    *OrgScilabForgeJlatexmathTeXIcon_getRef_defaultSize_() = JavaLangMath_absWithFloat_(ds);
  }
}

void OrgScilabForgeJlatexmathDefaultTeXFont_setMagnificationWithFloat_(jfloat mag) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  if (OrgScilabForgeJlatexmathDefaultTeXFont_magnificationEnable_) {
    *OrgScilabForgeJlatexmathTeXIcon_getRef_magFactor_() = mag / 1000.0f;
  }
}

void OrgScilabForgeJlatexmathDefaultTeXFont_enableMagnificationWithBoolean_(jboolean b) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  OrgScilabForgeJlatexmathDefaultTeXFont_magnificationEnable_ = b;
}

jfloat OrgScilabForgeJlatexmathDefaultTeXFont_getParameterWithNSString_(NSString *parameterName) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  id param = [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_parameters_)) getWithId:parameterName];
  if (param == nil) return 0;
  else return [((JavaLangFloat *) check_class_cast(param, [JavaLangFloat class])) floatValue];
}

jfloat OrgScilabForgeJlatexmathDefaultTeXFont_getSizeFactorWithInt_(jint style) {
  OrgScilabForgeJlatexmathDefaultTeXFont_initialize();
  if (style < OrgScilabForgeJlatexmathTeXConstants_STYLE_TEXT) return 1;
  else if (style < OrgScilabForgeJlatexmathTeXConstants_STYLE_SCRIPT) return [((NSNumber *) nil_chk([((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_)) getWithId:@"textfactor"])) floatValue];
  else if (style < OrgScilabForgeJlatexmathTeXConstants_STYLE_SCRIPT_SCRIPT) return [((NSNumber *) nil_chk([((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_)) getWithId:@"scriptfactor"])) floatValue];
  else return [((NSNumber *) nil_chk([((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_generalSettings_)) getWithId:@"scriptscriptfactor"])) floatValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathDefaultTeXFont)
