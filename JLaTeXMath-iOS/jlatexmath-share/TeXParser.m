//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/scilab/forge/jlatexmath/TeXParser.java
//


#include "AlphabetRegistration.h"
#include "ArrayOfAtoms.h"
#include "Atom.h"
#include "BigOperatorAtom.h"
#include "BreakMarkAtom.h"
#include "CharAtom.h"
#include "Character.h"
#include "Color.h"
#include "ColorAtom.h"
#include "ColorUtil.h"
#include "CumulativeScriptsAtom.h"
#include "DefaultTeXFont.h"
#include "EmptyAtom.h"
#include "FormulaNotFoundException.h"
#include "HlineAtom.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JavaFontRenderingAtom.h"
#include "MacroInfo.h"
#include "MathAtom.h"
#include "NewCommandMacro.h"
#include "OverUnderDelimiter.h"
#include "ParseException.h"
#include "PhantomAtom.h"
#include "RomanAtom.h"
#include "RowAtom.h"
#include "ScriptsAtom.h"
#include "SpaceAtom.h"
#include "SymbolAtom.h"
#include "SymbolNotFoundException.h"
#include "TeXConstants.h"
#include "TeXFormula.h"
#include "TeXParser.h"
#include "UnderscoreAtom.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#define OrgScilabForgeJlatexmathTeXParser_ESCAPE '\\'
#define OrgScilabForgeJlatexmathTeXParser_L_GROUP '{'
#define OrgScilabForgeJlatexmathTeXParser_R_GROUP '}'
#define OrgScilabForgeJlatexmathTeXParser_L_BRACK '['
#define OrgScilabForgeJlatexmathTeXParser_R_BRACK ']'
#define OrgScilabForgeJlatexmathTeXParser_DOLLAR '$'
#define OrgScilabForgeJlatexmathTeXParser_DQUOTE '"'
#define OrgScilabForgeJlatexmathTeXParser_PERCENT '%'
#define OrgScilabForgeJlatexmathTeXParser_OVER_DEL 0
#define OrgScilabForgeJlatexmathTeXParser_UNDER_DEL 1
#define OrgScilabForgeJlatexmathTeXParser_SUB_SCRIPT '_'
#define OrgScilabForgeJlatexmathTeXParser_SUPER_SCRIPT '^'
#define OrgScilabForgeJlatexmathTeXParser_PRIME '\''
#define OrgScilabForgeJlatexmathTeXParser_BACKPRIME 0x2035
#define OrgScilabForgeJlatexmathTeXParser_DEGRE 0x00b0
#define OrgScilabForgeJlatexmathTeXParser_SUPZERO 0x2070
#define OrgScilabForgeJlatexmathTeXParser_SUPONE 0x00b9
#define OrgScilabForgeJlatexmathTeXParser_SUPTWO 0x00b2
#define OrgScilabForgeJlatexmathTeXParser_SUPTHREE 0x00b3
#define OrgScilabForgeJlatexmathTeXParser_SUPFOUR 0x2074
#define OrgScilabForgeJlatexmathTeXParser_SUPFIVE 0x2075
#define OrgScilabForgeJlatexmathTeXParser_SUPSIX 0x2076
#define OrgScilabForgeJlatexmathTeXParser_SUPSEVEN 0x2077
#define OrgScilabForgeJlatexmathTeXParser_SUPEIGHT 0x2078
#define OrgScilabForgeJlatexmathTeXParser_SUPNINE 0x2079
#define OrgScilabForgeJlatexmathTeXParser_SUPPLUS 0x207a
#define OrgScilabForgeJlatexmathTeXParser_SUPMINUS 0x207b
#define OrgScilabForgeJlatexmathTeXParser_SUPEQUAL 0x207c
#define OrgScilabForgeJlatexmathTeXParser_SUPLPAR 0x207d
#define OrgScilabForgeJlatexmathTeXParser_SUPRPAR 0x207e
#define OrgScilabForgeJlatexmathTeXParser_SUPN 0x207f
#define OrgScilabForgeJlatexmathTeXParser_SUBZERO 0x2080
#define OrgScilabForgeJlatexmathTeXParser_SUBONE 0x2081
#define OrgScilabForgeJlatexmathTeXParser_SUBTWO 0x2082
#define OrgScilabForgeJlatexmathTeXParser_SUBTHREE 0x2083
#define OrgScilabForgeJlatexmathTeXParser_SUBFOUR 0x2084
#define OrgScilabForgeJlatexmathTeXParser_SUBFIVE 0x2085
#define OrgScilabForgeJlatexmathTeXParser_SUBSIX 0x2086
#define OrgScilabForgeJlatexmathTeXParser_SUBSEVEN 0x2087
#define OrgScilabForgeJlatexmathTeXParser_SUBEIGHT 0x2088
#define OrgScilabForgeJlatexmathTeXParser_SUBNINE 0x2089
#define OrgScilabForgeJlatexmathTeXParser_SUBPLUS 0x208a
#define OrgScilabForgeJlatexmathTeXParser_SUBMINUS 0x208b
#define OrgScilabForgeJlatexmathTeXParser_SUBEQUAL 0x208c
#define OrgScilabForgeJlatexmathTeXParser_SUBLPAR 0x208d
#define OrgScilabForgeJlatexmathTeXParser_SUBRPAR 0x208e

@interface OrgScilabForgeJlatexmathTeXParser () {
 @public
  JavaLangStringBuffer *parseString_;
  jint pos_;
  jint spos_;
  jint line_;
  jint col_;
  jint len_;
  jint group_;
  jboolean insertion_;
  jint atIsLetter_;
  jboolean arrayMode_;
  jboolean ignoreWhiteSpace_;
  jboolean isPartial_;
  jboolean autoNumberBreaking_;
}

- (void)firstpass;

- (OrgScilabForgeJlatexmathAtom *)getScriptsWithChar:(jchar)f;

- (NSString *)getCommand;

- (OrgScilabForgeJlatexmathAtom *)processEscape;

- (void)insertWithInt:(jint)beg
              withInt:(jint)end
         withNSString:(NSString *)formula;

- (NSString *)getCommandWithArgsWithNSString:(NSString *)command;

- (OrgScilabForgeJlatexmathAtom *)processCommandsWithNSString:(NSString *)command;

- (void)skipWhiteSpace;

+ (jchar)convertToRomanNumberWithChar:(jchar)c;

@end

J2OBJC_FIELD_SETTER(OrgScilabForgeJlatexmathTeXParser, parseString_, JavaLangStringBuffer *)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, ESCAPE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, L_GROUP, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, R_GROUP, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, L_BRACK, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, R_BRACK, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, DOLLAR, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, DQUOTE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, PERCENT, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, OVER_DEL, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, UNDER_DEL, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUB_SCRIPT, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPER_SCRIPT, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, PRIME, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, BACKPRIME, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, DEGRE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPZERO, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPONE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPTWO, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPTHREE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPFOUR, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPFIVE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPSIX, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPSEVEN, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPEIGHT, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPNINE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPPLUS, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPMINUS, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPEQUAL, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPLPAR, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPRPAR, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUPN, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBZERO, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBONE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBTWO, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBTHREE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBFOUR, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBFIVE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBSIX, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBSEVEN, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBEIGHT, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBNINE, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBPLUS, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBMINUS, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBEQUAL, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBLPAR, jchar)

J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, SUBRPAR, jchar)

static id<JavaUtilSet> OrgScilabForgeJlatexmathTeXParser_unparsedContents_;
J2OBJC_STATIC_FIELD_GETTER(OrgScilabForgeJlatexmathTeXParser, unparsedContents_, id<JavaUtilSet>)

__attribute__((unused)) static void OrgScilabForgeJlatexmathTeXParser_firstpass(OrgScilabForgeJlatexmathTeXParser *self);

__attribute__((unused)) static OrgScilabForgeJlatexmathAtom *OrgScilabForgeJlatexmathTeXParser_getScriptsWithChar_(OrgScilabForgeJlatexmathTeXParser *self, jchar f);

__attribute__((unused)) static NSString *OrgScilabForgeJlatexmathTeXParser_getCommand(OrgScilabForgeJlatexmathTeXParser *self);

__attribute__((unused)) static OrgScilabForgeJlatexmathAtom *OrgScilabForgeJlatexmathTeXParser_processEscape(OrgScilabForgeJlatexmathTeXParser *self);

__attribute__((unused)) static void OrgScilabForgeJlatexmathTeXParser_insertWithInt_withInt_withNSString_(OrgScilabForgeJlatexmathTeXParser *self, jint beg, jint end, NSString *formula);

__attribute__((unused)) static NSString *OrgScilabForgeJlatexmathTeXParser_getCommandWithArgsWithNSString_(OrgScilabForgeJlatexmathTeXParser *self, NSString *command);

__attribute__((unused)) static OrgScilabForgeJlatexmathAtom *OrgScilabForgeJlatexmathTeXParser_processCommandsWithNSString_(OrgScilabForgeJlatexmathTeXParser *self, NSString *command);

__attribute__((unused)) static jboolean OrgScilabForgeJlatexmathTeXParser_isValidCharacterInCommandWithChar_(OrgScilabForgeJlatexmathTeXParser *self, jchar ch);

__attribute__((unused)) static void OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(OrgScilabForgeJlatexmathTeXParser *self);

__attribute__((unused)) static jchar OrgScilabForgeJlatexmathTeXParser_convertToRomanNumberWithChar_(jchar c);

J2OBJC_INITIALIZED_DEFN(OrgScilabForgeJlatexmathTeXParser)

jboolean OrgScilabForgeJlatexmathTeXParser_isLoading_ = NO;

@implementation OrgScilabForgeJlatexmathTeXParser

- (instancetype)initWithNSString:(NSString *)parseString
withOrgScilabForgeJlatexmathTeXFormula:(OrgScilabForgeJlatexmathTeXFormula *)formula {
  OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_(self, parseString, formula);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isPartial
                   withNSString:(NSString *)parseString
withOrgScilabForgeJlatexmathTeXFormula:(OrgScilabForgeJlatexmathTeXFormula *)formula {
  OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_(self, isPartial, parseString, formula);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isPartial
                   withNSString:(NSString *)parseString
withOrgScilabForgeJlatexmathTeXFormula:(OrgScilabForgeJlatexmathTeXFormula *)formula
                    withBoolean:(jboolean)firstpass {
  OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, isPartial, parseString, formula, firstpass);
  return self;
}

- (instancetype)initWithNSString:(NSString *)parseString
withOrgScilabForgeJlatexmathTeXFormula:(OrgScilabForgeJlatexmathTeXFormula *)formula
                     withBoolean:(jboolean)firstpass {
  OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, parseString, formula, firstpass);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isPartial
                   withNSString:(NSString *)parseString
withOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)aoa
                    withBoolean:(jboolean)firstpass {
  OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_(self, isPartial, parseString, aoa, firstpass);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isPartial
                   withNSString:(NSString *)parseString
withOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)aoa
                    withBoolean:(jboolean)firstpass
                    withBoolean:(jboolean)space {
  OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_withBoolean_(self, isPartial, parseString, aoa, firstpass, space);
  return self;
}

- (instancetype)initWithNSString:(NSString *)parseString
withOrgScilabForgeJlatexmathArrayOfAtoms:(OrgScilabForgeJlatexmathArrayOfAtoms *)aoa
                     withBoolean:(jboolean)firstpass {
  OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_(self, parseString, aoa, firstpass);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isPartial
                   withNSString:(NSString *)parseString
withOrgScilabForgeJlatexmathTeXFormula:(OrgScilabForgeJlatexmathTeXFormula *)formula
                    withBoolean:(jboolean)firstpass
                    withBoolean:(jboolean)space {
  OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_withBoolean_(self, isPartial, parseString, formula, firstpass, space);
  return self;
}

- (instancetype)initWithNSString:(NSString *)parseString
withOrgScilabForgeJlatexmathTeXFormula:(OrgScilabForgeJlatexmathTeXFormula *)formula
                     withBoolean:(jboolean)firstpass
                     withBoolean:(jboolean)space {
  OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_withBoolean_(self, parseString, formula, firstpass, space);
  return self;
}

- (void)resetWithNSString:(NSString *)latex {
  parseString_ = new_JavaLangStringBuffer_initWithNSString_(latex);
  len_ = [parseString_ length];
  ((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_))->root_ = nil;
  pos_ = 0;
  spos_ = 0;
  line_ = 0;
  col_ = 0;
  group_ = 0;
  insertion_ = NO;
  atIsLetter_ = 0;
  arrayMode_ = NO;
  ignoreWhiteSpace_ = YES;
  OrgScilabForgeJlatexmathTeXParser_firstpass(self);
}

- (jboolean)getIsPartial {
  return isPartial_;
}

- (jint)getLine {
  return line_;
}

- (jint)getCol {
  return pos_ - col_ - 1;
}

- (OrgScilabForgeJlatexmathAtom *)getLastAtom {
  OrgScilabForgeJlatexmathAtom *at = ((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_))->root_;
  if ([at isKindOfClass:[OrgScilabForgeJlatexmathRowAtom class]]) return [((OrgScilabForgeJlatexmathRowAtom *) nil_chk(((OrgScilabForgeJlatexmathRowAtom *) check_class_cast(at, [OrgScilabForgeJlatexmathRowAtom class])))) getLastAtom];
  formula_->root_ = nil;
  return at;
}

- (OrgScilabForgeJlatexmathAtom *)getFormulaAtom {
  OrgScilabForgeJlatexmathAtom *at = ((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_))->root_;
  formula_->root_ = nil;
  return at;
}

- (void)addAtomWithOrgScilabForgeJlatexmathAtom:(OrgScilabForgeJlatexmathAtom *)at {
  (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:at];
}

- (void)makeAtLetter {
  atIsLetter_++;
}

- (void)makeAtOther {
  atIsLetter_--;
}

- (jboolean)isAtLetter {
  return (atIsLetter_ != 0);
}

- (jboolean)isArrayMode {
  return arrayMode_;
}

- (void)setArrayModeWithBoolean:(jboolean)arrayMode {
  self->arrayMode_ = arrayMode;
}

- (jboolean)isIgnoreWhiteSpace {
  return ignoreWhiteSpace_;
}

- (jboolean)isMathMode {
  return ignoreWhiteSpace_;
}

- (jint)getPos {
  return pos_;
}

- (jint)rewindWithInt:(jint)n {
  pos_ -= n;
  return pos_;
}

- (NSString *)getStringFromCurrentPos {
  return [((JavaLangStringBuffer *) nil_chk(parseString_)) substringWithInt:pos_];
}

- (void)finish {
  pos_ = [((JavaLangStringBuffer *) nil_chk(parseString_)) length];
}

- (void)addRow {
  if (!arrayMode_) @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(@"You can add a row only in array mode !");
  [((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(((OrgScilabForgeJlatexmathArrayOfAtoms *) check_class_cast(formula_, [OrgScilabForgeJlatexmathArrayOfAtoms class])))) addRow];
}

- (void)firstpass {
  OrgScilabForgeJlatexmathTeXParser_firstpass(self);
}

- (void)parse {
  if (len_ != 0) {
    jchar ch;
    while (pos_ < len_) {
      ch = [((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_];
      {
        OrgScilabForgeJlatexmathAtom *at;
        OrgScilabForgeJlatexmathAtom *atom;
        switch (ch) {
          case 0x000a:
          line_++;
          col_ = pos_;
          case 0x0009:
          case 0x000d:
          pos_++;
          break;
          case ' ':
          pos_++;
          if (!ignoreWhiteSpace_) {
            (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:new_OrgScilabForgeJlatexmathSpaceAtom_init()];
            (void) [formula_ addWithOrgScilabForgeJlatexmathAtom:new_OrgScilabForgeJlatexmathBreakMarkAtom_init()];
            while (pos_ < len_) {
              ch = [parseString_ charAtWithInt:pos_];
              if (ch != ' ' || ch != 0x0009 || ch != 0x000d) break;
              pos_++;
            }
          }
          break;
          case OrgScilabForgeJlatexmathTeXParser_DOLLAR:
          pos_++;
          if (!ignoreWhiteSpace_) {
            jint style = OrgScilabForgeJlatexmathTeXConstants_STYLE_TEXT;
            jboolean doubleDollar = NO;
            if ([parseString_ charAtWithInt:pos_] == OrgScilabForgeJlatexmathTeXParser_DOLLAR) {
              style = OrgScilabForgeJlatexmathTeXConstants_STYLE_DISPLAY;
              doubleDollar = YES;
              pos_++;
            }
            (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:new_OrgScilabForgeJlatexmathMathAtom_initWithOrgScilabForgeJlatexmathAtom_withInt_(new_OrgScilabForgeJlatexmathTeXFormula_initWithOrgScilabForgeJlatexmathTeXParser_withNSString_withBoolean_(self, [self getDollarGroupWithChar:OrgScilabForgeJlatexmathTeXParser_DOLLAR], NO)->root_, style)];
            if (doubleDollar) {
              if ([parseString_ charAtWithInt:pos_] == OrgScilabForgeJlatexmathTeXParser_DOLLAR) {
                pos_++;
              }
            }
          }
          break;
          case OrgScilabForgeJlatexmathTeXParser_ESCAPE:
          at = OrgScilabForgeJlatexmathTeXParser_processEscape(self);
          (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:at];
          if (arrayMode_ && [at isKindOfClass:[OrgScilabForgeJlatexmathHlineAtom class]]) {
            [((OrgScilabForgeJlatexmathArrayOfAtoms *) check_class_cast(formula_, [OrgScilabForgeJlatexmathArrayOfAtoms class])) addRow];
          }
          if (insertion_) {
            insertion_ = NO;
          }
          break;
          case OrgScilabForgeJlatexmathTeXParser_L_GROUP:
          atom = [self getArgument];
          if (atom != nil) {
            atom->type_ = OrgScilabForgeJlatexmathTeXConstants_TYPE_ORDINARY;
          }
          (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:atom];
          break;
          case OrgScilabForgeJlatexmathTeXParser_R_GROUP:
          group_--;
          pos_++;
          if (group_ == -1) @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(JreStrcat("$C$C$", @"Found a closing '", OrgScilabForgeJlatexmathTeXParser_R_GROUP, @"' without an opening '", OrgScilabForgeJlatexmathTeXParser_L_GROUP, @"'!"));
          return;
          case OrgScilabForgeJlatexmathTeXParser_SUPER_SCRIPT:
          (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:OrgScilabForgeJlatexmathTeXParser_getScriptsWithChar_(self, ch)];
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUB_SCRIPT:
          if (ignoreWhiteSpace_) {
            (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:OrgScilabForgeJlatexmathTeXParser_getScriptsWithChar_(self, ch)];
          }
          else {
            (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:new_OrgScilabForgeJlatexmathUnderscoreAtom_init()];
            pos_++;
          }
          break;
          case '&':
          if (!arrayMode_) @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(@"Character '&' is only available in array mode !");
          [((OrgScilabForgeJlatexmathArrayOfAtoms *) nil_chk(((OrgScilabForgeJlatexmathArrayOfAtoms *) check_class_cast(formula_, [OrgScilabForgeJlatexmathArrayOfAtoms class])))) addCol];
          pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_PRIME:
          if (ignoreWhiteSpace_) {
            (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:new_OrgScilabForgeJlatexmathCumulativeScriptsAtom_initWithOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_([self getLastAtom], nil, OrgScilabForgeJlatexmathSymbolAtom_getWithNSString_(@"prime"))];
          }
          else {
            (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:[self convertCharacterWithChar:OrgScilabForgeJlatexmathTeXParser_PRIME withBoolean:YES]];
          }
          pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_BACKPRIME:
          if (ignoreWhiteSpace_) {
            (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:new_OrgScilabForgeJlatexmathCumulativeScriptsAtom_initWithOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_([self getLastAtom], nil, OrgScilabForgeJlatexmathSymbolAtom_getWithNSString_(@"backprime"))];
          }
          else {
            (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:[self convertCharacterWithChar:OrgScilabForgeJlatexmathTeXParser_BACKPRIME withBoolean:YES]];
          }
          pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_DQUOTE:
          if (ignoreWhiteSpace_) {
            (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:new_OrgScilabForgeJlatexmathCumulativeScriptsAtom_initWithOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_([self getLastAtom], nil, OrgScilabForgeJlatexmathSymbolAtom_getWithNSString_(@"prime"))];
            (void) [formula_ addWithOrgScilabForgeJlatexmathAtom:new_OrgScilabForgeJlatexmathCumulativeScriptsAtom_initWithOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_([self getLastAtom], nil, OrgScilabForgeJlatexmathSymbolAtom_getWithNSString_(@"prime"))];
          }
          else {
            (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:[self convertCharacterWithChar:OrgScilabForgeJlatexmathTeXParser_PRIME withBoolean:YES]];
            (void) [formula_ addWithOrgScilabForgeJlatexmathAtom:[self convertCharacterWithChar:OrgScilabForgeJlatexmathTeXParser_PRIME withBoolean:YES]];
          }
          pos_++;
          break;
          default:
          (void) [((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_)) addWithOrgScilabForgeJlatexmathAtom:[self convertCharacterWithChar:ch withBoolean:NO]];
          pos_++;
        }
      }
    }
  }
  if (((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_))->root_ == nil && !arrayMode_) {
    (void) [formula_ addWithOrgScilabForgeJlatexmathAtom:new_OrgScilabForgeJlatexmathEmptyAtom_init()];
  }
}

- (OrgScilabForgeJlatexmathAtom *)getScriptsWithChar:(jchar)f {
  return OrgScilabForgeJlatexmathTeXParser_getScriptsWithChar_(self, f);
}

- (NSString *)getDollarGroupWithChar:(jchar)openclose {
  jint spos = pos_;
  jchar ch;
  do {
    ch = [((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_++];
    if (ch == OrgScilabForgeJlatexmathTeXParser_ESCAPE) {
      pos_++;
    }
  }
  while (pos_ < len_ && ch != openclose);
  if (ch == openclose) {
    return [((JavaLangStringBuffer *) nil_chk(parseString_)) substringWithInt:spos withInt:pos_ - 1];
  }
  else {
    return [((JavaLangStringBuffer *) nil_chk(parseString_)) substringWithInt:spos withInt:pos_];
  }
}

- (NSString *)getGroupWithChar:(jchar)open
                      withChar:(jchar)close {
  if (pos_ == len_) return nil;
  jint group, spos;
  jchar ch = [((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_];
  if (pos_ < len_ && ch == open) {
    group = 1;
    spos = pos_;
    while (pos_ < len_ - 1 && group != 0) {
      pos_++;
      ch = [parseString_ charAtWithInt:pos_];
      if (ch == open) group++;
      else if (ch == close) group--;
      else if (ch == OrgScilabForgeJlatexmathTeXParser_ESCAPE && pos_ != len_ - 1) pos_++;
    }
    pos_++;
    if (group != 0) {
      return [parseString_ substringWithInt:spos + 1 withInt:pos_];
    }
    return [parseString_ substringWithInt:spos + 1 withInt:pos_ - 1];
  }
  else {
    @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(JreStrcat("$C$", @"missing '", open, @"'!"));
  }
}

- (NSString *)getGroupWithNSString:(NSString *)open
                      withNSString:(NSString *)close {
  jint group = 1;
  jint ol = ((jint) [((NSString *) nil_chk(open)) length]), cl = ((jint) [((NSString *) nil_chk(close)) length]);
  jboolean lastO = OrgScilabForgeJlatexmathTeXParser_isValidCharacterInCommandWithChar_(self, [open charAtWithInt:ol - 1]);
  jboolean lastC = OrgScilabForgeJlatexmathTeXParser_isValidCharacterInCommandWithChar_(self, [close charAtWithInt:cl - 1]);
  jint oc = 0, cc = 0;
  jint startC = 0;
  jchar prev = 0x0000;
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  while (pos_ < len_ && group != 0) {
    jchar c = [((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_];
    jchar c1;
    if (prev != OrgScilabForgeJlatexmathTeXParser_ESCAPE && c == ' ') {
      while (pos_ < len_ && [parseString_ charAtWithInt:pos_++] == ' ') {
        (void) [buf appendWithChar:' '];
      }
      c = [parseString_ charAtWithInt:--pos_];
      if (OrgScilabForgeJlatexmathTeXParser_isValidCharacterInCommandWithChar_(self, prev) && OrgScilabForgeJlatexmathTeXParser_isValidCharacterInCommandWithChar_(self, c)) {
        oc = cc = 0;
      }
    }
    if (c == [open charAtWithInt:oc]) oc++;
    else oc = 0;
    if (c == [close charAtWithInt:cc]) {
      if (cc == 0) {
        startC = pos_;
      }
      cc++;
    }
    else cc = 0;
    if (pos_ + 1 < len_) {
      c1 = [parseString_ charAtWithInt:pos_ + 1];
      if (oc == ol) {
        if (!lastO || !OrgScilabForgeJlatexmathTeXParser_isValidCharacterInCommandWithChar_(self, c1)) {
          group++;
        }
        oc = 0;
      }
      if (cc == cl) {
        if (!lastC || !OrgScilabForgeJlatexmathTeXParser_isValidCharacterInCommandWithChar_(self, c1)) {
          group--;
        }
        cc = 0;
      }
    }
    else {
      if (oc == ol) {
        group++;
        oc = 0;
      }
      if (cc == cl) {
        group--;
        cc = 0;
      }
    }
    prev = c;
    (void) [buf appendWithChar:c];
    pos_++;
  }
  if (group != 0) {
    if (isPartial_) {
      return [buf description];
    }
    @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(JreStrcat("$$$$", @"The token ", open, @" must be closed by ", close));
  }
  return [buf substringWithInt:0 withInt:[buf length] - pos_ + startC];
}

- (OrgScilabForgeJlatexmathAtom *)getArgument {
  OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(self);
  jchar ch;
  if (pos_ < len_) {
    ch = [((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_];
  }
  else {
    return new_OrgScilabForgeJlatexmathEmptyAtom_init();
  }
  if (ch == OrgScilabForgeJlatexmathTeXParser_L_GROUP) {
    OrgScilabForgeJlatexmathTeXFormula *tf = new_OrgScilabForgeJlatexmathTeXFormula_init();
    OrgScilabForgeJlatexmathTeXFormula *sformula = self->formula_;
    self->formula_ = tf;
    pos_++;
    group_++;
    [self parse];
    self->formula_ = sformula;
    if (((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(self->formula_))->root_ == nil) {
      OrgScilabForgeJlatexmathRowAtom *at = new_OrgScilabForgeJlatexmathRowAtom_init();
      [at addWithOrgScilabForgeJlatexmathAtom:tf->root_];
      return at;
    }
    return tf->root_;
  }
  if (ch == OrgScilabForgeJlatexmathTeXParser_ESCAPE) {
    OrgScilabForgeJlatexmathAtom *at = OrgScilabForgeJlatexmathTeXParser_processEscape(self);
    if (insertion_) {
      insertion_ = NO;
      return [self getArgument];
    }
    return at;
  }
  OrgScilabForgeJlatexmathAtom *at = [self convertCharacterWithChar:ch withBoolean:YES];
  pos_++;
  return at;
}

- (NSString *)getOverArgument {
  if (pos_ == len_) return nil;
  jint ogroup = 1, spos;
  jchar ch = 0x0000;
  spos = pos_;
  while (pos_ < len_ && ogroup != 0) {
    ch = [((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_];
    switch (ch) {
      case OrgScilabForgeJlatexmathTeXParser_L_GROUP:
      ogroup++;
      break;
      case '&':
      if (ogroup == 1) {
        ogroup--;
      }
      break;
      case OrgScilabForgeJlatexmathTeXParser_R_GROUP:
      ogroup--;
      break;
      case OrgScilabForgeJlatexmathTeXParser_ESCAPE:
      pos_++;
      if (pos_ < len_ && [parseString_ charAtWithInt:pos_] == '\\' && ogroup == 1) {
        ogroup--;
        pos_--;
      }
      else if (pos_ < len_ - 1 && [parseString_ charAtWithInt:pos_] == 'c' && [parseString_ charAtWithInt:pos_ + 1] == 'r' && ogroup == 1) {
        ogroup--;
        pos_--;
      }
      break;
    }
    pos_++;
  }
  if (ogroup >= 2) @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(@"Illegal end,  missing '}' !");
  NSString *str;
  if (ogroup == 0) {
    str = [((JavaLangStringBuffer *) nil_chk(parseString_)) substringWithInt:spos withInt:pos_ - 1];
  }
  else {
    str = [((JavaLangStringBuffer *) nil_chk(parseString_)) substringWithInt:spos withInt:pos_];
    ch = 0x0000;
  }
  if (ch == '&' || ch == '\\' || ch == OrgScilabForgeJlatexmathTeXParser_R_GROUP) pos_--;
  return str;
}

- (IOSFloatArray *)getLength {
  if (pos_ == len_) return nil;
  jint ogroup = 1, spos;
  jchar ch = 0x0000;
  OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(self);
  spos = pos_;
  while (pos_ < len_ && ch != ' ') {
    ch = [((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_++];
  }
  OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(self);
  return OrgScilabForgeJlatexmathSpaceAtom_getLengthWithNSString_([((JavaLangStringBuffer *) nil_chk(parseString_)) substringWithInt:spos withInt:pos_ - 1]);
}

- (OrgScilabForgeJlatexmathAtom *)convertCharacterWithChar:(jchar)c
                                               withBoolean:(jboolean)oneChar {
  if (ignoreWhiteSpace_) {
    if (c >= 945 && c <= 969) {
      return OrgScilabForgeJlatexmathSymbolAtom_getWithNSString_(IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathTeXFormula_get_symbolMappings_()), c));
    }
    else if (c >= 913 && c <= 937) {
      return new_OrgScilabForgeJlatexmathTeXFormula_initWithNSString_(IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathTeXFormula_get_symbolFormulaMappings_()), c))->root_;
    }
  }
  c = OrgScilabForgeJlatexmathTeXParser_convertToRomanNumberWithChar_(c);
  if (((c < '0' || c > '9') && (c < 'a' || c > 'z') && (c < 'A' || c > 'Z'))) {
    OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock *block = OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_ofWithChar_(c);
    if (!OrgScilabForgeJlatexmathTeXParser_isLoading_ && ![((id<JavaUtilList>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_get_loadedAlphabets_())) containsWithId:block]) {
      OrgScilabForgeJlatexmathDefaultTeXFont_addAlphabetWithOrgScilabForgeJlatexmathAlphabetRegistration_([((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathDefaultTeXFont_get_registeredAlphabets_())) getWithId:block]);
    }
    NSString *symbolName = IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathTeXFormula_get_symbolMappings_()), c);
    if (symbolName == nil && (OrgScilabForgeJlatexmathTeXFormula_get_symbolFormulaMappings_() == nil || IOSObjectArray_Get(OrgScilabForgeJlatexmathTeXFormula_get_symbolFormulaMappings_(), c) == nil)) {
      OrgScilabForgeJlatexmathTeXFormula_FontInfos *fontInfos = nil;
      jboolean isLatin = [((OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock *) nil_chk(OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_get_BASIC_LATIN_())) isEqual:block];
      if ((isLatin && OrgScilabForgeJlatexmathTeXFormula_isRegisteredBlockWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_(OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_get_BASIC_LATIN_())) || !isLatin) {
        fontInfos = OrgScilabForgeJlatexmathTeXFormula_getExternalFontWithOrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_(block);
      }
      if (fontInfos != nil) {
        if (oneChar) {
          return new_OrgScilabForgeJlatexmathJavaFontRenderingAtom_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_FontInfos_(OrgScilabForgeJlatexmathCharacterCharacter_toStringWithChar_(c), fontInfos);
        }
        jint start = pos_++;
        jint end = len_ - 1;
        while (pos_ < len_) {
          c = [((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_];
          if (![((OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock *) nil_chk(OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_ofWithChar_(c))) isEqual:block]) {
            end = --pos_;
            break;
          }
          pos_++;
        }
        return new_OrgScilabForgeJlatexmathJavaFontRenderingAtom_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_FontInfos_([((JavaLangStringBuffer *) nil_chk(parseString_)) substringWithInt:start withInt:end + 1], fontInfos);
      }
      if (!isPartial_) {
        @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(JreStrcat("$$$IC", @"Unknown character : '", OrgScilabForgeJlatexmathCharacterCharacter_toStringWithChar_(c), @"' (or ", ((jint) c), ')'));
      }
      else {
        return new_OrgScilabForgeJlatexmathColorAtom_initWithOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathPlatformGraphicsColor_withOrgScilabForgeJlatexmathPlatformGraphicsColor_(new_OrgScilabForgeJlatexmathRomanAtom_initWithOrgScilabForgeJlatexmathAtom_(new_OrgScilabForgeJlatexmathTeXFormula_initWithNSString_(JreStrcat("$I$", @"\\text{(Unknown char ", ((jint) c), @")}"))->root_), nil, OrgScilabForgeJlatexmathColorUtil_get_RED_());
      }
    }
    else {
      if (!ignoreWhiteSpace_) {
        if (IOSObjectArray_Get(nil_chk(OrgScilabForgeJlatexmathTeXFormula_get_symbolTextMappings_()), c) != nil) {
          return [((OrgScilabForgeJlatexmathSymbolAtom *) nil_chk(OrgScilabForgeJlatexmathSymbolAtom_getWithNSString_(IOSObjectArray_Get(OrgScilabForgeJlatexmathTeXFormula_get_symbolTextMappings_(), c)))) setUnicodeWithChar:c];
        }
      }
      if (OrgScilabForgeJlatexmathTeXFormula_get_symbolFormulaMappings_() != nil && IOSObjectArray_Get(OrgScilabForgeJlatexmathTeXFormula_get_symbolFormulaMappings_(), c) != nil) {
        return new_OrgScilabForgeJlatexmathTeXFormula_initWithNSString_(IOSObjectArray_Get(OrgScilabForgeJlatexmathTeXFormula_get_symbolFormulaMappings_(), c))->root_;
      }
      @try {
        return OrgScilabForgeJlatexmathSymbolAtom_getWithNSString_(symbolName);
      }
      @catch (OrgScilabForgeJlatexmathExceptionSymbolNotFoundException *e) {
        @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$$", @"The character '", OrgScilabForgeJlatexmathCharacterCharacter_toStringWithChar_(c), @"' was mapped to an unknown symbol with the name '", symbolName, @"'!"), e);
      }
    }
  }
  else {
    OrgScilabForgeJlatexmathTeXFormula_FontInfos *fontInfos = [((id<JavaUtilMap>) nil_chk(OrgScilabForgeJlatexmathTeXFormula_get_externalFontMap_())) getWithId:OrgScilabForgeJlatexmathCharacterCharacter_UnicodeBlock_get_BASIC_LATIN_()];
    if (fontInfos != nil) {
      if (oneChar) {
        return new_OrgScilabForgeJlatexmathJavaFontRenderingAtom_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_FontInfos_(OrgScilabForgeJlatexmathCharacterCharacter_toStringWithChar_(c), fontInfos);
      }
      jint start = pos_++;
      jint end = len_ - 1;
      while (pos_ < len_) {
        c = [((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_];
        if (((c < '0' || c > '9') && (c < 'a' || c > 'z') && (c < 'A' || c > 'Z'))) {
          end = --pos_;
          break;
        }
        pos_++;
      }
      return new_OrgScilabForgeJlatexmathJavaFontRenderingAtom_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_FontInfos_([((JavaLangStringBuffer *) nil_chk(parseString_)) substringWithInt:start withInt:end + 1], fontInfos);
    }
    return new_OrgScilabForgeJlatexmathCharAtom_initWithChar_withNSString_(c, ((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(formula_))->textStyle_);
  }
}

- (NSString *)getCommand {
  return OrgScilabForgeJlatexmathTeXParser_getCommand(self);
}

- (OrgScilabForgeJlatexmathAtom *)processEscape {
  return OrgScilabForgeJlatexmathTeXParser_processEscape(self);
}

- (void)insertWithInt:(jint)beg
              withInt:(jint)end
         withNSString:(NSString *)formula {
  OrgScilabForgeJlatexmathTeXParser_insertWithInt_withInt_withNSString_(self, beg, end, formula);
}

- (IOSObjectArray *)getOptsArgsWithInt:(jint)nbArgs
                               withInt:(jint)opts {
  IOSObjectArray *args = [IOSObjectArray newArrayWithLength:nbArgs + 10 + 1 type:NSString_class_()];
  if (nbArgs != 0) {
    if (opts == 1) {
      jint j = nbArgs + 1;
      @try {
        for (; j < nbArgs + 11; j++) {
          OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(self);
          (void) IOSObjectArray_Set(args, j, [self getGroupWithChar:OrgScilabForgeJlatexmathTeXParser_L_BRACK withChar:OrgScilabForgeJlatexmathTeXParser_R_BRACK]);
        }
      }
      @catch (OrgScilabForgeJlatexmathExceptionParseException *e) {
        (void) IOSObjectArray_Set(args, j, nil);
      }
    }
    OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(self);
    @try {
      (void) IOSObjectArray_Set(args, 1, [self getGroupWithChar:OrgScilabForgeJlatexmathTeXParser_L_GROUP withChar:OrgScilabForgeJlatexmathTeXParser_R_GROUP]);
    }
    @catch (OrgScilabForgeJlatexmathExceptionParseException *e) {
      if ([((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_] != '\\') {
        (void) IOSObjectArray_Set(args, 1, JreStrcat("C", [parseString_ charAtWithInt:pos_]));
        pos_++;
      }
      else (void) IOSObjectArray_Set(args, 1, OrgScilabForgeJlatexmathTeXParser_getCommandWithArgsWithNSString_(self, OrgScilabForgeJlatexmathTeXParser_getCommand(self)));
    }
    if (opts == 2) {
      jint j = nbArgs + 1;
      @try {
        for (; j < nbArgs + 11; j++) {
          OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(self);
          (void) IOSObjectArray_Set(args, j, [self getGroupWithChar:OrgScilabForgeJlatexmathTeXParser_L_BRACK withChar:OrgScilabForgeJlatexmathTeXParser_R_BRACK]);
        }
      }
      @catch (OrgScilabForgeJlatexmathExceptionParseException *e) {
        (void) IOSObjectArray_Set(args, j, nil);
      }
    }
    for (jint i = 2; i <= nbArgs; i++) {
      OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(self);
      @try {
        (void) IOSObjectArray_Set(args, i, [self getGroupWithChar:OrgScilabForgeJlatexmathTeXParser_L_GROUP withChar:OrgScilabForgeJlatexmathTeXParser_R_GROUP]);
      }
      @catch (OrgScilabForgeJlatexmathExceptionParseException *e) {
        if ([((JavaLangStringBuffer *) nil_chk(parseString_)) charAtWithInt:pos_] != '\\') {
          (void) IOSObjectArray_Set(args, i, JreStrcat("C", [parseString_ charAtWithInt:pos_]));
          pos_++;
        }
        else {
          (void) IOSObjectArray_Set(args, i, OrgScilabForgeJlatexmathTeXParser_getCommandWithArgsWithNSString_(self, OrgScilabForgeJlatexmathTeXParser_getCommand(self)));
        }
      }
    }
    if (ignoreWhiteSpace_) {
      OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(self);
    }
  }
  return args;
}

- (NSString *)getCommandWithArgsWithNSString:(NSString *)command {
  return OrgScilabForgeJlatexmathTeXParser_getCommandWithArgsWithNSString_(self, command);
}

- (OrgScilabForgeJlatexmathAtom *)processCommandsWithNSString:(NSString *)command {
  return OrgScilabForgeJlatexmathTeXParser_processCommandsWithNSString_(self, command);
}

- (jboolean)isValidNameWithNSString:(NSString *)com {
  if (com == nil || [@"" isEqual:com]) {
    return NO;
  }
  jchar c = 0x0000;
  if ([((NSString *) nil_chk(com)) charAtWithInt:0] == '\\') {
    jint pos = 1;
    jint len = ((jint) [com length]);
    while (pos < len) {
      c = [com charAtWithInt:pos];
      if (!JavaLangCharacter_isLetterWithChar_(c) && (atIsLetter_ == 0 || c != '@')) break;
      pos++;
    }
  }
  else {
    return NO;
  }
  return JavaLangCharacter_isLetterWithChar_(c);
}

- (jboolean)isValidCharacterInCommandWithChar:(jchar)ch {
  return OrgScilabForgeJlatexmathTeXParser_isValidCharacterInCommandWithChar_(self, ch);
}

- (void)skipWhiteSpace {
  OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(self);
}

+ (jchar)convertToRomanNumberWithChar:(jchar)c {
  return OrgScilabForgeJlatexmathTeXParser_convertToRomanNumberWithChar_(c);
}

+ (void)initialize {
  if (self == [OrgScilabForgeJlatexmathTeXParser class]) {
    OrgScilabForgeJlatexmathTeXParser_unparsedContents_ = new_JavaUtilHashSet_initWithInt_(6);
    {
      [OrgScilabForgeJlatexmathTeXParser_unparsedContents_ addWithId:@"jlmDynamic"];
      [OrgScilabForgeJlatexmathTeXParser_unparsedContents_ addWithId:@"jlmText"];
      [OrgScilabForgeJlatexmathTeXParser_unparsedContents_ addWithId:@"jlmTextit"];
      [OrgScilabForgeJlatexmathTeXParser_unparsedContents_ addWithId:@"jlmTextbf"];
      [OrgScilabForgeJlatexmathTeXParser_unparsedContents_ addWithId:@"jlmTextitbf"];
      [OrgScilabForgeJlatexmathTeXParser_unparsedContents_ addWithId:@"jlmExternalFont"];
    }
    J2OBJC_SET_INITIALIZED(OrgScilabForgeJlatexmathTeXParser)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withOrgScilabForgeJlatexmathTeXFormula:", "TeXParser", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withNSString:withOrgScilabForgeJlatexmathTeXFormula:", "TeXParser", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withNSString:withOrgScilabForgeJlatexmathTeXFormula:withBoolean:", "TeXParser", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withOrgScilabForgeJlatexmathTeXFormula:withBoolean:", "TeXParser", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withNSString:withOrgScilabForgeJlatexmathArrayOfAtoms:withBoolean:", "TeXParser", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withNSString:withOrgScilabForgeJlatexmathArrayOfAtoms:withBoolean:withBoolean:", "TeXParser", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withOrgScilabForgeJlatexmathArrayOfAtoms:withBoolean:", "TeXParser", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withNSString:withOrgScilabForgeJlatexmathTeXFormula:withBoolean:withBoolean:", "TeXParser", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withOrgScilabForgeJlatexmathTeXFormula:withBoolean:withBoolean:", "TeXParser", NULL, 0x1, NULL, NULL },
    { "resetWithNSString:", "reset", "V", 0x1, NULL, NULL },
    { "getIsPartial", NULL, "Z", 0x1, NULL, NULL },
    { "getLine", NULL, "I", 0x1, NULL, NULL },
    { "getCol", NULL, "I", 0x1, NULL, NULL },
    { "getLastAtom", NULL, "Lorg.scilab.forge.jlatexmath.Atom;", 0x1, NULL, NULL },
    { "getFormulaAtom", NULL, "Lorg.scilab.forge.jlatexmath.Atom;", 0x1, NULL, NULL },
    { "addAtomWithOrgScilabForgeJlatexmathAtom:", "addAtom", "V", 0x1, NULL, NULL },
    { "makeAtLetter", NULL, "V", 0x1, NULL, NULL },
    { "makeAtOther", NULL, "V", 0x1, NULL, NULL },
    { "isAtLetter", NULL, "Z", 0x1, NULL, NULL },
    { "isArrayMode", NULL, "Z", 0x1, NULL, NULL },
    { "setArrayModeWithBoolean:", "setArrayMode", "V", 0x1, NULL, NULL },
    { "isIgnoreWhiteSpace", NULL, "Z", 0x1, NULL, NULL },
    { "isMathMode", NULL, "Z", 0x1, NULL, NULL },
    { "getPos", NULL, "I", 0x1, NULL, NULL },
    { "rewindWithInt:", "rewind", "I", 0x1, NULL, NULL },
    { "getStringFromCurrentPos", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "finish", NULL, "V", 0x1, NULL, NULL },
    { "addRow", NULL, "V", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "firstpass", NULL, "V", 0x2, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "parse", NULL, "V", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "getScriptsWithChar:", "getScripts", "Lorg.scilab.forge.jlatexmath.Atom;", 0x2, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "getDollarGroupWithChar:", "getDollarGroup", "Ljava.lang.String;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "getGroupWithChar:withChar:", "getGroup", "Ljava.lang.String;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "getGroupWithNSString:withNSString:", "getGroup", "Ljava.lang.String;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "getArgument", NULL, "Lorg.scilab.forge.jlatexmath.Atom;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "getOverArgument", NULL, "Ljava.lang.String;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "getLength", NULL, "[F", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "convertCharacterWithChar:withBoolean:", "convertCharacter", "Lorg.scilab.forge.jlatexmath.Atom;", 0x1, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "getCommand", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "processEscape", NULL, "Lorg.scilab.forge.jlatexmath.Atom;", 0x2, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "insertWithInt:withInt:withNSString:", "insert", "V", 0x2, NULL, NULL },
    { "getOptsArgsWithInt:withInt:", "getOptsArgs", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCommandWithArgsWithNSString:", "getCommandWithArgs", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "processCommandsWithNSString:", "processCommands", "Lorg.scilab.forge.jlatexmath.Atom;", 0x2, "Lorg.scilab.forge.jlatexmath.exception.ParseException;", NULL },
    { "isValidNameWithNSString:", "isValidName", "Z", 0x11, NULL, NULL },
    { "isValidCharacterInCommandWithChar:", "isValidCharacterInCommand", "Z", 0x11, NULL, NULL },
    { "skipWhiteSpace", NULL, "V", 0x12, NULL, NULL },
    { "convertToRomanNumberWithChar:", "convertToRomanNumber", "C", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "formula_", NULL, 0x0, "Lorg.scilab.forge.jlatexmath.TeXFormula;", NULL, NULL,  },
    { "parseString_", NULL, 0x2, "Ljava.lang.StringBuffer;", NULL, NULL,  },
    { "pos_", NULL, 0x2, "I", NULL, NULL,  },
    { "spos_", NULL, 0x2, "I", NULL, NULL,  },
    { "line_", NULL, 0x2, "I", NULL, NULL,  },
    { "col_", NULL, 0x2, "I", NULL, NULL,  },
    { "len_", NULL, 0x2, "I", NULL, NULL,  },
    { "group_", NULL, 0x2, "I", NULL, NULL,  },
    { "insertion_", NULL, 0x2, "Z", NULL, NULL,  },
    { "atIsLetter_", NULL, 0x2, "I", NULL, NULL,  },
    { "arrayMode_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ignoreWhiteSpace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isPartial_", NULL, 0x2, "Z", NULL, NULL,  },
    { "autoNumberBreaking_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ESCAPE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_ESCAPE },
    { "L_GROUP_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_L_GROUP },
    { "R_GROUP_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_R_GROUP },
    { "L_BRACK_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_L_BRACK },
    { "R_BRACK_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_R_BRACK },
    { "DOLLAR_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_DOLLAR },
    { "DQUOTE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_DQUOTE },
    { "PERCENT_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_PERCENT },
    { "OVER_DEL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathTeXParser_OVER_DEL },
    { "UNDER_DEL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgScilabForgeJlatexmathTeXParser_UNDER_DEL },
    { "SUB_SCRIPT_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUB_SCRIPT },
    { "SUPER_SCRIPT_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPER_SCRIPT },
    { "PRIME_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_PRIME },
    { "BACKPRIME_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_BACKPRIME },
    { "DEGRE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_DEGRE },
    { "SUPZERO_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPZERO },
    { "SUPONE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPONE },
    { "SUPTWO_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPTWO },
    { "SUPTHREE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPTHREE },
    { "SUPFOUR_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPFOUR },
    { "SUPFIVE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPFIVE },
    { "SUPSIX_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPSIX },
    { "SUPSEVEN_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPSEVEN },
    { "SUPEIGHT_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPEIGHT },
    { "SUPNINE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPNINE },
    { "SUPPLUS_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPPLUS },
    { "SUPMINUS_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPMINUS },
    { "SUPEQUAL_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPEQUAL },
    { "SUPLPAR_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPLPAR },
    { "SUPRPAR_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPRPAR },
    { "SUPN_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUPN },
    { "SUBZERO_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBZERO },
    { "SUBONE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBONE },
    { "SUBTWO_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBTWO },
    { "SUBTHREE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBTHREE },
    { "SUBFOUR_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBFOUR },
    { "SUBFIVE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBFIVE },
    { "SUBSIX_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBSIX },
    { "SUBSEVEN_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBSEVEN },
    { "SUBEIGHT_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBEIGHT },
    { "SUBNINE_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBNINE },
    { "SUBPLUS_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBPLUS },
    { "SUBMINUS_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBMINUS },
    { "SUBEQUAL_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBEQUAL },
    { "SUBLPAR_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBLPAR },
    { "SUBRPAR_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = OrgScilabForgeJlatexmathTeXParser_SUBRPAR },
    { "isLoading_", NULL, 0xc, "Z", &OrgScilabForgeJlatexmathTeXParser_isLoading_, NULL,  },
    { "unparsedContents_", NULL, 0x1a, "Ljava.util.Set;", &OrgScilabForgeJlatexmathTeXParser_unparsedContents_, "Ljava/util/Set<Ljava/lang/String;>;",  },
  };
  static const J2ObjcClassInfo _OrgScilabForgeJlatexmathTeXParser = { 2, "TeXParser", "org.scilab.forge.jlatexmath", NULL, 0x1, 48, methods, 62, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgScilabForgeJlatexmathTeXParser;
}

@end

void OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_(OrgScilabForgeJlatexmathTeXParser *self, NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula) {
  (void) OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, parseString, formula, YES);
}

OrgScilabForgeJlatexmathTeXParser *new_OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_(NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula) {
  OrgScilabForgeJlatexmathTeXParser *self = [OrgScilabForgeJlatexmathTeXParser alloc];
  OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_(self, parseString, formula);
  return self;
}

void OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_(OrgScilabForgeJlatexmathTeXParser *self, jboolean isPartial, NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula) {
  (void) OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, parseString, formula, NO);
  self->isPartial_ = isPartial;
  OrgScilabForgeJlatexmathTeXParser_firstpass(self);
}

OrgScilabForgeJlatexmathTeXParser *new_OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_(jboolean isPartial, NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula) {
  OrgScilabForgeJlatexmathTeXParser *self = [OrgScilabForgeJlatexmathTeXParser alloc];
  OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_(self, isPartial, parseString, formula);
  return self;
}

void OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(OrgScilabForgeJlatexmathTeXParser *self, jboolean isPartial, NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula, jboolean firstpass) {
  (void) NSObject_init(self);
  self->ignoreWhiteSpace_ = YES;
  self->formula_ = formula;
  self->isPartial_ = isPartial;
  if (parseString != nil) {
    self->parseString_ = new_JavaLangStringBuffer_initWithNSString_(parseString);
    self->len_ = ((jint) [parseString length]);
    self->pos_ = 0;
    if (firstpass) {
      OrgScilabForgeJlatexmathTeXParser_firstpass(self);
    }
  }
  else {
    self->parseString_ = nil;
    self->pos_ = 0;
    self->len_ = 0;
  }
}

OrgScilabForgeJlatexmathTeXParser *new_OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(jboolean isPartial, NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula, jboolean firstpass) {
  OrgScilabForgeJlatexmathTeXParser *self = [OrgScilabForgeJlatexmathTeXParser alloc];
  OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, isPartial, parseString, formula, firstpass);
  return self;
}

void OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(OrgScilabForgeJlatexmathTeXParser *self, NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula, jboolean firstpass) {
  (void) OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, NO, parseString, formula, firstpass);
}

OrgScilabForgeJlatexmathTeXParser *new_OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula, jboolean firstpass) {
  OrgScilabForgeJlatexmathTeXParser *self = [OrgScilabForgeJlatexmathTeXParser alloc];
  OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, parseString, formula, firstpass);
  return self;
}

void OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_(OrgScilabForgeJlatexmathTeXParser *self, jboolean isPartial, NSString *parseString, OrgScilabForgeJlatexmathArrayOfAtoms *aoa, jboolean firstpass) {
  (void) OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, isPartial, parseString, aoa, firstpass);
  self->arrayMode_ = YES;
}

OrgScilabForgeJlatexmathTeXParser *new_OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_(jboolean isPartial, NSString *parseString, OrgScilabForgeJlatexmathArrayOfAtoms *aoa, jboolean firstpass) {
  OrgScilabForgeJlatexmathTeXParser *self = [OrgScilabForgeJlatexmathTeXParser alloc];
  OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_(self, isPartial, parseString, aoa, firstpass);
  return self;
}

void OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_withBoolean_(OrgScilabForgeJlatexmathTeXParser *self, jboolean isPartial, NSString *parseString, OrgScilabForgeJlatexmathArrayOfAtoms *aoa, jboolean firstpass, jboolean space) {
  (void) OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_withBoolean_(self, isPartial, parseString, aoa, firstpass, space);
  self->arrayMode_ = YES;
}

OrgScilabForgeJlatexmathTeXParser *new_OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_withBoolean_(jboolean isPartial, NSString *parseString, OrgScilabForgeJlatexmathArrayOfAtoms *aoa, jboolean firstpass, jboolean space) {
  OrgScilabForgeJlatexmathTeXParser *self = [OrgScilabForgeJlatexmathTeXParser alloc];
  OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_withBoolean_(self, isPartial, parseString, aoa, firstpass, space);
  return self;
}

void OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_(OrgScilabForgeJlatexmathTeXParser *self, NSString *parseString, OrgScilabForgeJlatexmathArrayOfAtoms *aoa, jboolean firstpass) {
  (void) OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, NO, parseString, aoa, firstpass);
}

OrgScilabForgeJlatexmathTeXParser *new_OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_(NSString *parseString, OrgScilabForgeJlatexmathArrayOfAtoms *aoa, jboolean firstpass) {
  OrgScilabForgeJlatexmathTeXParser *self = [OrgScilabForgeJlatexmathTeXParser alloc];
  OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathArrayOfAtoms_withBoolean_(self, parseString, aoa, firstpass);
  return self;
}

void OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_withBoolean_(OrgScilabForgeJlatexmathTeXParser *self, jboolean isPartial, NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula, jboolean firstpass, jboolean space) {
  (void) OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, isPartial, parseString, formula, firstpass);
  self->ignoreWhiteSpace_ = space;
}

OrgScilabForgeJlatexmathTeXParser *new_OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_withBoolean_(jboolean isPartial, NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula, jboolean firstpass, jboolean space) {
  OrgScilabForgeJlatexmathTeXParser *self = [OrgScilabForgeJlatexmathTeXParser alloc];
  OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_withBoolean_(self, isPartial, parseString, formula, firstpass, space);
  return self;
}

void OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_withBoolean_(OrgScilabForgeJlatexmathTeXParser *self, NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula, jboolean firstpass, jboolean space) {
  (void) OrgScilabForgeJlatexmathTeXParser_initWithBoolean_withNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_(self, NO, parseString, formula, firstpass);
  self->ignoreWhiteSpace_ = space;
}

OrgScilabForgeJlatexmathTeXParser *new_OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_withBoolean_(NSString *parseString, OrgScilabForgeJlatexmathTeXFormula *formula, jboolean firstpass, jboolean space) {
  OrgScilabForgeJlatexmathTeXParser *self = [OrgScilabForgeJlatexmathTeXParser alloc];
  OrgScilabForgeJlatexmathTeXParser_initWithNSString_withOrgScilabForgeJlatexmathTeXFormula_withBoolean_withBoolean_(self, parseString, formula, firstpass, space);
  return self;
}

void OrgScilabForgeJlatexmathTeXParser_firstpass(OrgScilabForgeJlatexmathTeXParser *self) {
  if (self->len_ != 0) {
    jchar ch;
    NSString *com;
    jint spos;
    IOSObjectArray *args;
    OrgScilabForgeJlatexmathMacroInfo *mac;
    while (self->pos_ < self->len_) {
      ch = [((JavaLangStringBuffer *) nil_chk(self->parseString_)) charAtWithInt:self->pos_];
      {
        jchar chr;
        switch (ch) {
          case OrgScilabForgeJlatexmathTeXParser_ESCAPE:
          spos = self->pos_;
          com = OrgScilabForgeJlatexmathTeXParser_getCommand(self);
          if ([@"newcommand" isEqual:com] || [@"renewcommand" isEqual:com]) {
            args = [self getOptsArgsWithInt:2 withInt:2];
            mac = [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathMacroInfo_get_Commands_())) getWithId:com];
            @try {
              (void) [((OrgScilabForgeJlatexmathMacroInfo *) nil_chk(mac)) invokeWithOrgScilabForgeJlatexmathTeXParser:self withNSStringArray:args];
            }
            @catch (OrgScilabForgeJlatexmathExceptionParseException *e) {
              if (!self->isPartial_) {
                @throw e;
              }
            }
            (void) [self->parseString_ delete__WithInt:spos withInt:self->pos_];
            self->len_ = [self->parseString_ length];
            self->pos_ = spos;
          }
          else if (OrgScilabForgeJlatexmathNewCommandMacro_isMacroWithNSString_(com)) {
            mac = [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathMacroInfo_get_Commands_())) getWithId:com];
            args = [self getOptsArgsWithInt:((OrgScilabForgeJlatexmathMacroInfo *) nil_chk(mac))->nbArgs_ withInt:mac->hasOptions_ ? 1 : 0];
            (void) IOSObjectArray_Set(nil_chk(args), 0, com);
            @try {
              (void) [self->parseString_ replaceWithInt:spos withInt:self->pos_ withNSString:(NSString *) check_class_cast([mac invokeWithOrgScilabForgeJlatexmathTeXParser:self withNSStringArray:args], [NSString class])];
            }
            @catch (OrgScilabForgeJlatexmathExceptionParseException *e) {
              if (!self->isPartial_) {
                @throw e;
              }
              else {
                spos += ((jint) [((NSString *) nil_chk(com)) length]) + 1;
              }
            }
            self->len_ = [self->parseString_ length];
            self->pos_ = spos;
          }
          else if ([@"begin" isEqual:com]) {
            args = [self getOptsArgsWithInt:1 withInt:0];
            mac = [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathMacroInfo_get_Commands_())) getWithId:JreStrcat("$$", IOSObjectArray_Get(nil_chk(args), 1), @"@env")];
            if (mac == nil) {
              if (!self->isPartial_) {
                @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(JreStrcat("$$$ICI", @"Unknown environment: ", IOSObjectArray_Get(args, 1), @" at position ", [self getLine], ':', [self getCol]));
              }
            }
            else {
              @try {
                IOSObjectArray *optarg = [self getOptsArgsWithInt:mac->nbArgs_ - 1 withInt:0];
                NSString *grp = [self getGroupWithNSString:JreStrcat("$$C", @"\\begin{", IOSObjectArray_Get(args, 1), '}') withNSString:JreStrcat("$$C", @"\\end{", IOSObjectArray_Get(args, 1), '}')];
                NSString *expr = JreStrcat("$$$", @"{\\makeatletter \\", IOSObjectArray_Get(args, 1), @"@env");
                for (jint i = 1; i <= mac->nbArgs_ - 1; i++) expr = JreStrcat("$$", expr, JreStrcat("C$C", '{', IOSObjectArray_Get(nil_chk(optarg), i), '}'));
                expr = JreStrcat("$$", expr, JreStrcat("C$$", '{', grp, @"}\\makeatother}"));
                (void) [self->parseString_ replaceWithInt:spos withInt:self->pos_ withNSString:expr];
                self->len_ = [self->parseString_ length];
                self->pos_ = spos;
              }
              @catch (OrgScilabForgeJlatexmathExceptionParseException *e) {
                if (!self->isPartial_) {
                  @throw e;
                }
              }
            }
          }
          else if ([@"makeatletter" isEqual:com]) self->atIsLetter_++;
          else if ([@"makeatother" isEqual:com]) self->atIsLetter_--;
          else if ([((id<JavaUtilSet>) nil_chk(OrgScilabForgeJlatexmathTeXParser_unparsedContents_)) containsWithId:com]) {
            (void) [self getOptsArgsWithInt:1 withInt:0];
          }
          break;
          case OrgScilabForgeJlatexmathTeXParser_PERCENT:
          spos = self->pos_++;
          while (self->pos_ < self->len_) {
            chr = [self->parseString_ charAtWithInt:self->pos_++];
            if (chr == 0x000d || chr == 0x000a) {
              break;
            }
          }
          if (self->pos_ < self->len_) {
            self->pos_--;
          }
          (void) [self->parseString_ replaceWithInt:spos withInt:self->pos_ withNSString:@""];
          self->len_ = [self->parseString_ length];
          self->pos_ = spos;
          break;
          case OrgScilabForgeJlatexmathTeXParser_DEGRE:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"^\\circ"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPTWO:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{2}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPTHREE:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{3}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPONE:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{1}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPZERO:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{0}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPFOUR:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{4}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPFIVE:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{5}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPSIX:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{6}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPSEVEN:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{7}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPEIGHT:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{8}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPNINE:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{9}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPPLUS:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{+}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPMINUS:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{-}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPEQUAL:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{=}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPLPAR:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{(}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPRPAR:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{)}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUPN:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsup{n}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBTWO:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{2}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBTHREE:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{3}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBONE:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{1}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBZERO:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{0}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBFOUR:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{4}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBFIVE:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{5}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBSIX:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{6}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBSEVEN:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{7}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBEIGHT:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{8}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBNINE:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{9}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBPLUS:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{+}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBMINUS:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{-}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBEQUAL:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{=}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBLPAR:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{(}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          case OrgScilabForgeJlatexmathTeXParser_SUBRPAR:
          (void) [self->parseString_ replaceWithInt:self->pos_ withInt:self->pos_ + 1 withNSString:@"\\jlatexmathcumsub{)}"];
          self->len_ = [self->parseString_ length];
          self->pos_++;
          break;
          default:
          self->pos_++;
        }
      }
    }
    self->pos_ = 0;
    self->len_ = [((JavaLangStringBuffer *) nil_chk(self->parseString_)) length];
  }
}

OrgScilabForgeJlatexmathAtom *OrgScilabForgeJlatexmathTeXParser_getScriptsWithChar_(OrgScilabForgeJlatexmathTeXParser *self, jchar f) {
  self->pos_++;
  OrgScilabForgeJlatexmathAtom *first = [self getArgument];
  OrgScilabForgeJlatexmathAtom *second = nil;
  jchar s = 0x0000;
  if (self->pos_ < self->len_) s = [((JavaLangStringBuffer *) nil_chk(self->parseString_)) charAtWithInt:self->pos_];
  if (f == OrgScilabForgeJlatexmathTeXParser_SUPER_SCRIPT && s == OrgScilabForgeJlatexmathTeXParser_SUPER_SCRIPT) {
    second = first;
    first = nil;
  }
  else if (f == OrgScilabForgeJlatexmathTeXParser_SUB_SCRIPT && s == OrgScilabForgeJlatexmathTeXParser_SUPER_SCRIPT) {
    self->pos_++;
    second = [self getArgument];
  }
  else if (f == OrgScilabForgeJlatexmathTeXParser_SUPER_SCRIPT && s == OrgScilabForgeJlatexmathTeXParser_SUB_SCRIPT) {
    self->pos_++;
    second = first;
    first = [self getArgument];
  }
  else if (f == OrgScilabForgeJlatexmathTeXParser_SUPER_SCRIPT && s != OrgScilabForgeJlatexmathTeXParser_SUB_SCRIPT) {
    second = first;
    first = nil;
  }
  OrgScilabForgeJlatexmathAtom *at;
  if ([((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(self->formula_))->root_ isKindOfClass:[OrgScilabForgeJlatexmathRowAtom class]]) {
    at = [((OrgScilabForgeJlatexmathRowAtom *) nil_chk(((OrgScilabForgeJlatexmathRowAtom *) check_class_cast(self->formula_->root_, [OrgScilabForgeJlatexmathRowAtom class])))) getLastAtom];
  }
  else if (self->formula_->root_ == nil) {
    at = new_OrgScilabForgeJlatexmathPhantomAtom_initWithOrgScilabForgeJlatexmathAtom_withBoolean_withBoolean_withBoolean_(new_OrgScilabForgeJlatexmathCharAtom_initWithChar_withNSString_('M', @"mathnormal"), NO, YES, YES);
  }
  else {
    at = self->formula_->root_;
    self->formula_->root_ = nil;
  }
  if ([((OrgScilabForgeJlatexmathAtom *) nil_chk(at)) getRightType] == OrgScilabForgeJlatexmathTeXConstants_TYPE_BIG_OPERATOR) return new_OrgScilabForgeJlatexmathBigOperatorAtom_initWithOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_(at, first, second);
  else if ([at isKindOfClass:[OrgScilabForgeJlatexmathOverUnderDelimiter class]]) {
    if ([((OrgScilabForgeJlatexmathOverUnderDelimiter *) check_class_cast(at, [OrgScilabForgeJlatexmathOverUnderDelimiter class])) isOver]) {
      if (second != nil) {
        [((OrgScilabForgeJlatexmathOverUnderDelimiter *) check_class_cast(at, [OrgScilabForgeJlatexmathOverUnderDelimiter class])) addScriptWithOrgScilabForgeJlatexmathAtom:second];
        return new_OrgScilabForgeJlatexmathScriptsAtom_initWithOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_(at, first, nil);
      }
    }
    else if (first != nil) {
      [((OrgScilabForgeJlatexmathOverUnderDelimiter *) check_class_cast(at, [OrgScilabForgeJlatexmathOverUnderDelimiter class])) addScriptWithOrgScilabForgeJlatexmathAtom:first];
      return new_OrgScilabForgeJlatexmathScriptsAtom_initWithOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_(at, nil, second);
    }
  }
  return new_OrgScilabForgeJlatexmathScriptsAtom_initWithOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathAtom_(at, first, second);
}

NSString *OrgScilabForgeJlatexmathTeXParser_getCommand(OrgScilabForgeJlatexmathTeXParser *self) {
  jint spos = ++self->pos_;
  jchar ch = 0x0000;
  while (self->pos_ < self->len_) {
    ch = [((JavaLangStringBuffer *) nil_chk(self->parseString_)) charAtWithInt:self->pos_];
    if ((ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z') && (self->atIsLetter_ == 0 || ch != '@')) break;
    self->pos_++;
  }
  if (ch == 0x0000) return @"";
  if (self->pos_ == spos) {
    self->pos_++;
  }
  NSString *com = [((JavaLangStringBuffer *) nil_chk(self->parseString_)) substringWithInt:spos withInt:self->pos_];
  if ([@"cr" isEqual:com] && self->pos_ < self->len_ && [self->parseString_ charAtWithInt:self->pos_] == ' ') {
    self->pos_++;
  }
  return com;
}

OrgScilabForgeJlatexmathAtom *OrgScilabForgeJlatexmathTeXParser_processEscape(OrgScilabForgeJlatexmathTeXParser *self) {
  self->spos_ = self->pos_;
  NSString *command = OrgScilabForgeJlatexmathTeXParser_getCommand(self);
  if (((jint) [((NSString *) nil_chk(command)) length]) == 0) {
    return new_OrgScilabForgeJlatexmathEmptyAtom_init();
  }
  if ([((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathMacroInfo_get_Commands_())) getWithId:command] != nil) return OrgScilabForgeJlatexmathTeXParser_processCommandsWithNSString_(self, command);
  @try {
    return ((OrgScilabForgeJlatexmathTeXFormula *) nil_chk(OrgScilabForgeJlatexmathTeXFormula_getWithNSString_(command)))->root_;
  }
  @catch (OrgScilabForgeJlatexmathExceptionFormulaNotFoundException *e) {
    @try {
      return OrgScilabForgeJlatexmathSymbolAtom_getWithNSString_(command);
    }
    @catch (OrgScilabForgeJlatexmathExceptionSymbolNotFoundException *e1) {
    }
  }
  if (!self->isPartial_) {
    @throw new_OrgScilabForgeJlatexmathExceptionParseException_initWithNSString_(JreStrcat("$$C", @"Unknown symbol or command or predefined TeXFormula: '", command, '\''));
  }
  else {
    return new_OrgScilabForgeJlatexmathColorAtom_initWithOrgScilabForgeJlatexmathAtom_withOrgScilabForgeJlatexmathPlatformGraphicsColor_withOrgScilabForgeJlatexmathPlatformGraphicsColor_(new_OrgScilabForgeJlatexmathRomanAtom_initWithOrgScilabForgeJlatexmathAtom_(new_OrgScilabForgeJlatexmathTeXFormula_initWithNSString_(JreStrcat("$$", @"\\backslash ", command))->root_), nil, OrgScilabForgeJlatexmathColorUtil_get_RED_());
  }
}

void OrgScilabForgeJlatexmathTeXParser_insertWithInt_withInt_withNSString_(OrgScilabForgeJlatexmathTeXParser *self, jint beg, jint end, NSString *formula) {
  (void) [((JavaLangStringBuffer *) nil_chk(self->parseString_)) replaceWithInt:beg withInt:end withNSString:formula];
  self->len_ = [self->parseString_ length];
  self->pos_ = beg;
  self->insertion_ = YES;
}

NSString *OrgScilabForgeJlatexmathTeXParser_getCommandWithArgsWithNSString_(OrgScilabForgeJlatexmathTeXParser *self, NSString *command) {
  if ([((NSString *) nil_chk(command)) isEqual:@"left"]) {
    return [self getGroupWithNSString:@"\\left" withNSString:@"\\right"];
  }
  OrgScilabForgeJlatexmathMacroInfo *mac = [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathMacroInfo_get_Commands_())) getWithId:command];
  if (mac != nil) {
    jint mac_opts = 0;
    if (mac->hasOptions_) {
      mac_opts = mac->posOpts_;
    }
    IOSObjectArray *mac_args = [self getOptsArgsWithInt:mac->nbArgs_ withInt:mac_opts];
    JavaLangStringBuffer *mac_arg = new_JavaLangStringBuffer_initWithNSString_(@"\\");
    (void) [mac_arg appendWithNSString:command];
    for (jint j = 0; j < mac->posOpts_; j++) {
      NSString *arg_t = IOSObjectArray_Get(nil_chk(mac_args), mac->nbArgs_ + j + 1);
      if (arg_t != nil) {
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([mac_arg appendWithNSString:@"["])) appendWithNSString:arg_t])) appendWithNSString:@"]"];
      }
    }
    for (jint j = 0; j < mac->nbArgs_; j++) {
      NSString *arg_t = IOSObjectArray_Get(nil_chk(mac_args), j + 1);
      if (arg_t != nil) {
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([mac_arg appendWithNSString:@"{"])) appendWithNSString:arg_t])) appendWithNSString:@"}"];
      }
    }
    return [mac_arg description];
  }
  return JreStrcat("C$", '\\', command);
}

OrgScilabForgeJlatexmathAtom *OrgScilabForgeJlatexmathTeXParser_processCommandsWithNSString_(OrgScilabForgeJlatexmathTeXParser *self, NSString *command) {
  OrgScilabForgeJlatexmathMacroInfo *mac = [((JavaUtilHashMap *) nil_chk(OrgScilabForgeJlatexmathMacroInfo_get_Commands_())) getWithId:command];
  jint opts = 0;
  if (((OrgScilabForgeJlatexmathMacroInfo *) nil_chk(mac))->hasOptions_) opts = mac->posOpts_;
  IOSObjectArray *args = [self getOptsArgsWithInt:mac->nbArgs_ withInt:opts];
  (void) IOSObjectArray_Set(nil_chk(args), 0, command);
  if (OrgScilabForgeJlatexmathNewCommandMacro_isMacroWithNSString_(command)) {
    NSString *ret = (NSString *) check_class_cast([mac invokeWithOrgScilabForgeJlatexmathTeXParser:self withNSStringArray:args], [NSString class]);
    OrgScilabForgeJlatexmathTeXParser_insertWithInt_withInt_withNSString_(self, self->spos_, self->pos_, ret);
    return nil;
  }
  return (OrgScilabForgeJlatexmathAtom *) check_class_cast([mac invokeWithOrgScilabForgeJlatexmathTeXParser:self withNSStringArray:args], [OrgScilabForgeJlatexmathAtom class]);
}

jboolean OrgScilabForgeJlatexmathTeXParser_isValidCharacterInCommandWithChar_(OrgScilabForgeJlatexmathTeXParser *self, jchar ch) {
  return JavaLangCharacter_isLetterWithChar_(ch) || (self->atIsLetter_ != 0 && ch == '@');
}

void OrgScilabForgeJlatexmathTeXParser_skipWhiteSpace(OrgScilabForgeJlatexmathTeXParser *self) {
  jchar c;
  while (self->pos_ < self->len_) {
    c = [((JavaLangStringBuffer *) nil_chk(self->parseString_)) charAtWithInt:self->pos_];
    if (c != ' ' && c != 0x0009 && c != 0x000a && c != 0x000d) break;
    if (c == 0x000a) {
      self->line_++;
      self->col_ = self->pos_;
    }
    self->pos_++;
  }
}

jchar OrgScilabForgeJlatexmathTeXParser_convertToRomanNumberWithChar_(jchar c) {
  OrgScilabForgeJlatexmathTeXParser_initialize();
  if (c == (jint) 0x66b) {
    return '.';
  }
  else if ((jint) 0x660 <= c && c <= (jint) 0x669) {
    return (jchar) (c - (jchar) (jint) 0x630);
  }
  else if ((jint) 0x6f0 <= c && c <= (jint) 0x6f9) {
    return (jchar) (c - (jchar) (jint) 0x6c0);
  }
  else if ((jint) 0x966 <= c && c <= (jint) 0x96f) {
    return (jchar) (c - (jchar) (jint) 0x936);
  }
  else if ((jint) 0x9e6 <= c && c <= (jint) 0x9ef) {
    return (jchar) (c - (jchar) (jint) 0x9b6);
  }
  else if ((jint) 0xa66 <= c && c <= (jint) 0xa6f) {
    return (jchar) (c - (jchar) (jint) 0xa36);
  }
  else if ((jint) 0xae6 <= c && c <= (jint) 0xaef) {
    return (jchar) (c - (jchar) (jint) 0xab6);
  }
  else if ((jint) 0xb66 <= c && c <= (jint) 0xb6f) {
    return (jchar) (c - (jchar) (jint) 0xb36);
  }
  else if ((jint) 0xc66 <= c && c <= (jint) 0xc6f) {
    return (jchar) (c - (jchar) (jint) 0xc36);
  }
  else if ((jint) 0xd66 <= c && c <= (jint) 0xd6f) {
    return (jchar) (c - (jchar) (jint) 0xd36);
  }
  else if ((jint) 0xe50 <= c && c <= (jint) 0xe59) {
    return (jchar) (c - (jchar) (jint) 0xe20);
  }
  else if ((jint) 0xed0 <= c && c <= (jint) 0xed9) {
    return (jchar) (c - (jchar) (jint) 0xea0);
  }
  else if ((jint) 0xf20 <= c && c <= (jint) 0xf29) {
    return (jchar) (c - (jchar) (jint) 0xe90);
  }
  else if ((jint) 0x1040 <= c && c <= (jint) 0x1049) {
    return (jchar) (c - (jchar) (jint) 0x1010);
  }
  else if ((jint) 0x17e0 <= c && c <= (jint) 0x17e9) {
    return (jchar) (c - (jchar) (jint) 0x17b0);
  }
  else if ((jint) 0x1810 <= c && c <= (jint) 0x1819) {
    return (jchar) (c - (jchar) (jint) 0x17e0);
  }
  else if ((jint) 0x1b50 <= c && c <= (jint) 0x1b59) {
    return (jchar) (c - (jchar) (jint) 0x1b20);
  }
  else if ((jint) 0x1bb0 <= c && c <= (jint) 0x1bb9) {
    return (jchar) (c - (jchar) (jint) 0x1b80);
  }
  else if ((jint) 0x1c40 <= c && c <= (jint) 0x1c49) {
    return (jchar) (c - (jchar) (jint) 0x1c10);
  }
  else if ((jint) 0x1c50 <= c && c <= (jint) 0x1c59) {
    return (jchar) (c - (jchar) (jint) 0x1c20);
  }
  else if ((jint) 0xa8d0 <= c && c <= (jint) 0xa8d9) {
    return (jchar) (c - (jchar) (jint) 0xa8a0);
  }
  return c;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgScilabForgeJlatexmathTeXParser)
